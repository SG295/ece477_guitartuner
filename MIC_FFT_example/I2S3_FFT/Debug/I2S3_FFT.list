
I2S3_FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d568  08007a70  08007a70  00008a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024fd8  08024fd8  00026068  2**0
                  CONTENTS
  4 .ARM          00000008  08024fd8  08024fd8  00025fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024fe0  08024fe0  00026068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024fe0  08024fe0  00025fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024fe4  08024fe4  00025fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08024fe8  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00026068  2**0
                  CONTENTS
 10 .bss          0000098c  20000068  20000068  00026068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009f4  200009f4  00026068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00026068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d868  00000000  00000000  00026098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a41  00000000  00000000  00043900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00047348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3b  00000000  00000000  00048330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235ce  00000000  00000000  00048e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001639f  00000000  00000000  0006c439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce4ee  00000000  00000000  000827d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00150cc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004930  00000000  00000000  00150d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001556b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000391c  00000000  00000000  00155718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000001b0  00000000  00000000  00159034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a58 	.word	0x08007a58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007a58 	.word	0x08007a58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b96a 	b.w	80008e4 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	460c      	mov	r4, r1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d14e      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000634:	4694      	mov	ip, r2
 8000636:	458c      	cmp	ip, r1
 8000638:	4686      	mov	lr, r0
 800063a:	fab2 f282 	clz	r2, r2
 800063e:	d962      	bls.n	8000706 <__udivmoddi4+0xde>
 8000640:	b14a      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	4091      	lsls	r1, r2
 8000648:	fa20 f303 	lsr.w	r3, r0, r3
 800064c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000650:	4319      	orrs	r1, r3
 8000652:	fa00 fe02 	lsl.w	lr, r0, r2
 8000656:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800065a:	fa1f f68c 	uxth.w	r6, ip
 800065e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000662:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000666:	fb07 1114 	mls	r1, r7, r4, r1
 800066a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066e:	fb04 f106 	mul.w	r1, r4, r6
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f104 30ff 	add.w	r0, r4, #4294967295
 800067e:	f080 8112 	bcs.w	80008a6 <__udivmoddi4+0x27e>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 810f 	bls.w	80008a6 <__udivmoddi4+0x27e>
 8000688:	3c02      	subs	r4, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a59      	subs	r1, r3, r1
 800068e:	fa1f f38e 	uxth.w	r3, lr
 8000692:	fbb1 f0f7 	udiv	r0, r1, r7
 8000696:	fb07 1110 	mls	r1, r7, r0, r1
 800069a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069e:	fb00 f606 	mul.w	r6, r0, r6
 80006a2:	429e      	cmp	r6, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x94>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80006ae:	f080 80fc 	bcs.w	80008aa <__udivmoddi4+0x282>
 80006b2:	429e      	cmp	r6, r3
 80006b4:	f240 80f9 	bls.w	80008aa <__udivmoddi4+0x282>
 80006b8:	4463      	add	r3, ip
 80006ba:	3802      	subs	r0, #2
 80006bc:	1b9b      	subs	r3, r3, r6
 80006be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006c2:	2100      	movs	r1, #0
 80006c4:	b11d      	cbz	r5, 80006ce <__udivmoddi4+0xa6>
 80006c6:	40d3      	lsrs	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	e9c5 3200 	strd	r3, r2, [r5]
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d905      	bls.n	80006e2 <__udivmoddi4+0xba>
 80006d6:	b10d      	cbz	r5, 80006dc <__udivmoddi4+0xb4>
 80006d8:	e9c5 0100 	strd	r0, r1, [r5]
 80006dc:	2100      	movs	r1, #0
 80006de:	4608      	mov	r0, r1
 80006e0:	e7f5      	b.n	80006ce <__udivmoddi4+0xa6>
 80006e2:	fab3 f183 	clz	r1, r3
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d146      	bne.n	8000778 <__udivmoddi4+0x150>
 80006ea:	42a3      	cmp	r3, r4
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xcc>
 80006ee:	4290      	cmp	r0, r2
 80006f0:	f0c0 80f0 	bcc.w	80008d4 <__udivmoddi4+0x2ac>
 80006f4:	1a86      	subs	r6, r0, r2
 80006f6:	eb64 0303 	sbc.w	r3, r4, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d0e6      	beq.n	80006ce <__udivmoddi4+0xa6>
 8000700:	e9c5 6300 	strd	r6, r3, [r5]
 8000704:	e7e3      	b.n	80006ce <__udivmoddi4+0xa6>
 8000706:	2a00      	cmp	r2, #0
 8000708:	f040 8090 	bne.w	800082c <__udivmoddi4+0x204>
 800070c:	eba1 040c 	sub.w	r4, r1, ip
 8000710:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000714:	fa1f f78c 	uxth.w	r7, ip
 8000718:	2101      	movs	r1, #1
 800071a:	fbb4 f6f8 	udiv	r6, r4, r8
 800071e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000722:	fb08 4416 	mls	r4, r8, r6, r4
 8000726:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800072a:	fb07 f006 	mul.w	r0, r7, r6
 800072e:	4298      	cmp	r0, r3
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x11c>
 8000732:	eb1c 0303 	adds.w	r3, ip, r3
 8000736:	f106 34ff 	add.w	r4, r6, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x11a>
 800073c:	4298      	cmp	r0, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2b4>
 8000742:	4626      	mov	r6, r4
 8000744:	1a1c      	subs	r4, r3, r0
 8000746:	fa1f f38e 	uxth.w	r3, lr
 800074a:	fbb4 f0f8 	udiv	r0, r4, r8
 800074e:	fb08 4410 	mls	r4, r8, r0, r4
 8000752:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000756:	fb00 f707 	mul.w	r7, r0, r7
 800075a:	429f      	cmp	r7, r3
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x148>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 34ff 	add.w	r4, r0, #4294967295
 8000766:	d202      	bcs.n	800076e <__udivmoddi4+0x146>
 8000768:	429f      	cmp	r7, r3
 800076a:	f200 80b0 	bhi.w	80008ce <__udivmoddi4+0x2a6>
 800076e:	4620      	mov	r0, r4
 8000770:	1bdb      	subs	r3, r3, r7
 8000772:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000776:	e7a5      	b.n	80006c4 <__udivmoddi4+0x9c>
 8000778:	f1c1 0620 	rsb	r6, r1, #32
 800077c:	408b      	lsls	r3, r1
 800077e:	fa22 f706 	lsr.w	r7, r2, r6
 8000782:	431f      	orrs	r7, r3
 8000784:	fa20 fc06 	lsr.w	ip, r0, r6
 8000788:	fa04 f301 	lsl.w	r3, r4, r1
 800078c:	ea43 030c 	orr.w	r3, r3, ip
 8000790:	40f4      	lsrs	r4, r6
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	0c38      	lsrs	r0, r7, #16
 8000798:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800079c:	fbb4 fef0 	udiv	lr, r4, r0
 80007a0:	fa1f fc87 	uxth.w	ip, r7
 80007a4:	fb00 441e 	mls	r4, r0, lr, r4
 80007a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ac:	fb0e f90c 	mul.w	r9, lr, ip
 80007b0:	45a1      	cmp	r9, r4
 80007b2:	fa02 f201 	lsl.w	r2, r2, r1
 80007b6:	d90a      	bls.n	80007ce <__udivmoddi4+0x1a6>
 80007b8:	193c      	adds	r4, r7, r4
 80007ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007be:	f080 8084 	bcs.w	80008ca <__udivmoddi4+0x2a2>
 80007c2:	45a1      	cmp	r9, r4
 80007c4:	f240 8081 	bls.w	80008ca <__udivmoddi4+0x2a2>
 80007c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007cc:	443c      	add	r4, r7
 80007ce:	eba4 0409 	sub.w	r4, r4, r9
 80007d2:	fa1f f983 	uxth.w	r9, r3
 80007d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007da:	fb00 4413 	mls	r4, r0, r3, r4
 80007de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e6:	45a4      	cmp	ip, r4
 80007e8:	d907      	bls.n	80007fa <__udivmoddi4+0x1d2>
 80007ea:	193c      	adds	r4, r7, r4
 80007ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80007f0:	d267      	bcs.n	80008c2 <__udivmoddi4+0x29a>
 80007f2:	45a4      	cmp	ip, r4
 80007f4:	d965      	bls.n	80008c2 <__udivmoddi4+0x29a>
 80007f6:	3b02      	subs	r3, #2
 80007f8:	443c      	add	r4, r7
 80007fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000802:	eba4 040c 	sub.w	r4, r4, ip
 8000806:	429c      	cmp	r4, r3
 8000808:	46ce      	mov	lr, r9
 800080a:	469c      	mov	ip, r3
 800080c:	d351      	bcc.n	80008b2 <__udivmoddi4+0x28a>
 800080e:	d04e      	beq.n	80008ae <__udivmoddi4+0x286>
 8000810:	b155      	cbz	r5, 8000828 <__udivmoddi4+0x200>
 8000812:	ebb8 030e 	subs.w	r3, r8, lr
 8000816:	eb64 040c 	sbc.w	r4, r4, ip
 800081a:	fa04 f606 	lsl.w	r6, r4, r6
 800081e:	40cb      	lsrs	r3, r1
 8000820:	431e      	orrs	r6, r3
 8000822:	40cc      	lsrs	r4, r1
 8000824:	e9c5 6400 	strd	r6, r4, [r5]
 8000828:	2100      	movs	r1, #0
 800082a:	e750      	b.n	80006ce <__udivmoddi4+0xa6>
 800082c:	f1c2 0320 	rsb	r3, r2, #32
 8000830:	fa20 f103 	lsr.w	r1, r0, r3
 8000834:	fa0c fc02 	lsl.w	ip, ip, r2
 8000838:	fa24 f303 	lsr.w	r3, r4, r3
 800083c:	4094      	lsls	r4, r2
 800083e:	430c      	orrs	r4, r1
 8000840:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000844:	fa00 fe02 	lsl.w	lr, r0, r2
 8000848:	fa1f f78c 	uxth.w	r7, ip
 800084c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000850:	fb08 3110 	mls	r1, r8, r0, r3
 8000854:	0c23      	lsrs	r3, r4, #16
 8000856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800085a:	fb00 f107 	mul.w	r1, r0, r7
 800085e:	4299      	cmp	r1, r3
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0x24c>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f100 36ff 	add.w	r6, r0, #4294967295
 800086a:	d22c      	bcs.n	80008c6 <__udivmoddi4+0x29e>
 800086c:	4299      	cmp	r1, r3
 800086e:	d92a      	bls.n	80008c6 <__udivmoddi4+0x29e>
 8000870:	3802      	subs	r0, #2
 8000872:	4463      	add	r3, ip
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f1f8 	udiv	r1, r3, r8
 800087c:	fb08 3311 	mls	r3, r8, r1, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb01 f307 	mul.w	r3, r1, r7
 8000888:	42a3      	cmp	r3, r4
 800088a:	d908      	bls.n	800089e <__udivmoddi4+0x276>
 800088c:	eb1c 0404 	adds.w	r4, ip, r4
 8000890:	f101 36ff 	add.w	r6, r1, #4294967295
 8000894:	d213      	bcs.n	80008be <__udivmoddi4+0x296>
 8000896:	42a3      	cmp	r3, r4
 8000898:	d911      	bls.n	80008be <__udivmoddi4+0x296>
 800089a:	3902      	subs	r1, #2
 800089c:	4464      	add	r4, ip
 800089e:	1ae4      	subs	r4, r4, r3
 80008a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008a4:	e739      	b.n	800071a <__udivmoddi4+0xf2>
 80008a6:	4604      	mov	r4, r0
 80008a8:	e6f0      	b.n	800068c <__udivmoddi4+0x64>
 80008aa:	4608      	mov	r0, r1
 80008ac:	e706      	b.n	80006bc <__udivmoddi4+0x94>
 80008ae:	45c8      	cmp	r8, r9
 80008b0:	d2ae      	bcs.n	8000810 <__udivmoddi4+0x1e8>
 80008b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008ba:	3801      	subs	r0, #1
 80008bc:	e7a8      	b.n	8000810 <__udivmoddi4+0x1e8>
 80008be:	4631      	mov	r1, r6
 80008c0:	e7ed      	b.n	800089e <__udivmoddi4+0x276>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e799      	b.n	80007fa <__udivmoddi4+0x1d2>
 80008c6:	4630      	mov	r0, r6
 80008c8:	e7d4      	b.n	8000874 <__udivmoddi4+0x24c>
 80008ca:	46d6      	mov	lr, sl
 80008cc:	e77f      	b.n	80007ce <__udivmoddi4+0x1a6>
 80008ce:	4463      	add	r3, ip
 80008d0:	3802      	subs	r0, #2
 80008d2:	e74d      	b.n	8000770 <__udivmoddi4+0x148>
 80008d4:	4606      	mov	r6, r0
 80008d6:	4623      	mov	r3, r4
 80008d8:	4608      	mov	r0, r1
 80008da:	e70f      	b.n	80006fc <__udivmoddi4+0xd4>
 80008dc:	3e02      	subs	r6, #2
 80008de:	4463      	add	r3, ip
 80008e0:	e730      	b.n	8000744 <__udivmoddi4+0x11c>
 80008e2:	bf00      	nop

080008e4 <__aeabi_idiv0>:
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d013      	beq.n	8000928 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000900:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000904:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000908:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00b      	beq.n	8000928 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000910:	e000      	b.n	8000914 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000912:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000914:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f9      	beq.n	8000912 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800091e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e009      	b.n	800095c <_write+0x26>
        ITM_SendChar((*ptr++));
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60ba      	str	r2, [r7, #8]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ffc9 	bl	80008e8 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf1      	blt.n	8000948 <_write+0x12>
    }
    return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000974:	b08e      	sub	sp, #56	@ 0x38
 8000976:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
  uint8_t uart_counter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 ff06 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f966 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 fab2 	bl	8000eec <MX_GPIO_Init>
  MX_DMA_Init();
 8000988:	f000 fa88 	bl	8000e9c <MX_DMA_Init>
  MX_I2C1_Init();
 800098c:	f000 f9ca 	bl	8000d24 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000990:	f000 fa24 	bl	8000ddc <MX_SPI1_Init>
  MX_I2S2_Init();
 8000994:	f000 f9f4 	bl	8000d80 <MX_I2S2_Init>
  MX_USART2_UART_Init();
 8000998:	f000 fa56 	bl	8000e48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
// MX_FATFS_Init();
  char msg[] = "Hello World!\r\n";
 800099c:	4b95      	ldr	r3, [pc, #596]	@ (8000bf4 <main+0x284>)
 800099e:	1d3c      	adds	r4, r7, #4
 80009a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a2:	c407      	stmia	r4!, {r0, r1, r2}
 80009a4:	8023      	strh	r3, [r4, #0]
 80009a6:	3402      	adds	r4, #2
 80009a8:	0c1b      	lsrs	r3, r3, #16
 80009aa:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fc0e 	bl	80001d0 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	1d39      	adds	r1, r7, #4
 80009ba:	2364      	movs	r3, #100	@ 0x64
 80009bc:	488e      	ldr	r0, [pc, #568]	@ (8000bf8 <main+0x288>)
 80009be:	f003 fe0c 	bl	80045da <HAL_UART_Transmit>

  HAL_I2S_DMAStop(&hi2s2);
 80009c2:	488e      	ldr	r0, [pc, #568]	@ (8000bfc <main+0x28c>)
 80009c4:	f002 f998 	bl	8002cf8 <HAL_I2S_DMAStop>
  HAL_Delay(500);
 80009c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009cc:	f000 ff50 	bl	8001870 <HAL_Delay>
  // Initializing FFT. We apply FFT for the first microphone and half of the buffer.
  // Therefore we divide by four: WAV_WRITE_SAMPLE_COUNT / 4
  arm_rfft_fast_init_f32(&fft_audio_instance, WAV_WRITE_SAMPLE_COUNT / 4);
 80009d0:	2140      	movs	r1, #64	@ 0x40
 80009d2:	488b      	ldr	r0, [pc, #556]	@ (8000c00 <main+0x290>)
 80009d4:	f004 ff88 	bl	80058e8 <arm_rfft_fast_init_f32>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting the program \n");
 80009d8:	488a      	ldr	r0, [pc, #552]	@ (8000c04 <main+0x294>)
 80009da:	f006 f9b7 	bl	8006d4c <puts>
  button_flag = 1;
 80009de:	4b8a      	ldr	r3, [pc, #552]	@ (8000c08 <main+0x298>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  if(button_flag)
 80009e4:	4b88      	ldr	r3, [pc, #544]	@ (8000c08 <main+0x298>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d029      	beq.n	8000a42 <main+0xd2>
	      {
	          // stop recording: stop I2S DMA
	          if(start_stop_recording)
 80009ee:	4b87      	ldr	r3, [pc, #540]	@ (8000c0c <main+0x29c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d015      	beq.n	8000a24 <main+0xb4>
	          {
	              HAL_I2S_DMAStop(&hi2s2);
 80009f8:	4880      	ldr	r0, [pc, #512]	@ (8000bfc <main+0x28c>)
 80009fa:	f002 f97d 	bl	8002cf8 <HAL_I2S_DMAStop>
	              start_stop_recording = 0;
 80009fe:	4b83      	ldr	r3, [pc, #524]	@ (8000c0c <main+0x29c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	              half_i2s = 0;
 8000a04:	4b82      	ldr	r3, [pc, #520]	@ (8000c10 <main+0x2a0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	              full_i2s = 0;
 8000a0a:	4b82      	ldr	r3, [pc, #520]	@ (8000c14 <main+0x2a4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	              printf("stop recording \n");
 8000a10:	4881      	ldr	r0, [pc, #516]	@ (8000c18 <main+0x2a8>)
 8000a12:	f006 f99b 	bl	8006d4c <puts>
	              // Turn off all LEDs when stopping
	              HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a1c:	487f      	ldr	r0, [pc, #508]	@ (8000c1c <main+0x2ac>)
 8000a1e:	f001 fdfb 	bl	8002618 <HAL_GPIO_WritePin>
 8000a22:	e00b      	b.n	8000a3c <main+0xcc>
	          }
	          // start recording: start DMA
	          else
	          {
	              start_stop_recording = 1;
 8000a24:	4b79      	ldr	r3, [pc, #484]	@ (8000c0c <main+0x29c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
	              printf("start_recording\n");
 8000a2a:	487d      	ldr	r0, [pc, #500]	@ (8000c20 <main+0x2b0>)
 8000a2c:	f006 f98e 	bl	8006d4c <puts>
	              HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 8000a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a34:	497b      	ldr	r1, [pc, #492]	@ (8000c24 <main+0x2b4>)
 8000a36:	4871      	ldr	r0, [pc, #452]	@ (8000bfc <main+0x28c>)
 8000a38:	f002 f8a6 	bl	8002b88 <HAL_I2S_Receive_DMA>
	          }
	          button_flag = 0;
 8000a3c:	4b72      	ldr	r3, [pc, #456]	@ (8000c08 <main+0x298>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
	      }

	      // Add LED flashing during recording
	      static uint32_t led_timestamp = 0;
	      if(start_stop_recording)
 8000a42:	4b72      	ldr	r3, [pc, #456]	@ (8000c0c <main+0x29c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d012      	beq.n	8000a72 <main+0x102>
	      {
	          if(HAL_GetTick() - led_timestamp > 500) // Flash every 500ms
 8000a4c:	f000 ff04 	bl	8001858 <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	4b75      	ldr	r3, [pc, #468]	@ (8000c28 <main+0x2b8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a5c:	d909      	bls.n	8000a72 <main+0x102>
	          {
	              HAL_GPIO_TogglePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin);
 8000a5e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a62:	486e      	ldr	r0, [pc, #440]	@ (8000c1c <main+0x2ac>)
 8000a64:	f001 fdf1 	bl	800264a <HAL_GPIO_TogglePin>
	              led_timestamp = HAL_GetTick();
 8000a68:	f000 fef6 	bl	8001858 <HAL_GetTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8000c28 <main+0x2b8>)
 8000a70:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // When half of the buffer is full
    if(start_stop_recording == 1 && half_i2s == 1)
 8000a72:	4b66      	ldr	r3, [pc, #408]	@ (8000c0c <main+0x29c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d17a      	bne.n	8000b72 <main+0x202>
 8000a7c:	4b64      	ldr	r3, [pc, #400]	@ (8000c10 <main+0x2a0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d175      	bne.n	8000b72 <main+0x202>
    {
        // extracting the data of the first microphone
        for(int i = 0; i < WAV_WRITE_SAMPLE_COUNT / 4; i++ )
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	e011      	b.n	8000ab0 <main+0x140>
        {
            mic1_data1[i] = (float32_t)data_i2s[i * 2];
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4a64      	ldr	r2, [pc, #400]	@ (8000c24 <main+0x2b4>)
 8000a92:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a96:	ee07 3a90 	vmov	s15, r3
 8000a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a9e:	4a63      	ldr	r2, [pc, #396]	@ (8000c2c <main+0x2bc>)
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i < WAV_WRITE_SAMPLE_COUNT / 4; i++ )
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ab4:	ddea      	ble.n	8000a8c <main+0x11c>
        }
        // apply FFT
        arm_rfft_fast_f32(&fft_audio_instance, mic1_data1, data_out_fft1, 0);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	4a5d      	ldr	r2, [pc, #372]	@ (8000c30 <main+0x2c0>)
 8000aba:	495c      	ldr	r1, [pc, #368]	@ (8000c2c <main+0x2bc>)
 8000abc:	4850      	ldr	r0, [pc, #320]	@ (8000c00 <main+0x290>)
 8000abe:	f004 fffd 	bl	8005abc <arm_rfft_fast_f32>
        // extract absolute values by computing the magnitude of the complex numbers
        // Pay attention that after this operation, half of the buffer possesses the magnitudes
        arm_cmplx_mag_f32(
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	495a      	ldr	r1, [pc, #360]	@ (8000c30 <main+0x2c0>)
 8000ac6:	485a      	ldr	r0, [pc, #360]	@ (8000c30 <main+0x2c0>)
 8000ac8:	f005 fbd4 	bl	8006274 <arm_cmplx_mag_f32>
            data_out_fft1,
            data_out_fft1,
            WAV_WRITE_SAMPLE_COUNT / 8);
        // bias removal
        data_out_fft1[0] = 0;
 8000acc:	4b58      	ldr	r3, [pc, #352]	@ (8000c30 <main+0x2c0>)
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
        if(full_i2s == 1)
 8000ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8000c14 <main+0x2a4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d102      	bne.n	8000ae4 <main+0x174>
        {
            printf("d \n");
 8000ade:	4855      	ldr	r0, [pc, #340]	@ (8000c34 <main+0x2c4>)
 8000ae0:	f006 f934 	bl	8006d4c <puts>
        }
        uart_counter++;
 8000ae4:	7ffb      	ldrb	r3, [r7, #31]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	77fb      	strb	r3, [r7, #31]
        // setting ">>>>" to indicate the end of the buffer
        data_out_fft1[WAV_WRITE_SAMPLE_COUNT / 8] = ('>'<<24|'>'<<16|'>'<<8|'>');
 8000aea:	4b51      	ldr	r3, [pc, #324]	@ (8000c30 <main+0x2c0>)
 8000aec:	4a52      	ldr	r2, [pc, #328]	@ (8000c38 <main+0x2c8>)
 8000aee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        if (uart_counter == 30)
 8000af2:	7ffb      	ldrb	r3, [r7, #31]
 8000af4:	2b1e      	cmp	r3, #30
 8000af6:	d139      	bne.n	8000b6c <main+0x1fc>
        {
            printf("uart start\n");
 8000af8:	4850      	ldr	r0, [pc, #320]	@ (8000c3c <main+0x2cc>)
 8000afa:	f006 f927 	bl	8006d4c <puts>
            uart_counter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	77fb      	strb	r3, [r7, #31]
            // sending only half of the buffer
            printf("Sending FFT data, values[0-3]: %f, %f, %f, %f\n",  data_out_fft1[0], data_out_fft1[1], data_out_fft1[2], data_out_fft1[3]);
 8000b02:	4b4b      	ldr	r3, [pc, #300]	@ (8000c30 <main+0x2c0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fd1e 	bl	8000548 <__aeabi_f2d>
 8000b0c:	4682      	mov	sl, r0
 8000b0e:	468b      	mov	fp, r1
 8000b10:	4b47      	ldr	r3, [pc, #284]	@ (8000c30 <main+0x2c0>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fd17 	bl	8000548 <__aeabi_f2d>
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	460d      	mov	r5, r1
 8000b1e:	4b44      	ldr	r3, [pc, #272]	@ (8000c30 <main+0x2c0>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd10 	bl	8000548 <__aeabi_f2d>
 8000b28:	4680      	mov	r8, r0
 8000b2a:	4689      	mov	r9, r1
 8000b2c:	4b40      	ldr	r3, [pc, #256]	@ (8000c30 <main+0x2c0>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd09 	bl	8000548 <__aeabi_f2d>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000b3e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000b42:	e9cd 4500 	strd	r4, r5, [sp]
 8000b46:	4652      	mov	r2, sl
 8000b48:	465b      	mov	r3, fp
 8000b4a:	483d      	ldr	r0, [pc, #244]	@ (8000c40 <main+0x2d0>)
 8000b4c:	f006 f896 	bl	8006c7c <iprintf>
            printf("Data size: %d bytes\n", sizeof(data_out_fft1) / 2 + 4);
 8000b50:	2184      	movs	r1, #132	@ 0x84
 8000b52:	483c      	ldr	r0, [pc, #240]	@ (8000c44 <main+0x2d4>)
 8000b54:	f006 f892 	bl	8006c7c <iprintf>

            // Then send the data
            HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&data_out_fft1, sizeof(data_out_fft1) / 2 + 4);
 8000b58:	2284      	movs	r2, #132	@ 0x84
 8000b5a:	4935      	ldr	r1, [pc, #212]	@ (8000c30 <main+0x2c0>)
 8000b5c:	4826      	ldr	r0, [pc, #152]	@ (8000bf8 <main+0x288>)
 8000b5e:	f003 fdc7 	bl	80046f0 <HAL_UART_Transmit_DMA>
            HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&data_out_fft1, sizeof(data_out_fft1) / 2 + 4);
 8000b62:	2284      	movs	r2, #132	@ 0x84
 8000b64:	4932      	ldr	r1, [pc, #200]	@ (8000c30 <main+0x2c0>)
 8000b66:	4824      	ldr	r0, [pc, #144]	@ (8000bf8 <main+0x288>)
 8000b68:	f003 fdc2 	bl	80046f0 <HAL_UART_Transmit_DMA>

        	}
        half_i2s = 0;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <main+0x2a0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
    }

    // The buffer is full
    if(start_stop_recording == 1 && full_i2s == 1)
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <main+0x29c>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	f47f af33 	bne.w	80009e4 <main+0x74>
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <main+0x2a4>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	f47f af2d 	bne.w	80009e4 <main+0x74>
    {
        // extracting the data of the first microphone
        for(int i = 0; i < WAV_WRITE_SAMPLE_COUNT / 4; i++ )
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e012      	b.n	8000bb6 <main+0x246>
        {
            mic1_data2[i] = (float32_t)data_i2s[i * 2 + WAV_WRITE_SAMPLE_COUNT / 2];
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3340      	adds	r3, #64	@ 0x40
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4a23      	ldr	r2, [pc, #140]	@ (8000c24 <main+0x2b4>)
 8000b98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000b9c:	ee07 3a90 	vmov	s15, r3
 8000ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba4:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <main+0x2d8>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i < WAV_WRITE_SAMPLE_COUNT / 4; i++ )
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bba:	dde9      	ble.n	8000b90 <main+0x220>
        }
        // applying FFT
        arm_rfft_fast_f32(&fft_audio_instance, mic1_data2, data_out_fft2, 0);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4a23      	ldr	r2, [pc, #140]	@ (8000c4c <main+0x2dc>)
 8000bc0:	4921      	ldr	r1, [pc, #132]	@ (8000c48 <main+0x2d8>)
 8000bc2:	480f      	ldr	r0, [pc, #60]	@ (8000c00 <main+0x290>)
 8000bc4:	f004 ff7a 	bl	8005abc <arm_rfft_fast_f32>
        // extract absolute values by computing the magnitude of the complex numbers
        // Pay attention that after this operation, half of the buffer possesses the magnitudes
        arm_cmplx_mag_f32(
 8000bc8:	2220      	movs	r2, #32
 8000bca:	4920      	ldr	r1, [pc, #128]	@ (8000c4c <main+0x2dc>)
 8000bcc:	481f      	ldr	r0, [pc, #124]	@ (8000c4c <main+0x2dc>)
 8000bce:	f005 fb51 	bl	8006274 <arm_cmplx_mag_f32>
            data_out_fft2,
            data_out_fft2,
            WAV_WRITE_SAMPLE_COUNT / 8);
        // bias removal
        data_out_fft2[0] = 0;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <main+0x2dc>)
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
        if(half_i2s == 1)
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <main+0x2a0>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <main+0x27a>
        {
            printf("d \n");
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <main+0x2c4>)
 8000be6:	f006 f8b1 	bl	8006d4c <puts>
        }
        full_i2s = 0;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <main+0x2a4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
  {
 8000bf0:	e6f8      	b.n	80009e4 <main+0x74>
 8000bf2:	bf00      	nop
 8000bf4:	08007b00 	.word	0x08007b00
 8000bf8:	200001d8 	.word	0x200001d8
 8000bfc:	200000d8 	.word	0x200000d8
 8000c00:	20000884 	.word	0x20000884
 8000c04:	08007a70 	.word	0x08007a70
 8000c08:	20000880 	.word	0x20000880
 8000c0c:	20000881 	.word	0x20000881
 8000c10:	20000882 	.word	0x20000882
 8000c14:	20000883 	.word	0x20000883
 8000c18:	08007a88 	.word	0x08007a88
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	08007a98 	.word	0x08007a98
 8000c24:	20000280 	.word	0x20000280
 8000c28:	2000089c 	.word	0x2000089c
 8000c2c:	20000480 	.word	0x20000480
 8000c30:	20000680 	.word	0x20000680
 8000c34:	08007aa8 	.word	0x08007aa8
 8000c38:	4e78f8f9 	.word	0x4e78f8f9
 8000c3c:	08007aac 	.word	0x08007aac
 8000c40:	08007ab8 	.word	0x08007ab8
 8000c44:	08007ae8 	.word	0x08007ae8
 8000c48:	20000580 	.word	0x20000580
 8000c4c:	20000780 	.word	0x20000780

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	@ 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	@ 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f006 f954 	bl	8006f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <SystemClock_Config+0xcc>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <SystemClock_Config+0xcc>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c84:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <SystemClock_Config+0xcc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <SystemClock_Config+0xd0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a21      	ldr	r2, [pc, #132]	@ (8000d20 <SystemClock_Config+0xd0>)
 8000c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <SystemClock_Config+0xd0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000cc4:	23a0      	movs	r3, #160	@ 0xa0
 8000cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fdcd 	bl	8003874 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ce0:	f000 fa4e 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cf0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2105      	movs	r1, #5
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 f82e 	bl	8003d64 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d0e:	f000 fa37 	bl	8001180 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3750      	adds	r7, #80	@ 0x50
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000

08000d24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d2a:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <MX_I2C1_Init+0x54>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d30:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <MX_I2C1_Init+0x58>)
 8000d32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d54:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d62:	f001 fc8d 	bl	8002680 <HAL_I2C_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d6c:	f000 fa08 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000084 	.word	0x20000084
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	000186a0 	.word	0x000186a0

08000d80 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000d86:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <MX_I2S2_Init+0x58>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000d8c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d90:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d98:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000da6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000daa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_I2S2_Init+0x54>)
 8000dc0:	f001 fda2 	bl	8002908 <HAL_I2S_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000dca:	f000 f9d9 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000d8 	.word	0x200000d8
 8000dd8:	40003800 	.word	0x40003800

08000ddc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de0:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000de2:	4a18      	ldr	r2, [pc, #96]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de6:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000de8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e28:	220a      	movs	r2, #10
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e2e:	f003 fafb 	bl	8004428 <HAL_SPI_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e38:	f000 f9a2 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000180 	.word	0x20000180
 8000e44:	40013000 	.word	0x40013000

08000e48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_USART2_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e80:	f003 fb5b 	bl	800453a <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8a:	f000 f979 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200001d8 	.word	0x200001d8
 8000e98:	40004400 	.word	0x40004400

08000e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_DMA_Init+0x4c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee8 <MX_DMA_Init+0x4c>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <MX_DMA_Init+0x4c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	200e      	movs	r0, #14
 8000ec4:	f000 fdd3 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ec8:	200e      	movs	r0, #14
 8000eca:	f000 fdec 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2011      	movs	r0, #17
 8000ed4:	f000 fdcb 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ed8:	2011      	movs	r0, #17
 8000eda:	f000 fde4 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	@ 0x30
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
 8000f06:	4b81      	ldr	r3, [pc, #516]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a80      	ldr	r2, [pc, #512]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b7e      	ldr	r3, [pc, #504]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	4b7a      	ldr	r3, [pc, #488]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a79      	ldr	r2, [pc, #484]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b77      	ldr	r3, [pc, #476]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b73      	ldr	r3, [pc, #460]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a72      	ldr	r2, [pc, #456]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b70      	ldr	r3, [pc, #448]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b6c      	ldr	r3, [pc, #432]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b69      	ldr	r3, [pc, #420]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b65      	ldr	r3, [pc, #404]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a64      	ldr	r2, [pc, #400]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b62      	ldr	r3, [pc, #392]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b5e      	ldr	r3, [pc, #376]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a5d      	ldr	r2, [pc, #372]	@ (800110c <MX_GPIO_Init+0x220>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800110c <MX_GPIO_Init+0x220>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2108      	movs	r1, #8
 8000fae:	4858      	ldr	r0, [pc, #352]	@ (8001110 <MX_GPIO_Init+0x224>)
 8000fb0:	f001 fb32 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4856      	ldr	r0, [pc, #344]	@ (8001114 <MX_GPIO_Init+0x228>)
 8000fba:	f001 fb2d 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000fc4:	4854      	ldr	r0, [pc, #336]	@ (8001118 <MX_GPIO_Init+0x22c>)
 8000fc6:	f001 fb27 	bl	8002618 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	484b      	ldr	r0, [pc, #300]	@ (8001110 <MX_GPIO_Init+0x224>)
 8000fe2:	f001 f97d 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4845      	ldr	r0, [pc, #276]	@ (8001114 <MX_GPIO_Init+0x228>)
 8000ffe:	f001 f96f 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001002:	2301      	movs	r3, #1
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001006:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4841      	ldr	r0, [pc, #260]	@ (800111c <MX_GPIO_Init+0x230>)
 8001018:	f001 f962 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800101c:	2310      	movs	r3, #16
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800102c:	2306      	movs	r3, #6
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4839      	ldr	r0, [pc, #228]	@ (800111c <MX_GPIO_Init+0x230>)
 8001038:	f001 f952 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800103c:	2302      	movs	r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001040:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001046:	2302      	movs	r3, #2
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4833      	ldr	r0, [pc, #204]	@ (8001120 <MX_GPIO_Init+0x234>)
 8001052:	f001 f945 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001056:	2304      	movs	r3, #4
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	482d      	ldr	r0, [pc, #180]	@ (8001120 <MX_GPIO_Init+0x234>)
 800106a:	f001 f939 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800106e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001072:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4824      	ldr	r0, [pc, #144]	@ (8001118 <MX_GPIO_Init+0x22c>)
 8001088:	f001 f92a 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800108c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800109e:	2306      	movs	r3, #6
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	481a      	ldr	r0, [pc, #104]	@ (8001114 <MX_GPIO_Init+0x228>)
 80010aa:	f001 f919 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4816      	ldr	r0, [pc, #88]	@ (800111c <MX_GPIO_Init+0x230>)
 80010c4:	f001 f90c 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010c8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010da:	230a      	movs	r3, #10
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	480d      	ldr	r0, [pc, #52]	@ (800111c <MX_GPIO_Init+0x230>)
 80010e6:	f001 f8fb 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010ea:	2320      	movs	r3, #32
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_GPIO_Init+0x22c>)
 80010fe:	f001 f8ef 	bl	80022e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	@ 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40021000 	.word	0x40021000
 8001114:	40020800 	.word	0x40020800
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400

08001124 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    full_i2s = 1;
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <HAL_I2S_RxCpltCallback+0x1c>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000883 	.word	0x20000883

08001144 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    half_i2s = 1;
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000882 	.word	0x20000882

08001164 <HAL_UART_TxCpltCallback>:
        button_flag = 1;
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    printf("uart over \n");
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <HAL_UART_TxCpltCallback+0x18>)
 800116e:	f005 fded 	bl	8006d4c <puts>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	08007b10 	.word	0x08007b10

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <HAL_MspInit+0x4c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ca:	2007      	movs	r0, #7
 80011cc:	f000 fc44 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <HAL_I2C_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12c      	bne.n	8001258 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800121a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001220:	2312      	movs	r3, #18
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001224:	2301      	movs	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122c:	2304      	movs	r3, #4
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	@ (8001268 <HAL_I2C_MspInit+0x8c>)
 8001238:	f001 f852 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001246:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	@ 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40005400 	.word	0x40005400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	@ 0x38
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a49      	ldr	r2, [pc, #292]	@ (80013bc <HAL_I2S_MspInit+0x150>)
 8001298:	4293      	cmp	r3, r2
 800129a:	f040 808b 	bne.w	80013b4 <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800129e:	2301      	movs	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80012a2:	2332      	movs	r3, #50	@ 0x32
 80012a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 ff78 	bl	80041a4 <HAL_RCCEx_PeriphCLKConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80012ba:	f7ff ff61 	bl	8001180 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b3f      	ldr	r3, [pc, #252]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	4a3e      	ldr	r2, [pc, #248]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ce:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a37      	ldr	r2, [pc, #220]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b35      	ldr	r3, [pc, #212]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a30      	ldr	r2, [pc, #192]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <HAL_I2S_MspInit+0x154>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001312:	2308      	movs	r3, #8
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001322:	2305      	movs	r3, #5
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4825      	ldr	r0, [pc, #148]	@ (80013c4 <HAL_I2S_MspInit+0x158>)
 800132e:	f000 ffd7 	bl	80022e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001332:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001344:	2305      	movs	r3, #5
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	481e      	ldr	r0, [pc, #120]	@ (80013c8 <HAL_I2S_MspInit+0x15c>)
 8001350:	f000 ffc6 	bl	80022e0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 8001356:	4a1e      	ldr	r2, [pc, #120]	@ (80013d0 <HAL_I2S_MspInit+0x164>)
 8001358:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 800136e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001372:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 8001376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800137a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 800137e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001382:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 8001386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800138a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001398:	480c      	ldr	r0, [pc, #48]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 800139a:	f000 fb9f 	bl	8001adc <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 80013a4:	f7ff feec 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 80013ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013ae:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_I2S_MspInit+0x160>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80013b4:	bf00      	nop
 80013b6:	3738      	adds	r7, #56	@ 0x38
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40003800 	.word	0x40003800
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020400 	.word	0x40020400
 80013cc:	20000120 	.word	0x20000120
 80013d0:	40026058 	.word	0x40026058

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	@ (8001458 <HAL_SPI_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_SPI_MspInit+0x88>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a17      	ldr	r2, [pc, #92]	@ (800145c <HAL_SPI_MspInit+0x88>)
 8001400:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_SPI_MspInit+0x88>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_SPI_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	@ (800145c <HAL_SPI_MspInit+0x88>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_SPI_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800142e:	23e0      	movs	r3, #224	@ 0xe0
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143e:	2305      	movs	r3, #5
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <HAL_SPI_MspInit+0x8c>)
 800144a:	f000 ff49 	bl	80022e0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	@ 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40013000 	.word	0x40013000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020000 	.word	0x40020000

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a34      	ldr	r2, [pc, #208]	@ (8001554 <HAL_UART_MspInit+0xf0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d162      	bne.n	800154c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <HAL_UART_MspInit+0xf4>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	4a32      	ldr	r2, [pc, #200]	@ (8001558 <HAL_UART_MspInit+0xf4>)
 8001490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001494:	6413      	str	r3, [r2, #64]	@ 0x40
 8001496:	4b30      	ldr	r3, [pc, #192]	@ (8001558 <HAL_UART_MspInit+0xf4>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001558 <HAL_UART_MspInit+0xf4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001558 <HAL_UART_MspInit+0xf4>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <HAL_UART_MspInit+0xf4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014be:	230c      	movs	r3, #12
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ce:	2307      	movs	r3, #7
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4820      	ldr	r0, [pc, #128]	@ (800155c <HAL_UART_MspInit+0xf8>)
 80014da:	f000 ff01 	bl	80022e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 80014e0:	4a20      	ldr	r2, [pc, #128]	@ (8001564 <HAL_UART_MspInit+0x100>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 80014e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 80014ee:	2240      	movs	r2, #64	@ 0x40
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 8001514:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001518:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001520:	480f      	ldr	r0, [pc, #60]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 8001522:	f000 fadb 	bl	8001adc <HAL_DMA_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800152c:	f7ff fe28 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <HAL_UART_MspInit+0xfc>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2026      	movs	r0, #38	@ 0x26
 8001542:	f000 fa94 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001546:	2026      	movs	r0, #38	@ 0x26
 8001548:	f000 faad 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40004400 	.word	0x40004400
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000
 8001560:	20000220 	.word	0x20000220
 8001564:	400260a0 	.word	0x400260a0

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <NMI_Handler+0x4>

08001570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <MemManage_Handler+0x4>

08001580 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <UsageFault_Handler+0x4>

08001590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015be:	f000 f937 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <DMA1_Stream3_IRQHandler+0x10>)
 80015ce:	f000 fc1d 	bl	8001e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000120 	.word	0x20000120

080015dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <DMA1_Stream6_IRQHandler+0x10>)
 80015e2:	f000 fc13 	bl	8001e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000220 	.word	0x20000220

080015f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <USART2_IRQHandler+0x10>)
 80015f6:	f003 f8eb 	bl	80047d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001d8 	.word	0x200001d8

08001604 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00a      	b.n	800162c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001616:	f3af 8000 	nop.w
 800161a:	4601      	mov	r1, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf0      	blt.n	8001616 <_read+0x12>
  }

  return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_close>:
  }
  return len;
}

int _close(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001666:	605a      	str	r2, [r3, #4]
  return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_isatty>:

int _isatty(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f005 fc66 	bl	8006fa8 <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20020000 	.word	0x20020000
 8001708:	00000400 	.word	0x00000400
 800170c:	200008a0 	.word	0x200008a0
 8001710:	200009f8 	.word	0x200009f8

08001714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <SystemInit+0x20>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <SystemInit+0x20>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001770 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800173c:	f7ff ffea 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	@ (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001766:	f005 fc25 	bl	8006fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176a:	f7ff f901 	bl	8000970 <main>
  bx  lr    
 800176e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800177c:	08024fe8 	.word	0x08024fe8
  ldr r2, =_sbss
 8001780:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001784:	200009f4 	.word	0x200009f4

08001788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <HAL_Init+0x40>)
 8001796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800179a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_Init+0x40>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <HAL_Init+0x40>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f94f 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f808 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fce4 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f967 	bl	8001ac2 <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f92f 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	@ (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000000 	.word	0x20000000
 8001828:	20000008 	.word	0x20000008
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000008 	.word	0x20000008
 8001854:	200008a4 	.word	0x200008a4

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	200008a4 	.word	0x200008a4

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff ffee 	bl	8001858 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffde 	bl	8001858 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008

080018b8 <__NVIC_SetPriorityGrouping>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	@ (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff3e 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff31 	bl	800191c <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa2 	bl	8001a14 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff feb6 	bl	8001858 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e099      	b.n	8001c2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b18:	e00f      	b.n	8001b3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b1a:	f7ff fe9d 	bl	8001858 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d908      	bls.n	8001b3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2203      	movs	r2, #3
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e078      	b.n	8001c2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e8      	bne.n	8001b1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <HAL_DMA_Init+0x158>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d107      	bne.n	8001ba4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f023 0307 	bic.w	r3, r3, #7
 8001bba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d117      	bne.n	8001bfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00e      	beq.n	8001bfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fb01 	bl	80021e8 <DMA_CheckFifoParam>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2240      	movs	r2, #64	@ 0x40
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e016      	b.n	8001c2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fab8 	bl	800217c <DMA_CalcBaseAndBitshift>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	223f      	movs	r2, #63	@ 0x3f
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	f010803f 	.word	0xf010803f

08001c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_DMA_Start_IT+0x26>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e040      	b.n	8001ce0 <HAL_DMA_Start_IT+0xa8>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d12f      	bne.n	8001cd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2202      	movs	r2, #2
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa4a 	bl	8002120 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	223f      	movs	r2, #63	@ 0x3f
 8001c92:	409a      	lsls	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0216 	orr.w	r2, r2, #22
 8001ca6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0208 	orr.w	r2, r2, #8
 8001cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e005      	b.n	8001cde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cf6:	f7ff fdaf 	bl	8001858 <HAL_GetTick>
 8001cfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d008      	beq.n	8001d1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2280      	movs	r2, #128	@ 0x80
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e052      	b.n	8001dc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0216 	bic.w	r2, r2, #22
 8001d28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d103      	bne.n	8001d4a <HAL_DMA_Abort+0x62>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0208 	bic.w	r2, r2, #8
 8001d58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0201 	bic.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6a:	e013      	b.n	8001d94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d6c:	f7ff fd74 	bl	8001858 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d90c      	bls.n	8001d94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2203      	movs	r2, #3
 8001d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e015      	b.n	8001dc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1e4      	bne.n	8001d6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da6:	223f      	movs	r2, #63	@ 0x3f
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2280      	movs	r2, #128	@ 0x80
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00c      	b.n	8001e00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e18:	4b8e      	ldr	r3, [pc, #568]	@ (8002054 <HAL_DMA_IRQHandler+0x248>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a8e      	ldr	r2, [pc, #568]	@ (8002058 <HAL_DMA_IRQHandler+0x24c>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0a9b      	lsrs	r3, r3, #10
 8001e24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	2208      	movs	r2, #8
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01a      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0204 	bic.w	r2, r2, #4
 8001e5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	2208      	movs	r2, #8
 8001e66:	409a      	lsls	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d012      	beq.n	8001eae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d012      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	f043 0204 	orr.w	r2, r3, #4
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	2210      	movs	r2, #16
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d043      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d03c      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	2210      	movs	r2, #16
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d018      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d108      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d024      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
 8001f3a:	e01f      	b.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e016      	b.n	8001f7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0208 	bic.w	r2, r2, #8
 8001f6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	2220      	movs	r2, #32
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 808f 	beq.w	80020ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8087 	beq.w	80020ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d136      	bne.n	8002024 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0216 	bic.w	r2, r2, #22
 8001fc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x1da>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0208 	bic.w	r2, r2, #8
 8001ff4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	223f      	movs	r2, #63	@ 0x3f
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07e      	beq.n	8002118 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
        }
        return;
 8002022:	e079      	b.n	8002118 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01d      	beq.n	800206e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	2b00      	cmp	r3, #0
 8002046:	d031      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
 8002050:	e02c      	b.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000
 8002058:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
 800206c:	e01e      	b.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10f      	bne.n	800209c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0210 	bic.w	r2, r2, #16
 800208a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d032      	beq.n	800211a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d022      	beq.n	8002106 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2205      	movs	r2, #5
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	3301      	adds	r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d307      	bcc.n	80020f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f2      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x2cc>
 80020f2:	e000      	b.n	80020f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
 8002116:	e000      	b.n	800211a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002118:	bf00      	nop
    }
  }
}
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800213c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b40      	cmp	r3, #64	@ 0x40
 800214c:	d108      	bne.n	8002160 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800215e:	e007      	b.n	8002170 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3b10      	subs	r3, #16
 800218c:	4a14      	ldr	r2, [pc, #80]	@ (80021e0 <DMA_CalcBaseAndBitshift+0x64>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002196:	4a13      	ldr	r2, [pc, #76]	@ (80021e4 <DMA_CalcBaseAndBitshift+0x68>)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d909      	bls.n	80021be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	1d1a      	adds	r2, r3, #4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80021bc:	e007      	b.n	80021ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	aaaaaaab 	.word	0xaaaaaaab
 80021e4:	08007b34 	.word	0x08007b34

080021e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d11f      	bne.n	8002242 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d856      	bhi.n	80022b6 <DMA_CheckFifoParam+0xce>
 8002208:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <DMA_CheckFifoParam+0x28>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002221 	.word	0x08002221
 8002214:	08002233 	.word	0x08002233
 8002218:	08002221 	.word	0x08002221
 800221c:	080022b7 	.word	0x080022b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d046      	beq.n	80022ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002230:	e043      	b.n	80022ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002236:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800223a:	d140      	bne.n	80022be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002240:	e03d      	b.n	80022be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800224a:	d121      	bne.n	8002290 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d837      	bhi.n	80022c2 <DMA_CheckFifoParam+0xda>
 8002252:	a201      	add	r2, pc, #4	@ (adr r2, 8002258 <DMA_CheckFifoParam+0x70>)
 8002254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002258:	08002269 	.word	0x08002269
 800225c:	0800226f 	.word	0x0800226f
 8002260:	08002269 	.word	0x08002269
 8002264:	08002281 	.word	0x08002281
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	e030      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d025      	beq.n	80022c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227e:	e022      	b.n	80022c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002288:	d11f      	bne.n	80022ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800228e:	e01c      	b.n	80022ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d903      	bls.n	800229e <DMA_CheckFifoParam+0xb6>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d003      	beq.n	80022a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800229c:	e018      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      break;
 80022a2:	e015      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e00b      	b.n	80022ce <DMA_CheckFifoParam+0xe6>
      break;
 80022b6:	bf00      	nop
 80022b8:	e00a      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e008      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
 80022c0:	e006      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e004      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e002      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
    }
  } 
  
  return status; 
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e16b      	b.n	80025d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 815a 	bne.w	80025ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80b4 	beq.w	80025ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b60      	ldr	r3, [pc, #384]	@ (80025ec <HAL_GPIO_Init+0x30c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a5f      	ldr	r2, [pc, #380]	@ (80025ec <HAL_GPIO_Init+0x30c>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b5d      	ldr	r3, [pc, #372]	@ (80025ec <HAL_GPIO_Init+0x30c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002482:	4a5b      	ldr	r2, [pc, #364]	@ (80025f0 <HAL_GPIO_Init+0x310>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	@ (80025f4 <HAL_GPIO_Init+0x314>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02b      	beq.n	8002506 <HAL_GPIO_Init+0x226>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a51      	ldr	r2, [pc, #324]	@ (80025f8 <HAL_GPIO_Init+0x318>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d025      	beq.n	8002502 <HAL_GPIO_Init+0x222>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a50      	ldr	r2, [pc, #320]	@ (80025fc <HAL_GPIO_Init+0x31c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01f      	beq.n	80024fe <HAL_GPIO_Init+0x21e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002600 <HAL_GPIO_Init+0x320>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x21a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002604 <HAL_GPIO_Init+0x324>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x216>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002608 <HAL_GPIO_Init+0x328>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x212>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4c      	ldr	r2, [pc, #304]	@ (800260c <HAL_GPIO_Init+0x32c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x20e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002610 <HAL_GPIO_Init+0x330>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x20a>
 80024e6:	2307      	movs	r3, #7
 80024e8:	e00e      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024ea:	2308      	movs	r3, #8
 80024ec:	e00c      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024ee:	2306      	movs	r3, #6
 80024f0:	e00a      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024f2:	2305      	movs	r3, #5
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024f6:	2304      	movs	r3, #4
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x228>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x228>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	@ (80025f0 <HAL_GPIO_Init+0x310>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b3b      	ldr	r3, [pc, #236]	@ (8002614 <HAL_GPIO_Init+0x334>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a32      	ldr	r2, [pc, #200]	@ (8002614 <HAL_GPIO_Init+0x334>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b30      	ldr	r3, [pc, #192]	@ (8002614 <HAL_GPIO_Init+0x334>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a27      	ldr	r2, [pc, #156]	@ (8002614 <HAL_GPIO_Init+0x334>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257a:	4b26      	ldr	r3, [pc, #152]	@ (8002614 <HAL_GPIO_Init+0x334>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259e:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <HAL_GPIO_Init+0x334>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_GPIO_Init+0x334>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c8:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <HAL_GPIO_Init+0x334>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f ae90 	bls.w	80022fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	@ 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800
 8002610:	40021c00 	.word	0x40021c00
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	041a      	lsls	r2, r3, #16
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43d9      	mvns	r1, r3
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	400b      	ands	r3, r1
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e12b      	b.n	80028ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fd98 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2224      	movs	r2, #36	@ 0x24
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026e4:	f001 fd36 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 80026e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a81      	ldr	r2, [pc, #516]	@ (80028f4 <HAL_I2C_Init+0x274>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d807      	bhi.n	8002704 <HAL_I2C_Init+0x84>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a80      	ldr	r2, [pc, #512]	@ (80028f8 <HAL_I2C_Init+0x278>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	bf94      	ite	ls
 80026fc:	2301      	movls	r3, #1
 80026fe:	2300      	movhi	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e006      	b.n	8002712 <HAL_I2C_Init+0x92>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a7d      	ldr	r2, [pc, #500]	@ (80028fc <HAL_I2C_Init+0x27c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	bf94      	ite	ls
 800270c:	2301      	movls	r3, #1
 800270e:	2300      	movhi	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0e7      	b.n	80028ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a78      	ldr	r2, [pc, #480]	@ (8002900 <HAL_I2C_Init+0x280>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0c9b      	lsrs	r3, r3, #18
 8002724:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a6a      	ldr	r2, [pc, #424]	@ (80028f4 <HAL_I2C_Init+0x274>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d802      	bhi.n	8002754 <HAL_I2C_Init+0xd4>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3301      	adds	r3, #1
 8002752:	e009      	b.n	8002768 <HAL_I2C_Init+0xe8>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	4a69      	ldr	r2, [pc, #420]	@ (8002904 <HAL_I2C_Init+0x284>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	3301      	adds	r3, #1
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	430b      	orrs	r3, r1
 800276e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800277a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	495c      	ldr	r1, [pc, #368]	@ (80028f4 <HAL_I2C_Init+0x274>)
 8002784:	428b      	cmp	r3, r1
 8002786:	d819      	bhi.n	80027bc <HAL_I2C_Init+0x13c>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e59      	subs	r1, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fbb1 f3f3 	udiv	r3, r1, r3
 8002796:	1c59      	adds	r1, r3, #1
 8002798:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800279c:	400b      	ands	r3, r1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_I2C_Init+0x138>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1e59      	subs	r1, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b6:	e051      	b.n	800285c <HAL_I2C_Init+0x1dc>
 80027b8:	2304      	movs	r3, #4
 80027ba:	e04f      	b.n	800285c <HAL_I2C_Init+0x1dc>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d111      	bne.n	80027e8 <HAL_I2C_Init+0x168>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e58      	subs	r0, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	440b      	add	r3, r1
 80027d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d6:	3301      	adds	r3, #1
 80027d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e012      	b.n	800280e <HAL_I2C_Init+0x18e>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	0099      	lsls	r1, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Init+0x196>
 8002812:	2301      	movs	r3, #1
 8002814:	e022      	b.n	800285c <HAL_I2C_Init+0x1dc>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10e      	bne.n	800283c <HAL_I2C_Init+0x1bc>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e58      	subs	r0, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	440b      	add	r3, r1
 800282c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800283a:	e00f      	b.n	800285c <HAL_I2C_Init+0x1dc>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e58      	subs	r0, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	0099      	lsls	r1, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	6809      	ldr	r1, [r1, #0]
 8002860:	4313      	orrs	r3, r2
 8002862:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800288a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6911      	ldr	r1, [r2, #16]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68d2      	ldr	r2, [r2, #12]
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	430b      	orrs	r3, r1
 800289e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	000186a0 	.word	0x000186a0
 80028f8:	001e847f 	.word	0x001e847f
 80028fc:	003d08ff 	.word	0x003d08ff
 8002900:	431bde83 	.word	0x431bde83
 8002904:	10624dd3 	.word	0x10624dd3

08002908 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e128      	b.n	8002b6c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a90      	ldr	r2, [pc, #576]	@ (8002b74 <HAL_I2S_Init+0x26c>)
 8002932:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7fe fc99 	bl	800126c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002950:	f023 030f 	bic.w	r3, r3, #15
 8002954:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2202      	movs	r2, #2
 800295c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d060      	beq.n	8002a28 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800296e:	2310      	movs	r3, #16
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e001      	b.n	8002978 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002974:	2320      	movs	r3, #32
 8002976:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b20      	cmp	r3, #32
 800297e:	d802      	bhi.n	8002986 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002986:	2001      	movs	r0, #1
 8002988:	f001 fcee 	bl	8004368 <HAL_RCCEx_GetPeriphCLKFreq>
 800298c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002996:	d125      	bne.n	80029e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	461a      	mov	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	3305      	adds	r3, #5
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	e01f      	b.n	8002a02 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	461a      	mov	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	3305      	adds	r3, #5
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	e00e      	b.n	8002a02 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	3305      	adds	r3, #5
 8002a00:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4a5c      	ldr	r2, [pc, #368]	@ (8002b78 <HAL_I2S_Init+0x270>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	08db      	lsrs	r3, r3, #3
 8002a0c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e003      	b.n	8002a30 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d902      	bls.n	8002a3c <HAL_I2S_Init+0x134>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	2bff      	cmp	r3, #255	@ 0xff
 8002a3a:	d907      	bls.n	8002a4c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	f043 0210 	orr.w	r2, r3, #16
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e08f      	b.n	8002b6c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	ea42 0103 	orr.w	r1, r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002a6a:	f023 030f 	bic.w	r3, r3, #15
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6851      	ldr	r1, [r2, #4]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6892      	ldr	r2, [r2, #8]
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68d2      	ldr	r2, [r2, #12]
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6992      	ldr	r2, [r2, #24]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a8e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d161      	bne.n	8002b5c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a38      	ldr	r2, [pc, #224]	@ (8002b7c <HAL_I2S_Init+0x274>)
 8002a9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a37      	ldr	r2, [pc, #220]	@ (8002b80 <HAL_I2S_Init+0x278>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_I2S_Init+0x1a4>
 8002aa8:	4b36      	ldr	r3, [pc, #216]	@ (8002b84 <HAL_I2S_Init+0x27c>)
 8002aaa:	e001      	b.n	8002ab0 <HAL_I2S_Init+0x1a8>
 8002aac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	4932      	ldr	r1, [pc, #200]	@ (8002b80 <HAL_I2S_Init+0x278>)
 8002ab8:	428a      	cmp	r2, r1
 8002aba:	d101      	bne.n	8002ac0 <HAL_I2S_Init+0x1b8>
 8002abc:	4a31      	ldr	r2, [pc, #196]	@ (8002b84 <HAL_I2S_Init+0x27c>)
 8002abe:	e001      	b.n	8002ac4 <HAL_I2S_Init+0x1bc>
 8002ac0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002ac4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002ac8:	f023 030f 	bic.w	r3, r3, #15
 8002acc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b80 <HAL_I2S_Init+0x278>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <HAL_I2S_Init+0x1d4>
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <HAL_I2S_Init+0x27c>)
 8002ada:	e001      	b.n	8002ae0 <HAL_I2S_Init+0x1d8>
 8002adc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a25      	ldr	r2, [pc, #148]	@ (8002b80 <HAL_I2S_Init+0x278>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_I2S_Init+0x1ea>
 8002aee:	4b25      	ldr	r3, [pc, #148]	@ (8002b84 <HAL_I2S_Init+0x27c>)
 8002af0:	e001      	b.n	8002af6 <HAL_I2S_Init+0x1ee>
 8002af2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b02:	d003      	beq.n	8002b0c <HAL_I2S_Init+0x204>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	e001      	b.n	8002b18 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b22:	4313      	orrs	r3, r2
 8002b24:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b36:	4313      	orrs	r3, r2
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	897b      	ldrh	r3, [r7, #10]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b44:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_I2S_Init+0x278>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2S_Init+0x24c>
 8002b50:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <HAL_I2S_Init+0x27c>)
 8002b52:	e001      	b.n	8002b58 <HAL_I2S_Init+0x250>
 8002b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b58:	897a      	ldrh	r2, [r7, #10]
 8002b5a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	08003239 	.word	0x08003239
 8002b78:	cccccccd 	.word	0xcccccccd
 8002b7c:	080033c1 	.word	0x080033c1
 8002b80:	40003800 	.word	0x40003800
 8002b84:	40003400 	.word	0x40003400

08002b88 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_I2S_Receive_DMA+0x1a>
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e09d      	b.n	8002ce2 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e095      	b.n	8002ce2 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2S_Receive_DMA+0x3e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e08d      	b.n	8002ce2 <HAL_I2S_Receive_DMA+0x15a>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d002      	beq.n	8002bfa <HAL_I2S_Receive_DMA+0x72>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10a      	bne.n	8002c10 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002c0e:	e005      	b.n	8002c1c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c20:	4a32      	ldr	r2, [pc, #200]	@ (8002cec <HAL_I2S_Receive_DMA+0x164>)
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	4a31      	ldr	r2, [pc, #196]	@ (8002cf0 <HAL_I2S_Receive_DMA+0x168>)
 8002c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	4a30      	ldr	r2, [pc, #192]	@ (8002cf4 <HAL_I2S_Receive_DMA+0x16c>)
 8002c32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c42:	d10a      	bne.n	8002c5a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	4619      	mov	r1, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002c70:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002c72:	f7fe ffe1 	bl	8001c38 <HAL_DMA_Start_IT>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00f      	beq.n	8002c9c <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	f043 0208 	orr.w	r2, r3, #8
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e022      	b.n	8002ce2 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cde:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	08003117 	.word	0x08003117
 8002cf0:	080030d5 	.word	0x080030d5
 8002cf4:	08003133 	.word	0x08003133

08002cf8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d0c:	d004      	beq.n	8002d18 <HAL_I2S_DMAStop+0x20>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 80d1 	bne.w	8002eba <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00f      	beq.n	8002d40 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe ffdf 	bl	8001ce8 <HAL_DMA_Abort>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	f043 0208 	orr.w	r2, r3, #8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002d40:	2364      	movs	r3, #100	@ 0x64
 8002d42:	2201      	movs	r2, #1
 8002d44:	2102      	movs	r1, #2
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fb00 	bl	800334c <I2S_WaitFlagStateUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002d6a:	2364      	movs	r3, #100	@ 0x64
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2180      	movs	r1, #128	@ 0x80
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 faeb 	bl	800334c <I2S_WaitFlagStateUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0202 	bic.w	r2, r2, #2
 8002dc0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	f040 8165 	bne.w	800309a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00f      	beq.n	8002df8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe ff83 	bl	8001ce8 <HAL_DMA_Abort>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dec:	f043 0208 	orr.w	r2, r3, #8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8a      	ldr	r2, [pc, #552]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_I2S_DMAStop+0x10e>
 8002e02:	4b8a      	ldr	r3, [pc, #552]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002e04:	e001      	b.n	8002e0a <HAL_I2S_DMAStop+0x112>
 8002e06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4985      	ldr	r1, [pc, #532]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002e12:	428b      	cmp	r3, r1
 8002e14:	d101      	bne.n	8002e1a <HAL_I2S_DMAStop+0x122>
 8002e16:	4b85      	ldr	r3, [pc, #532]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002e18:	e001      	b.n	8002e1e <HAL_I2S_DMAStop+0x126>
 8002e1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e22:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a7e      	ldr	r2, [pc, #504]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_I2S_DMAStop+0x13e>
 8002e32:	4b7e      	ldr	r3, [pc, #504]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002e34:	e001      	b.n	8002e3a <HAL_I2S_DMAStop+0x142>
 8002e36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a79      	ldr	r2, [pc, #484]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_I2S_DMAStop+0x154>
 8002e48:	4b78      	ldr	r3, [pc, #480]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002e4a:	e001      	b.n	8002e50 <HAL_I2S_DMAStop+0x158>
 8002e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a73      	ldr	r2, [pc, #460]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d101      	bne.n	8002e64 <HAL_I2S_DMAStop+0x16c>
 8002e60:	4b72      	ldr	r3, [pc, #456]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002e62:	e001      	b.n	8002e68 <HAL_I2S_DMAStop+0x170>
 8002e64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	496e      	ldr	r1, [pc, #440]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002e70:	428b      	cmp	r3, r1
 8002e72:	d101      	bne.n	8002e78 <HAL_I2S_DMAStop+0x180>
 8002e74:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002e76:	e001      	b.n	8002e7c <HAL_I2S_DMAStop+0x184>
 8002e78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002ea2:	e0fa      	b.n	800309a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5f      	ldr	r2, [pc, #380]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2S_DMAStop+0x1ba>
 8002eae:	4b5f      	ldr	r3, [pc, #380]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002eb0:	e001      	b.n	8002eb6 <HAL_I2S_DMAStop+0x1be>
 8002eb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eb6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002eb8:	e0ef      	b.n	800309a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ec2:	d005      	beq.n	8002ed0 <HAL_I2S_DMAStop+0x1d8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ecc:	f040 80e5 	bne.w	800309a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00f      	beq.n	8002ef8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe ff03 	bl	8001ce8 <HAL_DMA_Abort>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	f043 0208 	orr.w	r2, r3, #8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	f040 809a 	bne.w	800303a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00f      	beq.n	8002f2e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fee8 	bl	8001ce8 <HAL_DMA_Abort>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f22:	f043 0208 	orr.w	r2, r3, #8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002f2e:	f7fe fc93 	bl	8001858 <HAL_GetTick>
 8002f32:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002f34:	e012      	b.n	8002f5c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002f36:	f7fe fc8f 	bl	8001858 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	@ 0x64
 8002f42:	d90b      	bls.n	8002f5c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a31      	ldr	r2, [pc, #196]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_I2S_DMAStop+0x272>
 8002f66:	4b31      	ldr	r3, [pc, #196]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002f68:	e001      	b.n	8002f6e <HAL_I2S_DMAStop+0x276>
 8002f6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d1de      	bne.n	8002f36 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002f78:	e012      	b.n	8002fa0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002f7a:	f7fe fc6d 	bl	8001858 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	@ 0x64
 8002f86:	d90b      	bls.n	8002fa0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_I2S_DMAStop+0x2b6>
 8002faa:	4b20      	ldr	r3, [pc, #128]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002fac:	e001      	b.n	8002fb2 <HAL_I2S_DMAStop+0x2ba>
 8002fae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb8:	2b80      	cmp	r3, #128	@ 0x80
 8002fba:	d0de      	beq.n	8002f7a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_I2S_DMAStop+0x2d2>
 8002fc6:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002fc8:	e001      	b.n	8002fce <HAL_I2S_DMAStop+0x2d6>
 8002fca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4914      	ldr	r1, [pc, #80]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002fd6:	428b      	cmp	r3, r1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2S_DMAStop+0x2e6>
 8002fda:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002fdc:	e001      	b.n	8002fe2 <HAL_I2S_DMAStop+0x2ea>
 8002fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2S_DMAStop+0x302>
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8002ff8:	e001      	b.n	8002ffe <HAL_I2S_DMAStop+0x306>
 8002ffa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a07      	ldr	r2, [pc, #28]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_I2S_DMAStop+0x31a>
 800300e:	4b07      	ldr	r3, [pc, #28]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8003010:	e001      	b.n	8003016 <HAL_I2S_DMAStop+0x31e>
 8003012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4902      	ldr	r1, [pc, #8]	@ (8003028 <HAL_I2S_DMAStop+0x330>)
 800301e:	428b      	cmp	r3, r1
 8003020:	d106      	bne.n	8003030 <HAL_I2S_DMAStop+0x338>
 8003022:	4b02      	ldr	r3, [pc, #8]	@ (800302c <HAL_I2S_DMAStop+0x334>)
 8003024:	e006      	b.n	8003034 <HAL_I2S_DMAStop+0x33c>
 8003026:	bf00      	nop
 8003028:	40003800 	.word	0x40003800
 800302c:	40003400 	.word	0x40003400
 8003030:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003034:	f022 0202 	bic.w	r2, r2, #2
 8003038:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003048:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003078:	d10c      	bne.n	8003094 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e002      	b.n	800309a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10e      	bne.n	8003108 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7fe f80b 	bl	8001124 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003122:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7fe f80d 	bl	8001144 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0203 	bic.w	r2, r2, #3
 800314e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003168:	f043 0208 	orr.w	r2, r3, #8
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff ffa5 	bl	80030c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	1c9a      	adds	r2, r3, #2
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10e      	bne.n	80031d2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff6d 	bl	80030ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	b292      	uxth	r2, r2
 80031ee:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	1c9a      	adds	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10e      	bne.n	8003230 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003220:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd ff7a 	bl	8001124 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b04      	cmp	r3, #4
 8003252:	d13a      	bne.n	80032ca <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d109      	bne.n	8003272 <I2S_IRQHandler+0x3a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d102      	bne.n	8003272 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ffb4 	bl	80031da <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b40      	cmp	r3, #64	@ 0x40
 800327a:	d126      	bne.n	80032ca <I2S_IRQHandler+0x92>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b20      	cmp	r3, #32
 8003288:	d11f      	bne.n	80032ca <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003298:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	f043 0202 	orr.w	r2, r3, #2
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff fefb 	bl	80030c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d136      	bne.n	8003344 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d109      	bne.n	80032f4 <I2S_IRQHandler+0xbc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ea:	2b80      	cmp	r3, #128	@ 0x80
 80032ec:	d102      	bne.n	80032f4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ff45 	bl	800317e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d122      	bne.n	8003344 <I2S_IRQHandler+0x10c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b20      	cmp	r3, #32
 800330a:	d11b      	bne.n	8003344 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800331a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f043 0204 	orr.w	r2, r3, #4
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff febe 	bl	80030c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003344:	bf00      	nop
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800335c:	f7fe fa7c 	bl	8001858 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003362:	e018      	b.n	8003396 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d014      	beq.n	8003396 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800336c:	f7fe fa74 	bl	8001858 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d902      	bls.n	8003382 <I2S_WaitFlagStateUntilTimeout+0x36>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e00f      	b.n	80033b6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1d7      	bne.n	8003364 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a92      	ldr	r2, [pc, #584]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033da:	4b92      	ldr	r3, [pc, #584]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033dc:	e001      	b.n	80033e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a8b      	ldr	r2, [pc, #556]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033fa:	e001      	b.n	8003400 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800340c:	d004      	beq.n	8003418 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8099 	bne.w	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d107      	bne.n	8003432 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f925 	bl	800367c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d107      	bne.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9c8 	bl	80037dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d13a      	bne.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d035      	beq.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a6e      	ldr	r2, [pc, #440]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800346a:	4b6e      	ldr	r3, [pc, #440]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800346c:	e001      	b.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800346e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4969      	ldr	r1, [pc, #420]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800347a:	428b      	cmp	r3, r1
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800347e:	4b69      	ldr	r3, [pc, #420]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003480:	e001      	b.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003486:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800348a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800349a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fdfa 	bl	80030c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	f040 80c3 	bne.w	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80bd 	beq.w	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a49      	ldr	r2, [pc, #292]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034fe:	4b49      	ldr	r3, [pc, #292]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003500:	e001      	b.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003502:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4944      	ldr	r1, [pc, #272]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800350e:	428b      	cmp	r3, r1
 8003510:	d101      	bne.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003512:	4b44      	ldr	r3, [pc, #272]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003514:	e001      	b.n	800351a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003516:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800351a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800351e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff fdbc 	bl	80030c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003548:	e089      	b.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d107      	bne.n	8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8be 	bl	80036e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8fd 	bl	8003778 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003584:	2b40      	cmp	r3, #64	@ 0x40
 8003586:	d12f      	bne.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02a      	beq.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ae:	e001      	b.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4919      	ldr	r1, [pc, #100]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035bc:	428b      	cmp	r3, r1
 80035be:	d101      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035c0:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c2:	e001      	b.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80035cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	f043 0202 	orr.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fd6c 	bl	80030c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d136      	bne.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d031      	beq.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a07      	ldr	r2, [pc, #28]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003606:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003608:	e001      	b.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4902      	ldr	r1, [pc, #8]	@ (8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003616:	428b      	cmp	r3, r1
 8003618:	d106      	bne.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800361a:	4b02      	ldr	r3, [pc, #8]	@ (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800361c:	e006      	b.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800361e:	bf00      	nop
 8003620:	40003800 	.word	0x40003800
 8003624:	40003400 	.word	0x40003400
 8003628:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800362c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003630:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003640:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fd32 	bl	80030c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800365c:	e000      	b.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800365e:	bf00      	nop
}
 8003660:	bf00      	nop
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	1c99      	adds	r1, r3, #2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6251      	str	r1, [r2, #36]	@ 0x24
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d113      	bne.n	80036d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ffc9 	bl	8003668 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	1c99      	adds	r1, r3, #2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6251      	str	r1, [r2, #36]	@ 0x24
 80036f2:	8819      	ldrh	r1, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <I2SEx_TxISR_I2SExt+0x90>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <I2SEx_TxISR_I2SExt+0x22>
 80036fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <I2SEx_TxISR_I2SExt+0x94>)
 8003700:	e001      	b.n	8003706 <I2SEx_TxISR_I2SExt+0x26>
 8003702:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003706:	460a      	mov	r2, r1
 8003708:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d121      	bne.n	8003766 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a12      	ldr	r2, [pc, #72]	@ (8003770 <I2SEx_TxISR_I2SExt+0x90>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <I2SEx_TxISR_I2SExt+0x50>
 800372c:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <I2SEx_TxISR_I2SExt+0x94>)
 800372e:	e001      	b.n	8003734 <I2SEx_TxISR_I2SExt+0x54>
 8003730:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	490d      	ldr	r1, [pc, #52]	@ (8003770 <I2SEx_TxISR_I2SExt+0x90>)
 800373c:	428b      	cmp	r3, r1
 800373e:	d101      	bne.n	8003744 <I2SEx_TxISR_I2SExt+0x64>
 8003740:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <I2SEx_TxISR_I2SExt+0x94>)
 8003742:	e001      	b.n	8003748 <I2SEx_TxISR_I2SExt+0x68>
 8003744:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003748:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800374c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff81 	bl	8003668 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40003800 	.word	0x40003800
 8003774:	40003400 	.word	0x40003400

08003778 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68d8      	ldr	r0, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	1c99      	adds	r1, r3, #2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003790:	b282      	uxth	r2, r0
 8003792:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d113      	bne.n	80037d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ff4a 	bl	8003668 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a20      	ldr	r2, [pc, #128]	@ (800386c <I2SEx_RxISR_I2SExt+0x90>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <I2SEx_RxISR_I2SExt+0x16>
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <I2SEx_RxISR_I2SExt+0x94>)
 80037f0:	e001      	b.n	80037f6 <I2SEx_RxISR_I2SExt+0x1a>
 80037f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037f6:	68d8      	ldr	r0, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	1c99      	adds	r1, r3, #2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003802:	b282      	uxth	r2, r0
 8003804:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d121      	bne.n	8003862 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a12      	ldr	r2, [pc, #72]	@ (800386c <I2SEx_RxISR_I2SExt+0x90>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <I2SEx_RxISR_I2SExt+0x50>
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <I2SEx_RxISR_I2SExt+0x94>)
 800382a:	e001      	b.n	8003830 <I2SEx_RxISR_I2SExt+0x54>
 800382c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	490d      	ldr	r1, [pc, #52]	@ (800386c <I2SEx_RxISR_I2SExt+0x90>)
 8003838:	428b      	cmp	r3, r1
 800383a:	d101      	bne.n	8003840 <I2SEx_RxISR_I2SExt+0x64>
 800383c:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <I2SEx_RxISR_I2SExt+0x94>)
 800383e:	e001      	b.n	8003844 <I2SEx_RxISR_I2SExt+0x68>
 8003840:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003844:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003848:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff03 	bl	8003668 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40003800 	.word	0x40003800
 8003870:	40003400 	.word	0x40003400

08003874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e267      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003892:	4b88      	ldr	r3, [pc, #544]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b85      	ldr	r3, [pc, #532]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d112      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038aa:	4b82      	ldr	r3, [pc, #520]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05b      	beq.n	800397c <HAL_RCC_OscConfig+0x108>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d157      	bne.n	800397c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e242      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x74>
 80038da:	4b76      	ldr	r3, [pc, #472]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a75      	ldr	r2, [pc, #468]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4b70      	ldr	r3, [pc, #448]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6f      	ldr	r2, [pc, #444]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a6c      	ldr	r2, [pc, #432]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 800390c:	4b69      	ldr	r3, [pc, #420]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a68      	ldr	r2, [pc, #416]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b66      	ldr	r3, [pc, #408]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a65      	ldr	r2, [pc, #404]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd ff94 	bl	8001858 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003934:	f7fd ff90 	bl	8001858 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	@ 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e207      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xc0>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fd ff80 	bl	8001858 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800395c:	f7fd ff7c 	bl	8001858 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	@ 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1f3      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	4b51      	ldr	r3, [pc, #324]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0xe8>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d063      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800398a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b47      	ldr	r3, [pc, #284]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11c      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b44      	ldr	r3, [pc, #272]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	4b41      	ldr	r3, [pc, #260]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1c7      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4937      	ldr	r1, [pc, #220]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	e03a      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e4:	4b34      	ldr	r3, [pc, #208]	@ (8003ab8 <HAL_RCC_OscConfig+0x244>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fd ff35 	bl	8001858 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fd ff31 	bl	8001858 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1a8      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4925      	ldr	r1, [pc, #148]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b24      	ldr	r3, [pc, #144]	@ (8003ab8 <HAL_RCC_OscConfig+0x244>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd ff14 	bl	8001858 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fd ff10 	bl	8001858 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e187      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d036      	beq.n	8003acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a66:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <HAL_RCC_OscConfig+0x248>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fef4 	bl	8001858 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fd fef0 	bl	8001858 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e167      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x200>
 8003a92:	e01b      	b.n	8003acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_RCC_OscConfig+0x248>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fd fedd 	bl	8001858 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	e00e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fd fed9 	bl	8001858 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d907      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e150      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	42470000 	.word	0x42470000
 8003abc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	4b88      	ldr	r3, [pc, #544]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ea      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8097 	beq.w	8003c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ade:	4b81      	ldr	r3, [pc, #516]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afa:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	4b77      	ldr	r3, [pc, #476]	@ (8003ce8 <HAL_RCC_OscConfig+0x474>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d118      	bne.n	8003b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b16:	4b74      	ldr	r3, [pc, #464]	@ (8003ce8 <HAL_RCC_OscConfig+0x474>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a73      	ldr	r2, [pc, #460]	@ (8003ce8 <HAL_RCC_OscConfig+0x474>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b22:	f7fd fe99 	bl	8001858 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7fd fe95 	bl	8001858 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e10c      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce8 <HAL_RCC_OscConfig+0x474>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2ea>
 8003b50:	4b64      	ldr	r3, [pc, #400]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b54:	4a63      	ldr	r2, [pc, #396]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b5c:	e01c      	b.n	8003b98 <HAL_RCC_OscConfig+0x324>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x30c>
 8003b66:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b72:	4b5c      	ldr	r3, [pc, #368]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	4a5b      	ldr	r2, [pc, #364]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0x324>
 8003b80:	4b58      	ldr	r3, [pc, #352]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	4a57      	ldr	r2, [pc, #348]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b8c:	4b55      	ldr	r3, [pc, #340]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b90:	4a54      	ldr	r2, [pc, #336]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fd fe5a 	bl	8001858 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fd fe56 	bl	8001858 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0cb      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbe:	4b49      	ldr	r3, [pc, #292]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0ee      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x334>
 8003bca:	e014      	b.n	8003bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fd fe44 	bl	8001858 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7fd fe40 	bl	8001858 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e0b5      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bea:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ee      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b39      	ldr	r3, [pc, #228]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c00:	4a38      	ldr	r2, [pc, #224]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80a1 	beq.w	8003d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c12:	4b34      	ldr	r3, [pc, #208]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d05c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d141      	bne.n	8003caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b31      	ldr	r3, [pc, #196]	@ (8003cec <HAL_RCC_OscConfig+0x478>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fe14 	bl	8001858 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd fe10 	bl	8001858 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e087      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b27      	ldr	r3, [pc, #156]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	491b      	ldr	r1, [pc, #108]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <HAL_RCC_OscConfig+0x478>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fd fde9 	bl	8001858 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fd fde5 	bl	8001858 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e05c      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x416>
 8003ca8:	e054      	b.n	8003d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <HAL_RCC_OscConfig+0x478>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fdd2 	bl	8001858 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fd fdce 	bl	8001858 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e045      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x444>
 8003cd6:	e03d      	b.n	8003d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e038      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d60 <HAL_RCC_OscConfig+0x4ec>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d028      	beq.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d121      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d11a      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d111      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800

08003d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0cc      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d78:	4b68      	ldr	r3, [pc, #416]	@ (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d90c      	bls.n	8003da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b65      	ldr	r3, [pc, #404]	@ (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b63      	ldr	r3, [pc, #396]	@ (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0b8      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db8:	4b59      	ldr	r3, [pc, #356]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a58      	ldr	r2, [pc, #352]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd0:	4b53      	ldr	r3, [pc, #332]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	4a52      	ldr	r2, [pc, #328]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ddc:	4b50      	ldr	r3, [pc, #320]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	494d      	ldr	r1, [pc, #308]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d044      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	4b47      	ldr	r3, [pc, #284]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d119      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e07f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e22:	4b3f      	ldr	r3, [pc, #252]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e06f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e32:	4b3b      	ldr	r3, [pc, #236]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e067      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e42:	4b37      	ldr	r3, [pc, #220]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f023 0203 	bic.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4934      	ldr	r1, [pc, #208]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e54:	f7fd fd00 	bl	8001858 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7fd fcfc 	bl	8001858 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e04f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	4b2b      	ldr	r3, [pc, #172]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 020c 	and.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d1eb      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e84:	4b25      	ldr	r3, [pc, #148]	@ (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d20c      	bcs.n	8003eac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b22      	ldr	r3, [pc, #136]	@ (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e032      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb8:	4b19      	ldr	r3, [pc, #100]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4916      	ldr	r1, [pc, #88]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed6:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	490e      	ldr	r1, [pc, #56]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eea:	f000 f821 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	490a      	ldr	r1, [pc, #40]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003efc:	5ccb      	ldrb	r3, [r1, r3]
 8003efe:	fa22 f303 	lsr.w	r3, r2, r3
 8003f02:	4a09      	ldr	r2, [pc, #36]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f06:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd fc60 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023c00 	.word	0x40023c00
 8003f20:	40023800 	.word	0x40023800
 8003f24:	08007b1c 	.word	0x08007b1c
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	20000004 	.word	0x20000004

08003f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	b094      	sub	sp, #80	@ 0x50
 8003f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f48:	4b79      	ldr	r3, [pc, #484]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d00d      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x40>
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	f200 80e1 	bhi.w	800411c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x34>
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d003      	beq.n	8003f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f62:	e0db      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f64:	4b73      	ldr	r3, [pc, #460]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f68:	e0db      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f6a:	4b73      	ldr	r3, [pc, #460]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f6e:	e0d8      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f70:	4b6f      	ldr	r3, [pc, #444]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d063      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f86:	4b6a      	ldr	r3, [pc, #424]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	099b      	lsrs	r3, r3, #6
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	0159      	lsls	r1, r3, #5
 8003fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb4:	0150      	lsls	r0, r2, #5
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4621      	mov	r1, r4
 8003fbc:	1a51      	subs	r1, r2, r1
 8003fbe:	6139      	str	r1, [r7, #16]
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	018b      	lsls	r3, r1, #6
 8003fd8:	4651      	mov	r1, sl
 8003fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fde:	4651      	mov	r1, sl
 8003fe0:	018a      	lsls	r2, r1, #6
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8003fe8:	4659      	mov	r1, fp
 8003fea:	eb63 0901 	sbc.w	r9, r3, r1
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004002:	4690      	mov	r8, r2
 8004004:	4699      	mov	r9, r3
 8004006:	4623      	mov	r3, r4
 8004008:	eb18 0303 	adds.w	r3, r8, r3
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	462b      	mov	r3, r5
 8004010:	eb49 0303 	adc.w	r3, r9, r3
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004022:	4629      	mov	r1, r5
 8004024:	024b      	lsls	r3, r1, #9
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800402c:	4621      	mov	r1, r4
 800402e:	024a      	lsls	r2, r1, #9
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004036:	2200      	movs	r2, #0
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800403c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004040:	f7fc fada 	bl	80005f8 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4613      	mov	r3, r2
 800404a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800404c:	e058      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404e:	4b38      	ldr	r3, [pc, #224]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	2200      	movs	r2, #0
 8004056:	4618      	mov	r0, r3
 8004058:	4611      	mov	r1, r2
 800405a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
 8004064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	f04f 0000 	mov.w	r0, #0
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	0159      	lsls	r1, r3, #5
 8004076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407a:	0150      	lsls	r0, r2, #5
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4641      	mov	r1, r8
 8004082:	ebb2 0a01 	subs.w	sl, r2, r1
 8004086:	4649      	mov	r1, r9
 8004088:	eb63 0b01 	sbc.w	fp, r3, r1
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800409c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040a0:	ebb2 040a 	subs.w	r4, r2, sl
 80040a4:	eb63 050b 	sbc.w	r5, r3, fp
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	00eb      	lsls	r3, r5, #3
 80040b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b6:	00e2      	lsls	r2, r4, #3
 80040b8:	4614      	mov	r4, r2
 80040ba:	461d      	mov	r5, r3
 80040bc:	4643      	mov	r3, r8
 80040be:	18e3      	adds	r3, r4, r3
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	464b      	mov	r3, r9
 80040c4:	eb45 0303 	adc.w	r3, r5, r3
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d6:	4629      	mov	r1, r5
 80040d8:	028b      	lsls	r3, r1, #10
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e0:	4621      	mov	r1, r4
 80040e2:	028a      	lsls	r2, r1, #10
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ea:	2200      	movs	r2, #0
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	61fa      	str	r2, [r7, #28]
 80040f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f4:	f7fc fa80 	bl	80005f8 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800411a:	e002      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x204>)
 800411e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004124:	4618      	mov	r0, r3
 8004126:	3750      	adds	r7, #80	@ 0x50
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	00f42400 	.word	0x00f42400
 8004138:	007a1200 	.word	0x007a1200

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b03      	ldr	r3, [pc, #12]	@ (8004150 <HAL_RCC_GetHCLKFreq+0x14>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000000 	.word	0x20000000

08004154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004158:	f7ff fff0 	bl	800413c <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	0a9b      	lsrs	r3, r3, #10
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	@ (8004178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	08007b2c 	.word	0x08007b2c

0800417c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004180:	f7ff ffdc 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	@ (800419c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0b5b      	lsrs	r3, r3, #13
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	@ (80041a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	08007b2c 	.word	0x08007b2c

080041a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d035      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041cc:	4b62      	ldr	r3, [pc, #392]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041d2:	f7fd fb41 	bl	8001858 <HAL_GetTick>
 80041d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041da:	f7fd fb3d 	bl	8001858 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e0b0      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041ec:	4b5b      	ldr	r3, [pc, #364]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	019a      	lsls	r2, r3, #6
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	071b      	lsls	r3, r3, #28
 8004204:	4955      	ldr	r1, [pc, #340]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800420c:	4b52      	ldr	r3, [pc, #328]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004212:	f7fd fb21 	bl	8001858 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800421a:	f7fd fb1d 	bl	8001858 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e090      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800422c:	4b4b      	ldr	r3, [pc, #300]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8083 	beq.w	800434c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b44      	ldr	r3, [pc, #272]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	4a43      	ldr	r2, [pc, #268]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	@ 0x40
 8004256:	4b41      	ldr	r3, [pc, #260]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004262:	4b3f      	ldr	r3, [pc, #252]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3e      	ldr	r2, [pc, #248]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800426c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800426e:	f7fd faf3 	bl	8001858 <HAL_GetTick>
 8004272:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fd faef 	bl	8001858 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e062      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004288:	4b35      	ldr	r3, [pc, #212]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004294:	4b31      	ldr	r3, [pc, #196]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004298:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800429c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02f      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d028      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b2:	4b2a      	ldr	r3, [pc, #168]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042bc:	4b29      	ldr	r3, [pc, #164]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c2:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042c8:	4a24      	ldr	r2, [pc, #144]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042ce:	4b23      	ldr	r3, [pc, #140]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d114      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042da:	f7fd fabd 	bl	8001858 <HAL_GetTick>
 80042de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fd fab9 	bl	8001858 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e02a      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b18      	ldr	r3, [pc, #96]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800430c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004310:	d10d      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004312:	4b12      	ldr	r3, [pc, #72]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004326:	490d      	ldr	r1, [pc, #52]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
 800432c:	e005      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800432e:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004338:	6093      	str	r3, [r2, #8]
 800433a:	4b08      	ldr	r3, [pc, #32]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004346:	4905      	ldr	r1, [pc, #20]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	42470068 	.word	0x42470068
 800435c:	40023800 	.word	0x40023800
 8004360:	40007000 	.word	0x40007000
 8004364:	42470e40 	.word	0x42470e40

08004368 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d13f      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004386:	4b24      	ldr	r3, [pc, #144]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800439c:	d12f      	bne.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800439e:	4b1f      	ldr	r3, [pc, #124]	@ (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043a0:	617b      	str	r3, [r7, #20]
          break;
 80043a2:	e02f      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043b0:	d108      	bne.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043b2:	4b19      	ldr	r3, [pc, #100]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ba:	4a19      	ldr	r2, [pc, #100]	@ (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	e007      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043c4:	4b14      	ldr	r3, [pc, #80]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043cc:	4a15      	ldr	r2, [pc, #84]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80043ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043d4:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ee:	0f1b      	lsrs	r3, r3, #28
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	617b      	str	r3, [r7, #20]
          break;
 80043fc:	e002      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
          break;
 8004402:	bf00      	nop
        }
      }
      break;
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004406:	bf00      	nop
    }
  }
  return frequency;
 8004408:	697b      	ldr	r3, [r7, #20]
}
 800440a:	4618      	mov	r0, r3
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	00bb8000 	.word	0x00bb8000
 8004420:	007a1200 	.word	0x007a1200
 8004424:	00f42400 	.word	0x00f42400

08004428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07b      	b.n	8004532 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d108      	bne.n	8004454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800444a:	d009      	beq.n	8004460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	61da      	str	r2, [r3, #28]
 8004452:	e005      	b.n	8004460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc ffaa 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004496:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e4:	ea42 0103 	orr.w	r1, r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	f003 0104 	and.w	r1, r3, #4
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	f003 0210 	and.w	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e042      	b.n	80045d2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d106      	bne.n	8004566 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fc ff7f 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2224      	movs	r2, #36	@ 0x24
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800457c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fea6 	bl	80052d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004592:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b08a      	sub	sp, #40	@ 0x28
 80045de:	af02      	add	r7, sp, #8
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d175      	bne.n	80046e6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_UART_Transmit+0x2c>
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06e      	b.n	80046e8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2221      	movs	r2, #33	@ 0x21
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004618:	f7fd f91e 	bl	8001858 <HAL_GetTick>
 800461c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	d108      	bne.n	8004646 <HAL_UART_Transmit+0x6c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	e003      	b.n	800464e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800464e:	e02e      	b.n	80046ae <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2200      	movs	r2, #0
 8004658:	2180      	movs	r1, #128	@ 0x80
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fc19 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e03a      	b.n	80046e8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004686:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	3302      	adds	r3, #2
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	e007      	b.n	80046a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3301      	adds	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1cb      	bne.n	8004650 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	2140      	movs	r1, #64	@ 0x40
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fbe5 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e006      	b.n	80046e8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08c      	sub	sp, #48	@ 0x30
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b20      	cmp	r3, #32
 8004708:	d156      	bne.n	80047b8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_UART_Transmit_DMA+0x26>
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e04f      	b.n	80047ba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	88fa      	ldrh	r2, [r7, #6]
 8004724:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	88fa      	ldrh	r2, [r7, #6]
 800472a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2221      	movs	r2, #33	@ 0x21
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	4a21      	ldr	r2, [pc, #132]	@ (80047c4 <HAL_UART_Transmit_DMA+0xd4>)
 8004740:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	4a20      	ldr	r2, [pc, #128]	@ (80047c8 <HAL_UART_Transmit_DMA+0xd8>)
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	4a1f      	ldr	r2, [pc, #124]	@ (80047cc <HAL_UART_Transmit_DMA+0xdc>)
 8004750:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004756:	2200      	movs	r2, #0
 8004758:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3304      	adds	r3, #4
 800476e:	461a      	mov	r2, r3
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	f7fd fa61 	bl	8001c38 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800477e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3314      	adds	r3, #20
 8004786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	617b      	str	r3, [r7, #20]
   return(result);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3314      	adds	r3, #20
 800479e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80047a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6a39      	ldr	r1, [r7, #32]
 80047a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e000      	b.n	80047ba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
  }
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3730      	adds	r7, #48	@ 0x30
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	08004d49 	.word	0x08004d49
 80047c8:	08004de3 	.word	0x08004de3
 80047cc:	08004dff 	.word	0x08004dff

080047d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b0ba      	sub	sp, #232	@ 0xe8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800480e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10f      	bne.n	8004836 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_UART_IRQHandler+0x66>
 8004822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fc8f 	bl	8005152 <UART_Receive_IT>
      return;
 8004834:	e25b      	b.n	8004cee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80de 	beq.w	80049fc <HAL_UART_IRQHandler+0x22c>
 8004840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800484c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004850:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80d1 	beq.w	80049fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <HAL_UART_IRQHandler+0xae>
 8004866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f043 0201 	orr.w	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800487e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_UART_IRQHandler+0xd2>
 800488a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	f043 0202 	orr.w	r2, r3, #2
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_UART_IRQHandler+0xf6>
 80048ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	f043 0204 	orr.w	r2, r3, #4
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d011      	beq.n	80048f6 <HAL_UART_IRQHandler+0x126>
 80048d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d105      	bne.n	80048ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0208 	orr.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 81f2 	beq.w	8004ce4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_UART_IRQHandler+0x14e>
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fc1a 	bl	8005152 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <HAL_UART_IRQHandler+0x17a>
 8004942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d04f      	beq.n	80049ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fb22 	bl	8004f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495a:	2b40      	cmp	r3, #64	@ 0x40
 800495c:	d141      	bne.n	80049e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800498a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800498e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1d9      	bne.n	800495e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d013      	beq.n	80049da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b6:	4a7e      	ldr	r2, [pc, #504]	@ (8004bb0 <HAL_UART_IRQHandler+0x3e0>)
 80049b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fd fa02 	bl	8001dc8 <HAL_DMA_Abort_IT>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d016      	beq.n	80049f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d8:	e00e      	b.n	80049f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f99e 	bl	8004d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	e00a      	b.n	80049f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f99a 	bl	8004d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e8:	e006      	b.n	80049f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f996 	bl	8004d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80049f6:	e175      	b.n	8004ce4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	bf00      	nop
    return;
 80049fa:	e173      	b.n	8004ce4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	f040 814f 	bne.w	8004ca4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8148 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8141 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b40      	cmp	r3, #64	@ 0x40
 8004a44:	f040 80b6 	bne.w	8004bb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8145 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a66:	429a      	cmp	r2, r3
 8004a68:	f080 813e 	bcs.w	8004ce8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	f000 8088 	beq.w	8004b92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004aae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004aba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1d9      	bne.n	8004a82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3314      	adds	r3, #20
 8004aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004af2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e1      	bne.n	8004ace <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3314      	adds	r3, #20
 8004b2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e3      	bne.n	8004b0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b62:	f023 0310 	bic.w	r3, r3, #16
 8004b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e3      	bne.n	8004b50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fd f8ab 	bl	8001ce8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8c1 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bae:	e09b      	b.n	8004ce8 <HAL_UART_IRQHandler+0x518>
 8004bb0:	0800505b 	.word	0x0800505b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 808e 	beq.w	8004cec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8089 	beq.w	8004cec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004bfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e3      	bne.n	8004bda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	623b      	str	r3, [r7, #32]
   return(result);
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3314      	adds	r3, #20
 8004c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e3      	bne.n	8004c12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0310 	bic.w	r3, r3, #16
 8004c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c7c:	61fa      	str	r2, [r7, #28]
 8004c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	617b      	str	r3, [r7, #20]
   return(result);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e3      	bne.n	8004c58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f847 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ca2:	e023      	b.n	8004cec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x4f4>
 8004cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f9e0 	bl	8005082 <UART_Transmit_IT>
    return;
 8004cc2:	e014      	b.n	8004cee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <HAL_UART_IRQHandler+0x51e>
 8004cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa20 	bl	8005122 <UART_EndTransmit_IT>
    return;
 8004ce2:	e004      	b.n	8004cee <HAL_UART_IRQHandler+0x51e>
    return;
 8004ce4:	bf00      	nop
 8004ce6:	e002      	b.n	8004cee <HAL_UART_IRQHandler+0x51e>
      return;
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <HAL_UART_IRQHandler+0x51e>
      return;
 8004cec:	bf00      	nop
  }
}
 8004cee:	37e8      	adds	r7, #232	@ 0xe8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b090      	sub	sp, #64	@ 0x40
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d137      	bne.n	8004dd4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d66:	2200      	movs	r2, #0
 8004d68:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	623b      	str	r3, [r7, #32]
   return(result);
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dbe:	61fa      	str	r2, [r7, #28]
 8004dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	69b9      	ldr	r1, [r7, #24]
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	617b      	str	r3, [r7, #20]
   return(result);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e5      	bne.n	8004d9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dd2:	e002      	b.n	8004dda <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004dd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004dd6:	f7fc f9c5 	bl	8001164 <HAL_UART_TxCpltCallback>
}
 8004dda:	bf00      	nop
 8004ddc:	3740      	adds	r7, #64	@ 0x40
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff ff7f 	bl	8004cf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1a:	2b80      	cmp	r3, #128	@ 0x80
 8004e1c:	bf0c      	ite	eq
 8004e1e:	2301      	moveq	r3, #1
 8004e20:	2300      	movne	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b21      	cmp	r3, #33	@ 0x21
 8004e30:	d108      	bne.n	8004e44 <UART_DMAError+0x46>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004e3e:	68b8      	ldr	r0, [r7, #8]
 8004e40:	f000 f880 	bl	8004f44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4e:	2b40      	cmp	r3, #64	@ 0x40
 8004e50:	bf0c      	ite	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	2300      	movne	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b22      	cmp	r3, #34	@ 0x22
 8004e64:	d108      	bne.n	8004e78 <UART_DMAError+0x7a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004e72:	68b8      	ldr	r0, [r7, #8]
 8004e74:	f000 f88e 	bl	8004f94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7c:	f043 0210 	orr.w	r2, r3, #16
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e84:	68b8      	ldr	r0, [r7, #8]
 8004e86:	f7ff ff49 	bl	8004d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	e03b      	b.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d037      	beq.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eac:	f7fc fcd4 	bl	8001858 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e03a      	b.n	8004f3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d023      	beq.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b80      	cmp	r3, #128	@ 0x80
 8004ed8:	d020      	beq.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b40      	cmp	r3, #64	@ 0x40
 8004ede:	d01d      	beq.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d116      	bne.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f845 	bl	8004f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e00f      	b.n	8004f3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4013      	ands	r3, r2
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d0b4      	beq.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b089      	sub	sp, #36	@ 0x24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	61ba      	str	r2, [r7, #24]
 8004f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e5      	bne.n	8004f4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004f88:	bf00      	nop
 8004f8a:	3724      	adds	r7, #36	@ 0x24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b095      	sub	sp, #84	@ 0x54
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3314      	adds	r3, #20
 8004fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e5      	bne.n	8004fd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	2b01      	cmp	r3, #1
 800500a:	d119      	bne.n	8005040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	60bb      	str	r3, [r7, #8]
   return(result);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0310 	bic.w	r3, r3, #16
 8005022:	647b      	str	r3, [r7, #68]	@ 0x44
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800502c:	61ba      	str	r2, [r7, #24]
 800502e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6979      	ldr	r1, [r7, #20]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	613b      	str	r3, [r7, #16]
   return(result);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e5      	bne.n	800500c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800504e:	bf00      	nop
 8005050:	3754      	adds	r7, #84	@ 0x54
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff fe51 	bl	8004d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b21      	cmp	r3, #33	@ 0x21
 8005094:	d13e      	bne.n	8005114 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509e:	d114      	bne.n	80050ca <UART_Transmit_IT+0x48>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d110      	bne.n	80050ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	1c9a      	adds	r2, r3, #2
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	621a      	str	r2, [r3, #32]
 80050c8:	e008      	b.n	80050dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6211      	str	r1, [r2, #32]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4619      	mov	r1, r3
 80050ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10f      	bne.n	8005110 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800510e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	e000      	b.n	8005116 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005114:	2302      	movs	r3, #2
  }
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005138:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc f80e 	bl	8001164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b08c      	sub	sp, #48	@ 0x30
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b22      	cmp	r3, #34	@ 0x22
 8005164:	f040 80ae 	bne.w	80052c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005170:	d117      	bne.n	80051a2 <UART_Receive_IT+0x50>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005190:	b29a      	uxth	r2, r3
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	1c9a      	adds	r2, r3, #2
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	629a      	str	r2, [r3, #40]	@ 0x28
 80051a0:	e026      	b.n	80051f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b4:	d007      	beq.n	80051c6 <UART_Receive_IT+0x74>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <UART_Receive_IT+0x82>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	e008      	b.n	80051e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4619      	mov	r1, r3
 80051fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005200:	2b00      	cmp	r3, #0
 8005202:	d15d      	bne.n	80052c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0220 	bic.w	r2, r2, #32
 8005212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	2b01      	cmp	r3, #1
 8005248:	d135      	bne.n	80052b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	613b      	str	r3, [r7, #16]
   return(result);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005270:	623a      	str	r2, [r7, #32]
 8005272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	69f9      	ldr	r1, [r7, #28]
 8005276:	6a3a      	ldr	r2, [r7, #32]
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	61bb      	str	r3, [r7, #24]
   return(result);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b10      	cmp	r3, #16
 8005290:	d10a      	bne.n	80052a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fd3e 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
 80052b4:	e002      	b.n	80052bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fd26 	bl	8004d08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e002      	b.n	80052c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3730      	adds	r7, #48	@ 0x30
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d4:	b0c0      	sub	sp, #256	@ 0x100
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	68d9      	ldr	r1, [r3, #12]
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	ea40 0301 	orr.w	r3, r0, r1
 80052f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	431a      	orrs	r2, r3
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	431a      	orrs	r2, r3
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005328:	f021 010c 	bic.w	r1, r1, #12
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005336:	430b      	orrs	r3, r1
 8005338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	6999      	ldr	r1, [r3, #24]
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	ea40 0301 	orr.w	r3, r0, r1
 8005356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b8f      	ldr	r3, [pc, #572]	@ (800559c <UART_SetConfig+0x2cc>)
 8005360:	429a      	cmp	r2, r3
 8005362:	d005      	beq.n	8005370 <UART_SetConfig+0xa0>
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b8d      	ldr	r3, [pc, #564]	@ (80055a0 <UART_SetConfig+0x2d0>)
 800536c:	429a      	cmp	r2, r3
 800536e:	d104      	bne.n	800537a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7fe ff04 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 8005374:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005378:	e003      	b.n	8005382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800537a:	f7fe feeb 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 800537e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800538c:	f040 810c 	bne.w	80055a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005394:	2200      	movs	r2, #0
 8005396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800539a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800539e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053a2:	4622      	mov	r2, r4
 80053a4:	462b      	mov	r3, r5
 80053a6:	1891      	adds	r1, r2, r2
 80053a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053aa:	415b      	adcs	r3, r3
 80053ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053b2:	4621      	mov	r1, r4
 80053b4:	eb12 0801 	adds.w	r8, r2, r1
 80053b8:	4629      	mov	r1, r5
 80053ba:	eb43 0901 	adc.w	r9, r3, r1
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d2:	4690      	mov	r8, r2
 80053d4:	4699      	mov	r9, r3
 80053d6:	4623      	mov	r3, r4
 80053d8:	eb18 0303 	adds.w	r3, r8, r3
 80053dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053e0:	462b      	mov	r3, r5
 80053e2:	eb49 0303 	adc.w	r3, r9, r3
 80053e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053fe:	460b      	mov	r3, r1
 8005400:	18db      	adds	r3, r3, r3
 8005402:	653b      	str	r3, [r7, #80]	@ 0x50
 8005404:	4613      	mov	r3, r2
 8005406:	eb42 0303 	adc.w	r3, r2, r3
 800540a:	657b      	str	r3, [r7, #84]	@ 0x54
 800540c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005414:	f7fb f8f0 	bl	80005f8 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4b61      	ldr	r3, [pc, #388]	@ (80055a4 <UART_SetConfig+0x2d4>)
 800541e:	fba3 2302 	umull	r2, r3, r3, r2
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	011c      	lsls	r4, r3, #4
 8005426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800542a:	2200      	movs	r2, #0
 800542c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005430:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	1891      	adds	r1, r2, r2
 800543e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005440:	415b      	adcs	r3, r3
 8005442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005448:	4641      	mov	r1, r8
 800544a:	eb12 0a01 	adds.w	sl, r2, r1
 800544e:	4649      	mov	r1, r9
 8005450:	eb43 0b01 	adc.w	fp, r3, r1
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005468:	4692      	mov	sl, r2
 800546a:	469b      	mov	fp, r3
 800546c:	4643      	mov	r3, r8
 800546e:	eb1a 0303 	adds.w	r3, sl, r3
 8005472:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005476:	464b      	mov	r3, r9
 8005478:	eb4b 0303 	adc.w	r3, fp, r3
 800547c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800548c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005494:	460b      	mov	r3, r1
 8005496:	18db      	adds	r3, r3, r3
 8005498:	643b      	str	r3, [r7, #64]	@ 0x40
 800549a:	4613      	mov	r3, r2
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054aa:	f7fb f8a5 	bl	80005f8 <__aeabi_uldivmod>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	4b3b      	ldr	r3, [pc, #236]	@ (80055a4 <UART_SetConfig+0x2d4>)
 80054b6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	2264      	movs	r2, #100	@ 0x64
 80054be:	fb02 f303 	mul.w	r3, r2, r3
 80054c2:	1acb      	subs	r3, r1, r3
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054ca:	4b36      	ldr	r3, [pc, #216]	@ (80055a4 <UART_SetConfig+0x2d4>)
 80054cc:	fba3 2302 	umull	r2, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054d8:	441c      	add	r4, r3
 80054da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	1891      	adds	r1, r2, r2
 80054f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054f4:	415b      	adcs	r3, r3
 80054f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054fc:	4641      	mov	r1, r8
 80054fe:	1851      	adds	r1, r2, r1
 8005500:	6339      	str	r1, [r7, #48]	@ 0x30
 8005502:	4649      	mov	r1, r9
 8005504:	414b      	adcs	r3, r1
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005514:	4659      	mov	r1, fp
 8005516:	00cb      	lsls	r3, r1, #3
 8005518:	4651      	mov	r1, sl
 800551a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800551e:	4651      	mov	r1, sl
 8005520:	00ca      	lsls	r2, r1, #3
 8005522:	4610      	mov	r0, r2
 8005524:	4619      	mov	r1, r3
 8005526:	4603      	mov	r3, r0
 8005528:	4642      	mov	r2, r8
 800552a:	189b      	adds	r3, r3, r2
 800552c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005530:	464b      	mov	r3, r9
 8005532:	460a      	mov	r2, r1
 8005534:	eb42 0303 	adc.w	r3, r2, r3
 8005538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005548:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800554c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005550:	460b      	mov	r3, r1
 8005552:	18db      	adds	r3, r3, r3
 8005554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005556:	4613      	mov	r3, r2
 8005558:	eb42 0303 	adc.w	r3, r2, r3
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800555e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005566:	f7fb f847 	bl	80005f8 <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4b0d      	ldr	r3, [pc, #52]	@ (80055a4 <UART_SetConfig+0x2d4>)
 8005570:	fba3 1302 	umull	r1, r3, r3, r2
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	2164      	movs	r1, #100	@ 0x64
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	3332      	adds	r3, #50	@ 0x32
 8005582:	4a08      	ldr	r2, [pc, #32]	@ (80055a4 <UART_SetConfig+0x2d4>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	f003 0207 	and.w	r2, r3, #7
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4422      	add	r2, r4
 8005596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005598:	e106      	b.n	80057a8 <UART_SetConfig+0x4d8>
 800559a:	bf00      	nop
 800559c:	40011000 	.word	0x40011000
 80055a0:	40011400 	.word	0x40011400
 80055a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055ba:	4642      	mov	r2, r8
 80055bc:	464b      	mov	r3, r9
 80055be:	1891      	adds	r1, r2, r2
 80055c0:	6239      	str	r1, [r7, #32]
 80055c2:	415b      	adcs	r3, r3
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ca:	4641      	mov	r1, r8
 80055cc:	1854      	adds	r4, r2, r1
 80055ce:	4649      	mov	r1, r9
 80055d0:	eb43 0501 	adc.w	r5, r3, r1
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	00eb      	lsls	r3, r5, #3
 80055de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055e2:	00e2      	lsls	r2, r4, #3
 80055e4:	4614      	mov	r4, r2
 80055e6:	461d      	mov	r5, r3
 80055e8:	4643      	mov	r3, r8
 80055ea:	18e3      	adds	r3, r4, r3
 80055ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055f0:	464b      	mov	r3, r9
 80055f2:	eb45 0303 	adc.w	r3, r5, r3
 80055f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005606:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005616:	4629      	mov	r1, r5
 8005618:	008b      	lsls	r3, r1, #2
 800561a:	4621      	mov	r1, r4
 800561c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005620:	4621      	mov	r1, r4
 8005622:	008a      	lsls	r2, r1, #2
 8005624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005628:	f7fa ffe6 	bl	80005f8 <__aeabi_uldivmod>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4b60      	ldr	r3, [pc, #384]	@ (80057b4 <UART_SetConfig+0x4e4>)
 8005632:	fba3 2302 	umull	r2, r3, r3, r2
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	011c      	lsls	r4, r3, #4
 800563a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005644:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	1891      	adds	r1, r2, r2
 8005652:	61b9      	str	r1, [r7, #24]
 8005654:	415b      	adcs	r3, r3
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800565c:	4641      	mov	r1, r8
 800565e:	1851      	adds	r1, r2, r1
 8005660:	6139      	str	r1, [r7, #16]
 8005662:	4649      	mov	r1, r9
 8005664:	414b      	adcs	r3, r1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005674:	4659      	mov	r1, fp
 8005676:	00cb      	lsls	r3, r1, #3
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567e:	4651      	mov	r1, sl
 8005680:	00ca      	lsls	r2, r1, #3
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	4603      	mov	r3, r0
 8005688:	4642      	mov	r2, r8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005690:	464b      	mov	r3, r9
 8005692:	460a      	mov	r2, r1
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056b4:	4649      	mov	r1, r9
 80056b6:	008b      	lsls	r3, r1, #2
 80056b8:	4641      	mov	r1, r8
 80056ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056be:	4641      	mov	r1, r8
 80056c0:	008a      	lsls	r2, r1, #2
 80056c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056c6:	f7fa ff97 	bl	80005f8 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	4b38      	ldr	r3, [pc, #224]	@ (80057b4 <UART_SetConfig+0x4e4>)
 80056d2:	fba3 2301 	umull	r2, r3, r3, r1
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2264      	movs	r2, #100	@ 0x64
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	1acb      	subs	r3, r1, r3
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	3332      	adds	r3, #50	@ 0x32
 80056e4:	4a33      	ldr	r2, [pc, #204]	@ (80057b4 <UART_SetConfig+0x4e4>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056f0:	441c      	add	r4, r3
 80056f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056f6:	2200      	movs	r2, #0
 80056f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80056fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80056fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005700:	4642      	mov	r2, r8
 8005702:	464b      	mov	r3, r9
 8005704:	1891      	adds	r1, r2, r2
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	415b      	adcs	r3, r3
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005710:	4641      	mov	r1, r8
 8005712:	1851      	adds	r1, r2, r1
 8005714:	6039      	str	r1, [r7, #0]
 8005716:	4649      	mov	r1, r9
 8005718:	414b      	adcs	r3, r1
 800571a:	607b      	str	r3, [r7, #4]
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005728:	4659      	mov	r1, fp
 800572a:	00cb      	lsls	r3, r1, #3
 800572c:	4651      	mov	r1, sl
 800572e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005732:	4651      	mov	r1, sl
 8005734:	00ca      	lsls	r2, r1, #3
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	4603      	mov	r3, r0
 800573c:	4642      	mov	r2, r8
 800573e:	189b      	adds	r3, r3, r2
 8005740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005742:	464b      	mov	r3, r9
 8005744:	460a      	mov	r2, r1
 8005746:	eb42 0303 	adc.w	r3, r2, r3
 800574a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	663b      	str	r3, [r7, #96]	@ 0x60
 8005756:	667a      	str	r2, [r7, #100]	@ 0x64
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005764:	4649      	mov	r1, r9
 8005766:	008b      	lsls	r3, r1, #2
 8005768:	4641      	mov	r1, r8
 800576a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800576e:	4641      	mov	r1, r8
 8005770:	008a      	lsls	r2, r1, #2
 8005772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005776:	f7fa ff3f 	bl	80005f8 <__aeabi_uldivmod>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <UART_SetConfig+0x4e4>)
 8005780:	fba3 1302 	umull	r1, r3, r3, r2
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	2164      	movs	r1, #100	@ 0x64
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	3332      	adds	r3, #50	@ 0x32
 8005792:	4a08      	ldr	r2, [pc, #32]	@ (80057b4 <UART_SetConfig+0x4e4>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	f003 020f 	and.w	r2, r3, #15
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4422      	add	r2, r4
 80057a6:	609a      	str	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057ae:	46bd      	mov	sp, r7
 80057b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b4:	51eb851f 	.word	0x51eb851f

080057b8 <arm_rfft_32_fast_init_f32>:
 80057b8:	b150      	cbz	r0, 80057d0 <arm_rfft_32_fast_init_f32+0x18>
 80057ba:	b510      	push	{r4, lr}
 80057bc:	2110      	movs	r1, #16
 80057be:	4604      	mov	r4, r0
 80057c0:	f000 fe7c 	bl	80064bc <arm_cfft_init_f32>
 80057c4:	b918      	cbnz	r0, 80057ce <arm_rfft_32_fast_init_f32+0x16>
 80057c6:	4b04      	ldr	r3, [pc, #16]	@ (80057d8 <arm_rfft_32_fast_init_f32+0x20>)
 80057c8:	6163      	str	r3, [r4, #20]
 80057ca:	2220      	movs	r2, #32
 80057cc:	8222      	strh	r2, [r4, #16]
 80057ce:	bd10      	pop	{r4, pc}
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	08020594 	.word	0x08020594

080057dc <arm_rfft_64_fast_init_f32>:
 80057dc:	b150      	cbz	r0, 80057f4 <arm_rfft_64_fast_init_f32+0x18>
 80057de:	b510      	push	{r4, lr}
 80057e0:	2120      	movs	r1, #32
 80057e2:	4604      	mov	r4, r0
 80057e4:	f000 fe6a 	bl	80064bc <arm_cfft_init_f32>
 80057e8:	b918      	cbnz	r0, 80057f2 <arm_rfft_64_fast_init_f32+0x16>
 80057ea:	4b04      	ldr	r3, [pc, #16]	@ (80057fc <arm_rfft_64_fast_init_f32+0x20>)
 80057ec:	6163      	str	r3, [r4, #20]
 80057ee:	2240      	movs	r2, #64	@ 0x40
 80057f0:	8222      	strh	r2, [r4, #16]
 80057f2:	bd10      	pop	{r4, pc}
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	08024e14 	.word	0x08024e14

08005800 <arm_rfft_128_fast_init_f32>:
 8005800:	b150      	cbz	r0, 8005818 <arm_rfft_128_fast_init_f32+0x18>
 8005802:	b510      	push	{r4, lr}
 8005804:	2140      	movs	r1, #64	@ 0x40
 8005806:	4604      	mov	r4, r0
 8005808:	f000 fe58 	bl	80064bc <arm_cfft_init_f32>
 800580c:	b918      	cbnz	r0, 8005816 <arm_rfft_128_fast_init_f32+0x16>
 800580e:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <arm_rfft_128_fast_init_f32+0x20>)
 8005810:	6163      	str	r3, [r4, #20]
 8005812:	2280      	movs	r2, #128	@ 0x80
 8005814:	8222      	strh	r2, [r4, #16]
 8005816:	bd10      	pop	{r4, pc}
 8005818:	f04f 30ff 	mov.w	r0, #4294967295
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	0801df94 	.word	0x0801df94

08005824 <arm_rfft_256_fast_init_f32>:
 8005824:	b158      	cbz	r0, 800583e <arm_rfft_256_fast_init_f32+0x1a>
 8005826:	b510      	push	{r4, lr}
 8005828:	2180      	movs	r1, #128	@ 0x80
 800582a:	4604      	mov	r4, r0
 800582c:	f000 fe46 	bl	80064bc <arm_cfft_init_f32>
 8005830:	b920      	cbnz	r0, 800583c <arm_rfft_256_fast_init_f32+0x18>
 8005832:	4b04      	ldr	r3, [pc, #16]	@ (8005844 <arm_rfft_256_fast_init_f32+0x20>)
 8005834:	6163      	str	r3, [r4, #20]
 8005836:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800583a:	8222      	strh	r2, [r4, #16]
 800583c:	bd10      	pop	{r4, pc}
 800583e:	f04f 30ff 	mov.w	r0, #4294967295
 8005842:	4770      	bx	lr
 8005844:	08020194 	.word	0x08020194

08005848 <arm_rfft_512_fast_init_f32>:
 8005848:	b160      	cbz	r0, 8005864 <arm_rfft_512_fast_init_f32+0x1c>
 800584a:	b510      	push	{r4, lr}
 800584c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005850:	4604      	mov	r4, r0
 8005852:	f000 fe33 	bl	80064bc <arm_cfft_init_f32>
 8005856:	b920      	cbnz	r0, 8005862 <arm_rfft_512_fast_init_f32+0x1a>
 8005858:	4b04      	ldr	r3, [pc, #16]	@ (800586c <arm_rfft_512_fast_init_f32+0x24>)
 800585a:	6163      	str	r3, [r4, #20]
 800585c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005860:	8222      	strh	r2, [r4, #16]
 8005862:	bd10      	pop	{r4, pc}
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	08024614 	.word	0x08024614

08005870 <arm_rfft_1024_fast_init_f32>:
 8005870:	b160      	cbz	r0, 800588c <arm_rfft_1024_fast_init_f32+0x1c>
 8005872:	b510      	push	{r4, lr}
 8005874:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005878:	4604      	mov	r4, r0
 800587a:	f000 fe1f 	bl	80064bc <arm_cfft_init_f32>
 800587e:	b920      	cbnz	r0, 800588a <arm_rfft_1024_fast_init_f32+0x1a>
 8005880:	4b04      	ldr	r3, [pc, #16]	@ (8005894 <arm_rfft_1024_fast_init_f32+0x24>)
 8005882:	6163      	str	r3, [r4, #20]
 8005884:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005888:	8222      	strh	r2, [r4, #16]
 800588a:	bd10      	pop	{r4, pc}
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	0801cf94 	.word	0x0801cf94

08005898 <arm_rfft_2048_fast_init_f32>:
 8005898:	b160      	cbz	r0, 80058b4 <arm_rfft_2048_fast_init_f32+0x1c>
 800589a:	b510      	push	{r4, lr}
 800589c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058a0:	4604      	mov	r4, r0
 80058a2:	f000 fe0b 	bl	80064bc <arm_cfft_init_f32>
 80058a6:	b920      	cbnz	r0, 80058b2 <arm_rfft_2048_fast_init_f32+0x1a>
 80058a8:	4b04      	ldr	r3, [pc, #16]	@ (80058bc <arm_rfft_2048_fast_init_f32+0x24>)
 80058aa:	6163      	str	r3, [r4, #20]
 80058ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058b0:	8222      	strh	r2, [r4, #16]
 80058b2:	bd10      	pop	{r4, pc}
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	0801e194 	.word	0x0801e194

080058c0 <arm_rfft_4096_fast_init_f32>:
 80058c0:	b160      	cbz	r0, 80058dc <arm_rfft_4096_fast_init_f32+0x1c>
 80058c2:	b510      	push	{r4, lr}
 80058c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058c8:	4604      	mov	r4, r0
 80058ca:	f000 fdf7 	bl	80064bc <arm_cfft_init_f32>
 80058ce:	b920      	cbnz	r0, 80058da <arm_rfft_4096_fast_init_f32+0x1a>
 80058d0:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <arm_rfft_4096_fast_init_f32+0x24>)
 80058d2:	6163      	str	r3, [r4, #20]
 80058d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80058d8:	8222      	strh	r2, [r4, #16]
 80058da:	bd10      	pop	{r4, pc}
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	08020614 	.word	0x08020614

080058e8 <arm_rfft_fast_init_f32>:
 80058e8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80058ec:	d024      	beq.n	8005938 <arm_rfft_fast_init_f32+0x50>
 80058ee:	d807      	bhi.n	8005900 <arm_rfft_fast_init_f32+0x18>
 80058f0:	2980      	cmp	r1, #128	@ 0x80
 80058f2:	d01c      	beq.n	800592e <arm_rfft_fast_init_f32+0x46>
 80058f4:	d90c      	bls.n	8005910 <arm_rfft_fast_init_f32+0x28>
 80058f6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80058fa:	d11a      	bne.n	8005932 <arm_rfft_fast_init_f32+0x4a>
 80058fc:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <arm_rfft_fast_init_f32+0x54>)
 80058fe:	4718      	bx	r3
 8005900:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005904:	d011      	beq.n	800592a <arm_rfft_fast_init_f32+0x42>
 8005906:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800590a:	d107      	bne.n	800591c <arm_rfft_fast_init_f32+0x34>
 800590c:	4b0c      	ldr	r3, [pc, #48]	@ (8005940 <arm_rfft_fast_init_f32+0x58>)
 800590e:	4718      	bx	r3
 8005910:	2920      	cmp	r1, #32
 8005912:	d008      	beq.n	8005926 <arm_rfft_fast_init_f32+0x3e>
 8005914:	2940      	cmp	r1, #64	@ 0x40
 8005916:	d10c      	bne.n	8005932 <arm_rfft_fast_init_f32+0x4a>
 8005918:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <arm_rfft_fast_init_f32+0x5c>)
 800591a:	e7f0      	b.n	80058fe <arm_rfft_fast_init_f32+0x16>
 800591c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005920:	d107      	bne.n	8005932 <arm_rfft_fast_init_f32+0x4a>
 8005922:	4b09      	ldr	r3, [pc, #36]	@ (8005948 <arm_rfft_fast_init_f32+0x60>)
 8005924:	e7eb      	b.n	80058fe <arm_rfft_fast_init_f32+0x16>
 8005926:	4b09      	ldr	r3, [pc, #36]	@ (800594c <arm_rfft_fast_init_f32+0x64>)
 8005928:	e7e9      	b.n	80058fe <arm_rfft_fast_init_f32+0x16>
 800592a:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <arm_rfft_fast_init_f32+0x68>)
 800592c:	e7e7      	b.n	80058fe <arm_rfft_fast_init_f32+0x16>
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <arm_rfft_fast_init_f32+0x6c>)
 8005930:	e7e5      	b.n	80058fe <arm_rfft_fast_init_f32+0x16>
 8005932:	f04f 30ff 	mov.w	r0, #4294967295
 8005936:	4770      	bx	lr
 8005938:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <arm_rfft_fast_init_f32+0x70>)
 800593a:	e7e0      	b.n	80058fe <arm_rfft_fast_init_f32+0x16>
 800593c:	08005825 	.word	0x08005825
 8005940:	080058c1 	.word	0x080058c1
 8005944:	080057dd 	.word	0x080057dd
 8005948:	08005871 	.word	0x08005871
 800594c:	080057b9 	.word	0x080057b9
 8005950:	08005899 	.word	0x08005899
 8005954:	08005801 	.word	0x08005801
 8005958:	08005849 	.word	0x08005849

0800595c <stage_rfft_f32>:
 800595c:	b410      	push	{r4}
 800595e:	edd1 7a00 	vldr	s15, [r1]
 8005962:	ed91 7a01 	vldr	s14, [r1, #4]
 8005966:	8804      	ldrh	r4, [r0, #0]
 8005968:	6940      	ldr	r0, [r0, #20]
 800596a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800596e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005972:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8005976:	ee77 6a87 	vadd.f32	s13, s15, s14
 800597a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800597e:	3c01      	subs	r4, #1
 8005980:	ee26 7a84 	vmul.f32	s14, s13, s8
 8005984:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005988:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800598c:	ed82 7a00 	vstr	s14, [r2]
 8005990:	edc2 7a01 	vstr	s15, [r2, #4]
 8005994:	3010      	adds	r0, #16
 8005996:	3210      	adds	r2, #16
 8005998:	3b08      	subs	r3, #8
 800599a:	3110      	adds	r1, #16
 800599c:	ed11 5a02 	vldr	s10, [r1, #-8]
 80059a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80059a4:	ed50 6a02 	vldr	s13, [r0, #-8]
 80059a8:	edd3 4a03 	vldr	s9, [r3, #12]
 80059ac:	ed51 7a01 	vldr	s15, [r1, #-4]
 80059b0:	ed10 6a01 	vldr	s12, [r0, #-4]
 80059b4:	ee77 5a45 	vsub.f32	s11, s14, s10
 80059b8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80059bc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80059c0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80059c4:	ee66 5a25 	vmul.f32	s11, s12, s11
 80059c8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80059cc:	ee37 7a23 	vadd.f32	s14, s14, s7
 80059d0:	ee66 6a85 	vmul.f32	s13, s13, s10
 80059d4:	ee26 6a05 	vmul.f32	s12, s12, s10
 80059d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80059dc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80059e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80059e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80059ec:	3c01      	subs	r4, #1
 80059ee:	ed02 7a02 	vstr	s14, [r2, #-8]
 80059f2:	ed42 7a01 	vstr	s15, [r2, #-4]
 80059f6:	f1a3 0308 	sub.w	r3, r3, #8
 80059fa:	f101 0108 	add.w	r1, r1, #8
 80059fe:	f100 0008 	add.w	r0, r0, #8
 8005a02:	f102 0208 	add.w	r2, r2, #8
 8005a06:	d1c9      	bne.n	800599c <stage_rfft_f32+0x40>
 8005a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <merge_rfft_f32>:
 8005a10:	b410      	push	{r4}
 8005a12:	edd1 7a00 	vldr	s15, [r1]
 8005a16:	edd1 6a01 	vldr	s13, [r1, #4]
 8005a1a:	8804      	ldrh	r4, [r0, #0]
 8005a1c:	6940      	ldr	r0, [r0, #20]
 8005a1e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005a22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a26:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8005a2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005a2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005a32:	3c01      	subs	r4, #1
 8005a34:	ed82 7a00 	vstr	s14, [r2]
 8005a38:	edc2 7a01 	vstr	s15, [r2, #4]
 8005a3c:	b3dc      	cbz	r4, 8005ab6 <merge_rfft_f32+0xa6>
 8005a3e:	00e3      	lsls	r3, r4, #3
 8005a40:	3b08      	subs	r3, #8
 8005a42:	440b      	add	r3, r1
 8005a44:	3010      	adds	r0, #16
 8005a46:	3210      	adds	r2, #16
 8005a48:	3110      	adds	r1, #16
 8005a4a:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005a4e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005a52:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005a56:	edd3 4a03 	vldr	s9, [r3, #12]
 8005a5a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005a5e:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005a62:	ee75 5a47 	vsub.f32	s11, s10, s14
 8005a66:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005a6a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005a6e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005a72:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005a76:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005a7a:	ee37 7a63 	vsub.f32	s14, s14, s7
 8005a7e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005a82:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005a86:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005a8a:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005a8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a92:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005a96:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005a9a:	3c01      	subs	r4, #1
 8005a9c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005aa0:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005aa4:	f1a3 0308 	sub.w	r3, r3, #8
 8005aa8:	f101 0108 	add.w	r1, r1, #8
 8005aac:	f100 0008 	add.w	r0, r0, #8
 8005ab0:	f102 0208 	add.w	r2, r2, #8
 8005ab4:	d1c9      	bne.n	8005a4a <merge_rfft_f32+0x3a>
 8005ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <arm_rfft_fast_f32>:
 8005abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	b14b      	cbz	r3, 8005adc <arm_rfft_fast_f32+0x20>
 8005ac8:	f7ff ffa2 	bl	8005a10 <merge_rfft_f32>
 8005acc:	4622      	mov	r2, r4
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	f000 bb34 	b.w	8006144 <arm_cfft_f32>
 8005adc:	460f      	mov	r7, r1
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f000 fb2f 	bl	8006144 <arm_cfft_f32>
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	4639      	mov	r1, r7
 8005aea:	4628      	mov	r0, r5
 8005aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af0:	f7ff bf34 	b.w	800595c <stage_rfft_f32>

08005af4 <arm_cfft_radix8by2_f32>:
 8005af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af8:	ed2d 8b08 	vpush	{d8-d11}
 8005afc:	f8b0 c000 	ldrh.w	ip, [r0]
 8005b00:	6842      	ldr	r2, [r0, #4]
 8005b02:	4607      	mov	r7, r0
 8005b04:	4608      	mov	r0, r1
 8005b06:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8005b0a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8005b0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005b12:	b082      	sub	sp, #8
 8005b14:	f000 80b0 	beq.w	8005c78 <arm_cfft_radix8by2_f32+0x184>
 8005b18:	008c      	lsls	r4, r1, #2
 8005b1a:	3410      	adds	r4, #16
 8005b1c:	f100 0310 	add.w	r3, r0, #16
 8005b20:	1906      	adds	r6, r0, r4
 8005b22:	3210      	adds	r2, #16
 8005b24:	4444      	add	r4, r8
 8005b26:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8005b2a:	f108 0510 	add.w	r5, r8, #16
 8005b2e:	ed15 2a04 	vldr	s4, [r5, #-16]
 8005b32:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005b36:	ed54 4a04 	vldr	s9, [r4, #-16]
 8005b3a:	ed14 4a03 	vldr	s8, [r4, #-12]
 8005b3e:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005b42:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005b46:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005b4a:	ed15 0a02 	vldr	s0, [r5, #-8]
 8005b4e:	ed55 0a01 	vldr	s1, [r5, #-4]
 8005b52:	ed56 6a04 	vldr	s13, [r6, #-16]
 8005b56:	ed16 3a03 	vldr	s6, [r6, #-12]
 8005b5a:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005b5e:	ed13 5a02 	vldr	s10, [r3, #-8]
 8005b62:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005b66:	ed16 1a02 	vldr	s2, [r6, #-8]
 8005b6a:	ed56 1a01 	vldr	s3, [r6, #-4]
 8005b6e:	ee73 ba82 	vadd.f32	s23, s7, s4
 8005b72:	ee37 ba22 	vadd.f32	s22, s14, s5
 8005b76:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8005b7a:	ee33 9a04 	vadd.f32	s18, s6, s8
 8005b7e:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8005b82:	ee75 aa00 	vadd.f32	s21, s10, s0
 8005b86:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8005b8a:	ee71 8a06 	vadd.f32	s17, s2, s12
 8005b8e:	ed43 ba04 	vstr	s23, [r3, #-16]
 8005b92:	ed03 ba03 	vstr	s22, [r3, #-12]
 8005b96:	ed43 aa02 	vstr	s21, [r3, #-8]
 8005b9a:	ed03 aa01 	vstr	s20, [r3, #-4]
 8005b9e:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005ba2:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005ba6:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005baa:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005bae:	ee37 7a62 	vsub.f32	s14, s14, s5
 8005bb2:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005bb6:	ee34 4a43 	vsub.f32	s8, s8, s6
 8005bba:	ed52 6a03 	vldr	s13, [r2, #-12]
 8005bbe:	ed12 3a04 	vldr	s6, [r2, #-16]
 8005bc2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8005bc6:	ee27 8a26 	vmul.f32	s16, s14, s13
 8005bca:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8005bce:	ee23 2a83 	vmul.f32	s4, s7, s6
 8005bd2:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005bd6:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8005bda:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005bde:	ee64 6a26 	vmul.f32	s13, s8, s13
 8005be2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8005be6:	ee37 7a63 	vsub.f32	s14, s14, s7
 8005bea:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005bee:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8005bf2:	ee32 3a08 	vadd.f32	s6, s4, s16
 8005bf6:	ed05 7a03 	vstr	s14, [r5, #-12]
 8005bfa:	ed05 3a04 	vstr	s6, [r5, #-16]
 8005bfe:	ed04 4a04 	vstr	s8, [r4, #-16]
 8005c02:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005c06:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005c0a:	ee76 6a41 	vsub.f32	s13, s12, s2
 8005c0e:	ee35 5a40 	vsub.f32	s10, s10, s0
 8005c12:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8005c16:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005c1a:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005c1e:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005c22:	ee66 4a87 	vmul.f32	s9, s13, s14
 8005c26:	ee25 4a25 	vmul.f32	s8, s10, s11
 8005c2a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005c2e:	ee25 5a07 	vmul.f32	s10, s10, s14
 8005c32:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005c36:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005c3a:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005c3e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005c42:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005c46:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8005c4a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005c4e:	3310      	adds	r3, #16
 8005c50:	4563      	cmp	r3, ip
 8005c52:	ed45 5a02 	vstr	s11, [r5, #-8]
 8005c56:	f106 0610 	add.w	r6, r6, #16
 8005c5a:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005c5e:	f102 0210 	add.w	r2, r2, #16
 8005c62:	ed04 6a02 	vstr	s12, [r4, #-8]
 8005c66:	ed04 7a01 	vstr	s14, [r4, #-4]
 8005c6a:	f105 0510 	add.w	r5, r5, #16
 8005c6e:	f104 0410 	add.w	r4, r4, #16
 8005c72:	f47f af5c 	bne.w	8005b2e <arm_cfft_radix8by2_f32+0x3a>
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	b289      	uxth	r1, r1
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	9101      	str	r1, [sp, #4]
 8005c7e:	f000 fc6f 	bl	8006560 <arm_radix8_butterfly_f32>
 8005c82:	9901      	ldr	r1, [sp, #4]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4640      	mov	r0, r8
 8005c88:	2302      	movs	r3, #2
 8005c8a:	b002      	add	sp, #8
 8005c8c:	ecbd 8b08 	vpop	{d8-d11}
 8005c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	f000 bc64 	b.w	8006560 <arm_radix8_butterfly_f32>

08005c98 <arm_cfft_radix8by4_f32>:
 8005c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	ed2d 8b0a 	vpush	{d8-d12}
 8005ca0:	8803      	ldrh	r3, [r0, #0]
 8005ca2:	6842      	ldr	r2, [r0, #4]
 8005ca4:	b08d      	sub	sp, #52	@ 0x34
 8005ca6:	085b      	lsrs	r3, r3, #1
 8005ca8:	900a      	str	r0, [sp, #40]	@ 0x28
 8005caa:	4608      	mov	r0, r1
 8005cac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cb0:	edd1 5a00 	vldr	s11, [r1]
 8005cb4:	edd0 7a00 	vldr	s15, [r0]
 8005cb8:	edd1 3a01 	vldr	s7, [r1, #4]
 8005cbc:	ed90 5a01 	vldr	s10, [r0, #4]
 8005cc0:	9108      	str	r1, [sp, #32]
 8005cc2:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8005cc6:	ed96 7a00 	vldr	s14, [r6]
 8005cca:	ed96 4a01 	vldr	s8, [r6, #4]
 8005cce:	9607      	str	r6, [sp, #28]
 8005cd0:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8005cd4:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8005cd8:	edd8 4a00 	vldr	s9, [r8]
 8005cdc:	ed98 3a01 	vldr	s6, [r8, #4]
 8005ce0:	ee77 6a06 	vadd.f32	s13, s14, s12
 8005ce4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005ce8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005cec:	4604      	mov	r4, r0
 8005cee:	edc0 6a00 	vstr	s13, [r0]
 8005cf2:	edd6 5a01 	vldr	s11, [r6, #4]
 8005cf6:	edd8 2a01 	vldr	s5, [r8, #4]
 8005cfa:	ee75 6a23 	vadd.f32	s13, s10, s7
 8005cfe:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005d02:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005d06:	ee74 3a27 	vadd.f32	s7, s8, s15
 8005d0a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8005d0e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005d12:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005d16:	3408      	adds	r4, #8
 8005d18:	ee35 4a47 	vsub.f32	s8, s10, s14
 8005d1c:	460d      	mov	r5, r1
 8005d1e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005d22:	4637      	mov	r7, r6
 8005d24:	9402      	str	r4, [sp, #8]
 8005d26:	3708      	adds	r7, #8
 8005d28:	460c      	mov	r4, r1
 8005d2a:	3508      	adds	r5, #8
 8005d2c:	0859      	lsrs	r1, r3, #1
 8005d2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d30:	9706      	str	r7, [sp, #24]
 8005d32:	9505      	str	r5, [sp, #20]
 8005d34:	f102 0708 	add.w	r7, r2, #8
 8005d38:	ee36 6a64 	vsub.f32	s12, s12, s9
 8005d3c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005d40:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8005d44:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005d48:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005d4c:	ee34 5a24 	vadd.f32	s10, s8, s9
 8005d50:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005d54:	3902      	subs	r1, #2
 8005d56:	4645      	mov	r5, r8
 8005d58:	9701      	str	r7, [sp, #4]
 8005d5a:	f102 0c18 	add.w	ip, r2, #24
 8005d5e:	f102 0710 	add.w	r7, r2, #16
 8005d62:	3508      	adds	r5, #8
 8005d64:	0849      	lsrs	r1, r1, #1
 8005d66:	edc0 5a01 	vstr	s11, [r0, #4]
 8005d6a:	9703      	str	r7, [sp, #12]
 8005d6c:	edc6 3a00 	vstr	s7, [r6]
 8005d70:	ed86 5a01 	vstr	s10, [r6, #4]
 8005d74:	f8cd c000 	str.w	ip, [sp]
 8005d78:	ed84 6a00 	vstr	s12, [r4]
 8005d7c:	edc4 6a01 	vstr	s13, [r4, #4]
 8005d80:	9504      	str	r5, [sp, #16]
 8005d82:	edc8 7a00 	vstr	s15, [r8]
 8005d86:	ed88 7a01 	vstr	s14, [r8, #4]
 8005d8a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005d8c:	f000 8138 	beq.w	8006000 <arm_cfft_radix8by4_f32+0x368>
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	3b0c      	subs	r3, #12
 8005d94:	f1a6 0c0c 	sub.w	ip, r6, #12
 8005d98:	f106 0510 	add.w	r5, r6, #16
 8005d9c:	4626      	mov	r6, r4
 8005d9e:	46bb      	mov	fp, r7
 8005da0:	f102 0a20 	add.w	sl, r2, #32
 8005da4:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 8005da8:	f106 0710 	add.w	r7, r6, #16
 8005dac:	4443      	add	r3, r8
 8005dae:	f100 0e10 	add.w	lr, r0, #16
 8005db2:	3c0c      	subs	r4, #12
 8005db4:	f1a8 060c 	sub.w	r6, r8, #12
 8005db8:	f108 0210 	add.w	r2, r8, #16
 8005dbc:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8005dc0:	ed57 5a02 	vldr	s11, [r7, #-8]
 8005dc4:	ed55 7a02 	vldr	s15, [r5, #-8]
 8005dc8:	ed52 1a02 	vldr	s3, [r2, #-8]
 8005dcc:	ed57 6a01 	vldr	s13, [r7, #-4]
 8005dd0:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8005dd4:	ed12 1a01 	vldr	s2, [r2, #-4]
 8005dd8:	ed15 8a01 	vldr	s16, [r5, #-4]
 8005ddc:	ee35 4a25 	vadd.f32	s8, s10, s11
 8005de0:	ee30 6a26 	vadd.f32	s12, s0, s13
 8005de4:	ee37 7a84 	vadd.f32	s14, s15, s8
 8005de8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005dec:	ee37 7a21 	vadd.f32	s14, s14, s3
 8005df0:	ee75 5a65 	vsub.f32	s11, s10, s11
 8005df4:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8005df8:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005dfc:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005e00:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005e04:	ee78 aa25 	vadd.f32	s21, s16, s11
 8005e08:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005e0c:	ee70 3a67 	vsub.f32	s7, s0, s15
 8005e10:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8005e14:	ed96 7a02 	vldr	s14, [r6, #8]
 8005e18:	ed9c 2a02 	vldr	s4, [ip, #8]
 8005e1c:	ed94 ba02 	vldr	s22, [r4, #8]
 8005e20:	edd3 9a02 	vldr	s19, [r3, #8]
 8005e24:	edd6 2a01 	vldr	s5, [r6, #4]
 8005e28:	ed9c 9a01 	vldr	s18, [ip, #4]
 8005e2c:	ed93 5a01 	vldr	s10, [r3, #4]
 8005e30:	edd4 0a01 	vldr	s1, [r4, #4]
 8005e34:	ee72 6a07 	vadd.f32	s13, s4, s14
 8005e38:	ee32 2a47 	vsub.f32	s4, s4, s14
 8005e3c:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8005e40:	ee79 4a22 	vadd.f32	s9, s18, s5
 8005e44:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8005e48:	ee79 2a62 	vsub.f32	s5, s18, s5
 8005e4c:	ed8c 7a02 	vstr	s14, [ip, #8]
 8005e50:	ed94 7a01 	vldr	s14, [r4, #4]
 8005e54:	edd3 8a01 	vldr	s17, [r3, #4]
 8005e58:	ee34 7a87 	vadd.f32	s14, s9, s14
 8005e5c:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8005e60:	ee37 7a28 	vadd.f32	s14, s14, s17
 8005e64:	ee32 9a60 	vsub.f32	s18, s4, s1
 8005e68:	ed8c 7a01 	vstr	s14, [ip, #4]
 8005e6c:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8005e70:	ed1b aa02 	vldr	s20, [fp, #-8]
 8005e74:	ee73 8a22 	vadd.f32	s17, s6, s5
 8005e78:	ee39 9a05 	vadd.f32	s18, s18, s10
 8005e7c:	ee7a aac1 	vsub.f32	s21, s21, s2
 8005e80:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8005e84:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8005e88:	ee69 ba07 	vmul.f32	s23, s18, s14
 8005e8c:	ee6a aa87 	vmul.f32	s21, s21, s14
 8005e90:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8005e94:	ee63 ca87 	vmul.f32	s25, s7, s14
 8005e98:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8005e9c:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8005ea0:	ee68 8a87 	vmul.f32	s17, s17, s14
 8005ea4:	ee73 3aea 	vsub.f32	s7, s7, s21
 8005ea8:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005eac:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8005eb0:	ee3b aaca 	vsub.f32	s20, s23, s20
 8005eb4:	ee34 4a67 	vsub.f32	s8, s8, s15
 8005eb8:	ee76 6acb 	vsub.f32	s13, s13, s22
 8005ebc:	ee36 6a48 	vsub.f32	s12, s12, s16
 8005ec0:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8005ec4:	ed05 7a02 	vstr	s14, [r5, #-8]
 8005ec8:	ed45 3a01 	vstr	s7, [r5, #-4]
 8005ecc:	edc4 8a01 	vstr	s17, [r4, #4]
 8005ed0:	ed84 aa02 	vstr	s20, [r4, #8]
 8005ed4:	ed5a 3a04 	vldr	s7, [sl, #-16]
 8005ed8:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8005edc:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8005ee0:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8005ee4:	ee34 4a61 	vsub.f32	s8, s8, s3
 8005ee8:	ee36 6a41 	vsub.f32	s12, s12, s2
 8005eec:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8005ef0:	ee66 9a26 	vmul.f32	s19, s12, s13
 8005ef4:	ee24 9a23 	vmul.f32	s18, s8, s7
 8005ef8:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005efc:	ee24 4a26 	vmul.f32	s8, s8, s13
 8005f00:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005f04:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005f08:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8005f0c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005f10:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005f14:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8005f18:	ee79 3a29 	vadd.f32	s7, s18, s19
 8005f1c:	ee75 6a60 	vsub.f32	s13, s10, s1
 8005f20:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8005f24:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005f28:	ed47 3a02 	vstr	s7, [r7, #-8]
 8005f2c:	ed07 6a01 	vstr	s12, [r7, #-4]
 8005f30:	ed86 7a01 	vstr	s14, [r6, #4]
 8005f34:	ed86 4a02 	vstr	s8, [r6, #8]
 8005f38:	ee35 6a81 	vadd.f32	s12, s11, s2
 8005f3c:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8005f40:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 8005f44:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 8005f48:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005f4c:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8005f50:	ee67 2a26 	vmul.f32	s5, s14, s13
 8005f54:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8005f58:	ee26 5a25 	vmul.f32	s10, s12, s11
 8005f5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005f60:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005f64:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005f68:	ee63 6a26 	vmul.f32	s13, s6, s13
 8005f6c:	ee23 3a25 	vmul.f32	s6, s6, s11
 8005f70:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005f74:	ee75 5a24 	vadd.f32	s11, s10, s9
 8005f78:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8005f7c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005f80:	3901      	subs	r1, #1
 8005f82:	ed42 5a02 	vstr	s11, [r2, #-8]
 8005f86:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005f8a:	f10e 0e08 	add.w	lr, lr, #8
 8005f8e:	ed83 3a02 	vstr	s6, [r3, #8]
 8005f92:	ed83 7a01 	vstr	s14, [r3, #4]
 8005f96:	f1ac 0c08 	sub.w	ip, ip, #8
 8005f9a:	f10b 0b08 	add.w	fp, fp, #8
 8005f9e:	f105 0508 	add.w	r5, r5, #8
 8005fa2:	f1a4 0408 	sub.w	r4, r4, #8
 8005fa6:	f10a 0a10 	add.w	sl, sl, #16
 8005faa:	f107 0708 	add.w	r7, r7, #8
 8005fae:	f1a6 0608 	sub.w	r6, r6, #8
 8005fb2:	f109 0918 	add.w	r9, r9, #24
 8005fb6:	f102 0208 	add.w	r2, r2, #8
 8005fba:	f1a3 0308 	sub.w	r3, r3, #8
 8005fbe:	f47f aefd 	bne.w	8005dbc <arm_cfft_radix8by4_f32+0x124>
 8005fc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005fc4:	9902      	ldr	r1, [sp, #8]
 8005fc6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005fca:	9102      	str	r1, [sp, #8]
 8005fcc:	9901      	ldr	r1, [sp, #4]
 8005fce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005fd2:	9101      	str	r1, [sp, #4]
 8005fd4:	9906      	ldr	r1, [sp, #24]
 8005fd6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005fda:	9106      	str	r1, [sp, #24]
 8005fdc:	9903      	ldr	r1, [sp, #12]
 8005fde:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8005fe2:	9103      	str	r1, [sp, #12]
 8005fe4:	9905      	ldr	r1, [sp, #20]
 8005fe6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005fea:	9105      	str	r1, [sp, #20]
 8005fec:	9904      	ldr	r1, [sp, #16]
 8005fee:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005ff2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005ff6:	9204      	str	r2, [sp, #16]
 8005ff8:	9a00      	ldr	r2, [sp, #0]
 8005ffa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	9902      	ldr	r1, [sp, #8]
 8006002:	9d05      	ldr	r5, [sp, #20]
 8006004:	ed91 4a00 	vldr	s8, [r1]
 8006008:	edd5 6a00 	vldr	s13, [r5]
 800600c:	9b06      	ldr	r3, [sp, #24]
 800600e:	9c04      	ldr	r4, [sp, #16]
 8006010:	edd3 7a00 	vldr	s15, [r3]
 8006014:	ed94 3a00 	vldr	s6, [r4]
 8006018:	edd5 4a01 	vldr	s9, [r5, #4]
 800601c:	edd1 3a01 	vldr	s7, [r1, #4]
 8006020:	ed94 2a01 	vldr	s4, [r4, #4]
 8006024:	ed93 7a01 	vldr	s14, [r3, #4]
 8006028:	9a01      	ldr	r2, [sp, #4]
 800602a:	ee34 6a26 	vadd.f32	s12, s8, s13
 800602e:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006032:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006036:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800603a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800603e:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006042:	ed81 5a00 	vstr	s10, [r1]
 8006046:	ed93 5a01 	vldr	s10, [r3, #4]
 800604a:	edd4 4a01 	vldr	s9, [r4, #4]
 800604e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006052:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006056:	ee35 5a24 	vadd.f32	s10, s10, s9
 800605a:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800605e:	ed81 5a01 	vstr	s10, [r1, #4]
 8006062:	edd2 1a00 	vldr	s3, [r2]
 8006066:	edd2 2a01 	vldr	s5, [r2, #4]
 800606a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800606e:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006072:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006076:	ee36 6a67 	vsub.f32	s12, s12, s15
 800607a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800607e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006082:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006086:	ee25 5a21 	vmul.f32	s10, s10, s3
 800608a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800608e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006092:	edc3 2a00 	vstr	s5, [r3]
 8006096:	ed83 5a01 	vstr	s10, [r3, #4]
 800609a:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	ee36 6a43 	vsub.f32	s12, s12, s6
 80060a4:	ed93 4a01 	vldr	s8, [r3, #4]
 80060a8:	ed93 5a00 	vldr	s10, [r3]
 80060ac:	9b00      	ldr	r3, [sp, #0]
 80060ae:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80060b2:	ee66 4a05 	vmul.f32	s9, s12, s10
 80060b6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80060ba:	ee26 6a04 	vmul.f32	s12, s12, s8
 80060be:	ee65 5a84 	vmul.f32	s11, s11, s8
 80060c2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80060c6:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80060ca:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80060ce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80060d2:	ed85 6a01 	vstr	s12, [r5, #4]
 80060d6:	edc5 5a00 	vstr	s11, [r5]
 80060da:	edd3 5a01 	vldr	s11, [r3, #4]
 80060de:	edd3 6a00 	vldr	s13, [r3]
 80060e2:	ee37 7a02 	vadd.f32	s14, s14, s4
 80060e6:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80060ea:	ee27 6a26 	vmul.f32	s12, s14, s13
 80060ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80060f2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80060f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80060fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80060fe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006102:	ed84 7a01 	vstr	s14, [r4, #4]
 8006106:	edc4 7a00 	vstr	s15, [r4]
 800610a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800610c:	9100      	str	r1, [sp, #0]
 800610e:	6862      	ldr	r2, [r4, #4]
 8006110:	2304      	movs	r3, #4
 8006112:	f000 fa25 	bl	8006560 <arm_radix8_butterfly_f32>
 8006116:	9807      	ldr	r0, [sp, #28]
 8006118:	9900      	ldr	r1, [sp, #0]
 800611a:	6862      	ldr	r2, [r4, #4]
 800611c:	2304      	movs	r3, #4
 800611e:	f000 fa1f 	bl	8006560 <arm_radix8_butterfly_f32>
 8006122:	9808      	ldr	r0, [sp, #32]
 8006124:	9900      	ldr	r1, [sp, #0]
 8006126:	6862      	ldr	r2, [r4, #4]
 8006128:	2304      	movs	r3, #4
 800612a:	f000 fa19 	bl	8006560 <arm_radix8_butterfly_f32>
 800612e:	9900      	ldr	r1, [sp, #0]
 8006130:	6862      	ldr	r2, [r4, #4]
 8006132:	4640      	mov	r0, r8
 8006134:	2304      	movs	r3, #4
 8006136:	b00d      	add	sp, #52	@ 0x34
 8006138:	ecbd 8b0a 	vpop	{d8-d12}
 800613c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006140:	f000 ba0e 	b.w	8006560 <arm_radix8_butterfly_f32>

08006144 <arm_cfft_f32>:
 8006144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006148:	2a01      	cmp	r2, #1
 800614a:	8805      	ldrh	r5, [r0, #0]
 800614c:	4607      	mov	r7, r0
 800614e:	4690      	mov	r8, r2
 8006150:	460c      	mov	r4, r1
 8006152:	4699      	mov	r9, r3
 8006154:	d05c      	beq.n	8006210 <arm_cfft_f32+0xcc>
 8006156:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800615a:	d054      	beq.n	8006206 <arm_cfft_f32+0xc2>
 800615c:	d810      	bhi.n	8006180 <arm_cfft_f32+0x3c>
 800615e:	2d40      	cmp	r5, #64	@ 0x40
 8006160:	d015      	beq.n	800618e <arm_cfft_f32+0x4a>
 8006162:	d94c      	bls.n	80061fe <arm_cfft_f32+0xba>
 8006164:	2d80      	cmp	r5, #128	@ 0x80
 8006166:	d103      	bne.n	8006170 <arm_cfft_f32+0x2c>
 8006168:	4621      	mov	r1, r4
 800616a:	4638      	mov	r0, r7
 800616c:	f7ff fcc2 	bl	8005af4 <arm_cfft_radix8by2_f32>
 8006170:	f1b9 0f00 	cmp.w	r9, #0
 8006174:	d114      	bne.n	80061a0 <arm_cfft_f32+0x5c>
 8006176:	f1b8 0f01 	cmp.w	r8, #1
 800617a:	d019      	beq.n	80061b0 <arm_cfft_f32+0x6c>
 800617c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006180:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006184:	d03f      	beq.n	8006206 <arm_cfft_f32+0xc2>
 8006186:	d933      	bls.n	80061f0 <arm_cfft_f32+0xac>
 8006188:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800618c:	d1f0      	bne.n	8006170 <arm_cfft_f32+0x2c>
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	2301      	movs	r3, #1
 8006192:	4629      	mov	r1, r5
 8006194:	4620      	mov	r0, r4
 8006196:	f000 f9e3 	bl	8006560 <arm_radix8_butterfly_f32>
 800619a:	f1b9 0f00 	cmp.w	r9, #0
 800619e:	d0ea      	beq.n	8006176 <arm_cfft_f32+0x32>
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	89b9      	ldrh	r1, [r7, #12]
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 f845 	bl	8006234 <arm_bitreversal_32>
 80061aa:	f1b8 0f01 	cmp.w	r8, #1
 80061ae:	d1e5      	bne.n	800617c <arm_cfft_f32+0x38>
 80061b0:	ee07 5a90 	vmov	s15, r5
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	d0db      	beq.n	800617c <arm_cfft_f32+0x38>
 80061c4:	f104 0108 	add.w	r1, r4, #8
 80061c8:	2300      	movs	r3, #0
 80061ca:	3301      	adds	r3, #1
 80061cc:	429d      	cmp	r5, r3
 80061ce:	f101 0108 	add.w	r1, r1, #8
 80061d2:	ed11 7a04 	vldr	s14, [r1, #-16]
 80061d6:	ed51 7a03 	vldr	s15, [r1, #-12]
 80061da:	ee27 7a26 	vmul.f32	s14, s14, s13
 80061de:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80061e2:	ed01 7a04 	vstr	s14, [r1, #-16]
 80061e6:	ed41 7a03 	vstr	s15, [r1, #-12]
 80061ea:	d1ee      	bne.n	80061ca <arm_cfft_f32+0x86>
 80061ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80061f4:	d0cb      	beq.n	800618e <arm_cfft_f32+0x4a>
 80061f6:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80061fa:	d0b5      	beq.n	8006168 <arm_cfft_f32+0x24>
 80061fc:	e7b8      	b.n	8006170 <arm_cfft_f32+0x2c>
 80061fe:	2d10      	cmp	r5, #16
 8006200:	d0b2      	beq.n	8006168 <arm_cfft_f32+0x24>
 8006202:	2d20      	cmp	r5, #32
 8006204:	d1b4      	bne.n	8006170 <arm_cfft_f32+0x2c>
 8006206:	4621      	mov	r1, r4
 8006208:	4638      	mov	r0, r7
 800620a:	f7ff fd45 	bl	8005c98 <arm_cfft_radix8by4_f32>
 800620e:	e7af      	b.n	8006170 <arm_cfft_f32+0x2c>
 8006210:	b16d      	cbz	r5, 800622e <arm_cfft_f32+0xea>
 8006212:	310c      	adds	r1, #12
 8006214:	2600      	movs	r6, #0
 8006216:	ed51 7a02 	vldr	s15, [r1, #-8]
 800621a:	3601      	adds	r6, #1
 800621c:	eef1 7a67 	vneg.f32	s15, s15
 8006220:	42b5      	cmp	r5, r6
 8006222:	ed41 7a02 	vstr	s15, [r1, #-8]
 8006226:	f101 0108 	add.w	r1, r1, #8
 800622a:	d1f4      	bne.n	8006216 <arm_cfft_f32+0xd2>
 800622c:	e793      	b.n	8006156 <arm_cfft_f32+0x12>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0a4      	beq.n	800617c <arm_cfft_f32+0x38>
 8006232:	e7b5      	b.n	80061a0 <arm_cfft_f32+0x5c>

08006234 <arm_bitreversal_32>:
 8006234:	b1e9      	cbz	r1, 8006272 <arm_bitreversal_32+0x3e>
 8006236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006238:	2500      	movs	r5, #0
 800623a:	f102 0e02 	add.w	lr, r2, #2
 800623e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006242:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006246:	08a4      	lsrs	r4, r4, #2
 8006248:	089b      	lsrs	r3, r3, #2
 800624a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800624e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006252:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006256:	00a6      	lsls	r6, r4, #2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800625e:	3304      	adds	r3, #4
 8006260:	1d34      	adds	r4, r6, #4
 8006262:	3502      	adds	r5, #2
 8006264:	58c6      	ldr	r6, [r0, r3]
 8006266:	5907      	ldr	r7, [r0, r4]
 8006268:	50c7      	str	r7, [r0, r3]
 800626a:	428d      	cmp	r5, r1
 800626c:	5106      	str	r6, [r0, r4]
 800626e:	d3e6      	bcc.n	800623e <arm_bitreversal_32+0xa>
 8006270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006272:	4770      	bx	lr

08006274 <arm_cmplx_mag_f32>:
 8006274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006278:	ed2d 8b02 	vpush	{d8}
 800627c:	0897      	lsrs	r7, r2, #2
 800627e:	b084      	sub	sp, #16
 8006280:	d077      	beq.n	8006372 <arm_cmplx_mag_f32+0xfe>
 8006282:	f04f 0800 	mov.w	r8, #0
 8006286:	f100 0420 	add.w	r4, r0, #32
 800628a:	f101 0510 	add.w	r5, r1, #16
 800628e:	463e      	mov	r6, r7
 8006290:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8006294:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8006298:	ee20 0a00 	vmul.f32	s0, s0, s0
 800629c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80062a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80062a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80062a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ac:	f2c0 80c5 	blt.w	800643a <arm_cmplx_mag_f32+0x1c6>
 80062b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80062b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80062bc:	f100 80cb 	bmi.w	8006456 <arm_cmplx_mag_f32+0x1e2>
 80062c0:	ed05 8a04 	vstr	s16, [r5, #-16]
 80062c4:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 80062c8:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 80062cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80062d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80062d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80062d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80062dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e0:	f2c0 80a8 	blt.w	8006434 <arm_cmplx_mag_f32+0x1c0>
 80062e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80062e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80062f0:	f100 80a8 	bmi.w	8006444 <arm_cmplx_mag_f32+0x1d0>
 80062f4:	ed05 8a03 	vstr	s16, [r5, #-12]
 80062f8:	ed14 0a04 	vldr	s0, [r4, #-16]
 80062fc:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006300:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006304:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006308:	ee30 0a27 	vadd.f32	s0, s0, s15
 800630c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006314:	f2c0 808b 	blt.w	800642e <arm_cmplx_mag_f32+0x1ba>
 8006318:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800631c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006320:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006324:	f100 80a9 	bmi.w	800647a <arm_cmplx_mag_f32+0x206>
 8006328:	ed05 8a02 	vstr	s16, [r5, #-8]
 800632c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006330:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006334:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800633c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006340:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006348:	db6e      	blt.n	8006428 <arm_cmplx_mag_f32+0x1b4>
 800634a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800634e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006352:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006356:	f100 8087 	bmi.w	8006468 <arm_cmplx_mag_f32+0x1f4>
 800635a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800635e:	3e01      	subs	r6, #1
 8006360:	f104 0420 	add.w	r4, r4, #32
 8006364:	f105 0510 	add.w	r5, r5, #16
 8006368:	d192      	bne.n	8006290 <arm_cmplx_mag_f32+0x1c>
 800636a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800636e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8006372:	f012 0203 	ands.w	r2, r2, #3
 8006376:	d052      	beq.n	800641e <arm_cmplx_mag_f32+0x1aa>
 8006378:	ed90 0a00 	vldr	s0, [r0]
 800637c:	edd0 7a01 	vldr	s15, [r0, #4]
 8006380:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006384:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006388:	2300      	movs	r3, #0
 800638a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800638e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006396:	bfb8      	it	lt
 8006398:	600b      	strlt	r3, [r1, #0]
 800639a:	db08      	blt.n	80063ae <arm_cmplx_mag_f32+0x13a>
 800639c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80063a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80063a8:	d479      	bmi.n	800649e <arm_cmplx_mag_f32+0x22a>
 80063aa:	ed81 8a00 	vstr	s16, [r1]
 80063ae:	3a01      	subs	r2, #1
 80063b0:	d035      	beq.n	800641e <arm_cmplx_mag_f32+0x1aa>
 80063b2:	ed90 0a02 	vldr	s0, [r0, #8]
 80063b6:	edd0 7a03 	vldr	s15, [r0, #12]
 80063ba:	ee20 0a00 	vmul.f32	s0, s0, s0
 80063be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063c2:	2300      	movs	r3, #0
 80063c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80063c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80063cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d0:	bfb8      	it	lt
 80063d2:	604b      	strlt	r3, [r1, #4]
 80063d4:	db08      	blt.n	80063e8 <arm_cmplx_mag_f32+0x174>
 80063d6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80063da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063de:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80063e2:	d453      	bmi.n	800648c <arm_cmplx_mag_f32+0x218>
 80063e4:	ed81 8a01 	vstr	s16, [r1, #4]
 80063e8:	2a01      	cmp	r2, #1
 80063ea:	d018      	beq.n	800641e <arm_cmplx_mag_f32+0x1aa>
 80063ec:	ed90 0a04 	vldr	s0, [r0, #16]
 80063f0:	edd0 7a05 	vldr	s15, [r0, #20]
 80063f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80063f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063fc:	2300      	movs	r3, #0
 80063fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006402:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800640a:	db19      	blt.n	8006440 <arm_cmplx_mag_f32+0x1cc>
 800640c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006418:	d44a      	bmi.n	80064b0 <arm_cmplx_mag_f32+0x23c>
 800641a:	ed81 8a02 	vstr	s16, [r1, #8]
 800641e:	b004      	add	sp, #16
 8006420:	ecbd 8b02 	vpop	{d8}
 8006424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006428:	f845 8c04 	str.w	r8, [r5, #-4]
 800642c:	e797      	b.n	800635e <arm_cmplx_mag_f32+0xea>
 800642e:	f845 8c08 	str.w	r8, [r5, #-8]
 8006432:	e77b      	b.n	800632c <arm_cmplx_mag_f32+0xb8>
 8006434:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006438:	e75e      	b.n	80062f8 <arm_cmplx_mag_f32+0x84>
 800643a:	f845 8c10 	str.w	r8, [r5, #-16]
 800643e:	e741      	b.n	80062c4 <arm_cmplx_mag_f32+0x50>
 8006440:	608b      	str	r3, [r1, #8]
 8006442:	e7ec      	b.n	800641e <arm_cmplx_mag_f32+0x1aa>
 8006444:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006448:	9001      	str	r0, [sp, #4]
 800644a:	f001 fae3 	bl	8007a14 <sqrtf>
 800644e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006452:	9801      	ldr	r0, [sp, #4]
 8006454:	e74e      	b.n	80062f4 <arm_cmplx_mag_f32+0x80>
 8006456:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800645a:	9001      	str	r0, [sp, #4]
 800645c:	f001 fada 	bl	8007a14 <sqrtf>
 8006460:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006464:	9801      	ldr	r0, [sp, #4]
 8006466:	e72b      	b.n	80062c0 <arm_cmplx_mag_f32+0x4c>
 8006468:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800646c:	9001      	str	r0, [sp, #4]
 800646e:	f001 fad1 	bl	8007a14 <sqrtf>
 8006472:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006476:	9801      	ldr	r0, [sp, #4]
 8006478:	e76f      	b.n	800635a <arm_cmplx_mag_f32+0xe6>
 800647a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800647e:	9001      	str	r0, [sp, #4]
 8006480:	f001 fac8 	bl	8007a14 <sqrtf>
 8006484:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006488:	9801      	ldr	r0, [sp, #4]
 800648a:	e74d      	b.n	8006328 <arm_cmplx_mag_f32+0xb4>
 800648c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006490:	9201      	str	r2, [sp, #4]
 8006492:	f001 fabf 	bl	8007a14 <sqrtf>
 8006496:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800649a:	9903      	ldr	r1, [sp, #12]
 800649c:	e7a2      	b.n	80063e4 <arm_cmplx_mag_f32+0x170>
 800649e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a2:	9201      	str	r2, [sp, #4]
 80064a4:	f001 fab6 	bl	8007a14 <sqrtf>
 80064a8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80064ac:	9903      	ldr	r1, [sp, #12]
 80064ae:	e77c      	b.n	80063aa <arm_cmplx_mag_f32+0x136>
 80064b0:	9101      	str	r1, [sp, #4]
 80064b2:	f001 faaf 	bl	8007a14 <sqrtf>
 80064b6:	9901      	ldr	r1, [sp, #4]
 80064b8:	e7af      	b.n	800641a <arm_cmplx_mag_f32+0x1a6>
 80064ba:	bf00      	nop

080064bc <arm_cfft_init_f32>:
 80064bc:	4603      	mov	r3, r0
 80064be:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	b410      	push	{r4}
 80064c8:	8019      	strh	r1, [r3, #0]
 80064ca:	6058      	str	r0, [r3, #4]
 80064cc:	d033      	beq.n	8006536 <arm_cfft_init_f32+0x7a>
 80064ce:	d918      	bls.n	8006502 <arm_cfft_init_f32+0x46>
 80064d0:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80064d4:	d027      	beq.n	8006526 <arm_cfft_init_f32+0x6a>
 80064d6:	d90c      	bls.n	80064f2 <arm_cfft_init_f32+0x36>
 80064d8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80064dc:	d11e      	bne.n	800651c <arm_cfft_init_f32+0x60>
 80064de:	4a17      	ldr	r2, [pc, #92]	@ (800653c <arm_cfft_init_f32+0x80>)
 80064e0:	8994      	ldrh	r4, [r2, #12]
 80064e2:	819c      	strh	r4, [r3, #12]
 80064e4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80064e8:	e9c3 2101 	strd	r2, r1, [r3, #4]
 80064ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80064f6:	d018      	beq.n	800652a <arm_cfft_init_f32+0x6e>
 80064f8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80064fc:	d10e      	bne.n	800651c <arm_cfft_init_f32+0x60>
 80064fe:	4a10      	ldr	r2, [pc, #64]	@ (8006540 <arm_cfft_init_f32+0x84>)
 8006500:	e7ee      	b.n	80064e0 <arm_cfft_init_f32+0x24>
 8006502:	2940      	cmp	r1, #64	@ 0x40
 8006504:	d013      	beq.n	800652e <arm_cfft_init_f32+0x72>
 8006506:	d903      	bls.n	8006510 <arm_cfft_init_f32+0x54>
 8006508:	2980      	cmp	r1, #128	@ 0x80
 800650a:	d107      	bne.n	800651c <arm_cfft_init_f32+0x60>
 800650c:	4a0d      	ldr	r2, [pc, #52]	@ (8006544 <arm_cfft_init_f32+0x88>)
 800650e:	e7e7      	b.n	80064e0 <arm_cfft_init_f32+0x24>
 8006510:	2910      	cmp	r1, #16
 8006512:	d00e      	beq.n	8006532 <arm_cfft_init_f32+0x76>
 8006514:	2920      	cmp	r1, #32
 8006516:	d101      	bne.n	800651c <arm_cfft_init_f32+0x60>
 8006518:	4a0b      	ldr	r2, [pc, #44]	@ (8006548 <arm_cfft_init_f32+0x8c>)
 800651a:	e7e1      	b.n	80064e0 <arm_cfft_init_f32+0x24>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	4a09      	ldr	r2, [pc, #36]	@ (800654c <arm_cfft_init_f32+0x90>)
 8006528:	e7da      	b.n	80064e0 <arm_cfft_init_f32+0x24>
 800652a:	4a09      	ldr	r2, [pc, #36]	@ (8006550 <arm_cfft_init_f32+0x94>)
 800652c:	e7d8      	b.n	80064e0 <arm_cfft_init_f32+0x24>
 800652e:	4a09      	ldr	r2, [pc, #36]	@ (8006554 <arm_cfft_init_f32+0x98>)
 8006530:	e7d6      	b.n	80064e0 <arm_cfft_init_f32+0x24>
 8006532:	4a09      	ldr	r2, [pc, #36]	@ (8006558 <arm_cfft_init_f32+0x9c>)
 8006534:	e7d4      	b.n	80064e0 <arm_cfft_init_f32+0x24>
 8006536:	4a09      	ldr	r2, [pc, #36]	@ (800655c <arm_cfft_init_f32+0xa0>)
 8006538:	e7d2      	b.n	80064e0 <arm_cfft_init_f32+0x24>
 800653a:	bf00      	nop
 800653c:	08024f74 	.word	0x08024f74
 8006540:	08024f14 	.word	0x08024f14
 8006544:	08024f24 	.word	0x08024f24
 8006548:	08024f64 	.word	0x08024f64
 800654c:	08024f44 	.word	0x08024f44
 8006550:	08024f84 	.word	0x08024f84
 8006554:	08024f94 	.word	0x08024f94
 8006558:	08024f34 	.word	0x08024f34
 800655c:	08024f54 	.word	0x08024f54

08006560 <arm_radix8_butterfly_f32>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	ed2d 8b10 	vpush	{d8-d15}
 8006568:	b093      	sub	sp, #76	@ 0x4c
 800656a:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800656e:	4603      	mov	r3, r0
 8006570:	3304      	adds	r3, #4
 8006572:	ed9f bac0 	vldr	s22, [pc, #768]	@ 8006874 <arm_radix8_butterfly_f32+0x314>
 8006576:	9010      	str	r0, [sp, #64]	@ 0x40
 8006578:	468b      	mov	fp, r1
 800657a:	9311      	str	r3, [sp, #68]	@ 0x44
 800657c:	4689      	mov	r9, r1
 800657e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8006580:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8006584:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8006588:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 800658c:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 8006590:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8006594:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8006598:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 800659c:	9100      	str	r1, [sp, #0]
 800659e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80065a2:	f108 0004 	add.w	r0, r8, #4
 80065a6:	f10e 0104 	add.w	r1, lr, #4
 80065aa:	462e      	mov	r6, r5
 80065ac:	4420      	add	r0, r4
 80065ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065b2:	4421      	add	r1, r4
 80065b4:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80065b8:	960d      	str	r6, [sp, #52]	@ 0x34
 80065ba:	9402      	str	r4, [sp, #8]
 80065bc:	012c      	lsls	r4, r5, #4
 80065be:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 80065c2:	9403      	str	r4, [sp, #12]
 80065c4:	00ec      	lsls	r4, r5, #3
 80065c6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80065c8:	9404      	str	r4, [sp, #16]
 80065ca:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80065ce:	9405      	str	r4, [sp, #20]
 80065d0:	016c      	lsls	r4, r5, #5
 80065d2:	9401      	str	r4, [sp, #4]
 80065d4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80065d6:	9c00      	ldr	r4, [sp, #0]
 80065d8:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 80065dc:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80065e0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80065e4:	f04f 0c00 	mov.w	ip, #0
 80065e8:	edd6 6a00 	vldr	s13, [r6]
 80065ec:	edd7 1a00 	vldr	s3, [r7]
 80065f0:	ed15 aa01 	vldr	s20, [r5, #-4]
 80065f4:	edd2 5a00 	vldr	s11, [r2]
 80065f8:	ed51 9a01 	vldr	s19, [r1, #-4]
 80065fc:	ed94 6a00 	vldr	s12, [r4]
 8006600:	ed50 7a01 	vldr	s15, [r0, #-4]
 8006604:	ed93 3a00 	vldr	s6, [r3]
 8006608:	ee39 0a86 	vadd.f32	s0, s19, s12
 800660c:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006610:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006614:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006618:	ee35 7a02 	vadd.f32	s14, s10, s4
 800661c:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006620:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006624:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006628:	ee34 4a47 	vsub.f32	s8, s8, s14
 800662c:	ed45 6a01 	vstr	s13, [r5, #-4]
 8006630:	ed82 4a00 	vstr	s8, [r2]
 8006634:	edd0 6a00 	vldr	s13, [r0]
 8006638:	ed96 9a01 	vldr	s18, [r6, #4]
 800663c:	edd3 2a01 	vldr	s5, [r3, #4]
 8006640:	edd7 8a01 	vldr	s17, [r7, #4]
 8006644:	edd5 0a00 	vldr	s1, [r5]
 8006648:	edd2 3a01 	vldr	s7, [r2, #4]
 800664c:	ed94 8a01 	vldr	s16, [r4, #4]
 8006650:	ed91 7a00 	vldr	s14, [r1]
 8006654:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006658:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800665c:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006660:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006664:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006668:	ee77 7a83 	vadd.f32	s15, s15, s6
 800666c:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006670:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006674:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006678:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800667c:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006680:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006684:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006688:	ee37 7a48 	vsub.f32	s14, s14, s16
 800668c:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006690:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006694:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006698:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800669c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80066a0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80066a4:	ee35 5a42 	vsub.f32	s10, s10, s4
 80066a8:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80066ac:	ee33 2a20 	vadd.f32	s4, s6, s1
 80066b0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80066b4:	ee33 3a60 	vsub.f32	s6, s6, s1
 80066b8:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80066bc:	ee77 0a01 	vadd.f32	s1, s14, s2
 80066c0:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80066c4:	ee37 7a41 	vsub.f32	s14, s14, s2
 80066c8:	ee73 1a84 	vadd.f32	s3, s7, s8
 80066cc:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80066d0:	ee76 3a27 	vadd.f32	s7, s12, s15
 80066d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80066d8:	ee32 8a00 	vadd.f32	s16, s4, s0
 80066dc:	ee33 1a45 	vsub.f32	s2, s6, s10
 80066e0:	ee32 2a40 	vsub.f32	s4, s4, s0
 80066e4:	ee35 5a03 	vadd.f32	s10, s10, s6
 80066e8:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80066ec:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80066f0:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80066f4:	ee34 6a67 	vsub.f32	s12, s8, s15
 80066f8:	ee75 4a87 	vadd.f32	s9, s11, s14
 80066fc:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006700:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006704:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006708:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800670c:	44dc      	add	ip, fp
 800670e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006712:	45e1      	cmp	r9, ip
 8006714:	ed85 8a00 	vstr	s16, [r5]
 8006718:	ed82 2a01 	vstr	s4, [r2, #4]
 800671c:	4455      	add	r5, sl
 800671e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8006722:	4452      	add	r2, sl
 8006724:	edc4 6a00 	vstr	s13, [r4]
 8006728:	ed81 1a00 	vstr	s2, [r1]
 800672c:	ed84 5a01 	vstr	s10, [r4, #4]
 8006730:	4451      	add	r1, sl
 8006732:	ed00 3a01 	vstr	s6, [r0, #-4]
 8006736:	4454      	add	r4, sl
 8006738:	edc7 2a00 	vstr	s5, [r7]
 800673c:	edc6 4a00 	vstr	s9, [r6]
 8006740:	ed83 7a00 	vstr	s14, [r3]
 8006744:	edc0 5a00 	vstr	s11, [r0]
 8006748:	edc7 3a01 	vstr	s7, [r7, #4]
 800674c:	4450      	add	r0, sl
 800674e:	ed86 6a01 	vstr	s12, [r6, #4]
 8006752:	4457      	add	r7, sl
 8006754:	edc3 7a01 	vstr	s15, [r3, #4]
 8006758:	4456      	add	r6, sl
 800675a:	4453      	add	r3, sl
 800675c:	f63f af44 	bhi.w	80065e8 <arm_radix8_butterfly_f32+0x88>
 8006760:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006762:	2b07      	cmp	r3, #7
 8006764:	f240 81c3 	bls.w	8006aee <arm_radix8_butterfly_f32+0x58e>
 8006768:	9805      	ldr	r0, [sp, #20]
 800676a:	9a01      	ldr	r2, [sp, #4]
 800676c:	9b03      	ldr	r3, [sp, #12]
 800676e:	9d04      	ldr	r5, [sp, #16]
 8006770:	9902      	ldr	r1, [sp, #8]
 8006772:	f100 0c08 	add.w	ip, r0, #8
 8006776:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006778:	3208      	adds	r2, #8
 800677a:	1882      	adds	r2, r0, r2
 800677c:	3308      	adds	r3, #8
 800677e:	920a      	str	r2, [sp, #40]	@ 0x28
 8006780:	4602      	mov	r2, r0
 8006782:	18d3      	adds	r3, r2, r3
 8006784:	3108      	adds	r1, #8
 8006786:	3508      	adds	r5, #8
 8006788:	1851      	adds	r1, r2, r1
 800678a:	9307      	str	r3, [sp, #28]
 800678c:	4613      	mov	r3, r2
 800678e:	442a      	add	r2, r5
 8006790:	9206      	str	r2, [sp, #24]
 8006792:	461a      	mov	r2, r3
 8006794:	4462      	add	r2, ip
 8006796:	f10e 0e0c 	add.w	lr, lr, #12
 800679a:	9205      	str	r2, [sp, #20]
 800679c:	461a      	mov	r2, r3
 800679e:	4472      	add	r2, lr
 80067a0:	f108 0808 	add.w	r8, r8, #8
 80067a4:	330c      	adds	r3, #12
 80067a6:	4440      	add	r0, r8
 80067a8:	f04f 0e00 	mov.w	lr, #0
 80067ac:	9203      	str	r2, [sp, #12]
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	465a      	mov	r2, fp
 80067b2:	464b      	mov	r3, r9
 80067b4:	46f3      	mov	fp, lr
 80067b6:	46d1      	mov	r9, sl
 80067b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80067ba:	9108      	str	r1, [sp, #32]
 80067bc:	f04f 0801 	mov.w	r8, #1
 80067c0:	469a      	mov	sl, r3
 80067c2:	4696      	mov	lr, r2
 80067c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067c6:	449b      	add	fp, r3
 80067c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067ce:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 80067d2:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 80067d6:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 80067da:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 80067de:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 80067e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80067e4:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 80067e8:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 80067ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 80067ee:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 80067f2:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 80067f6:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 80067fa:	9202      	str	r2, [sp, #8]
 80067fc:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	edd3 da01 	vldr	s27, [r3, #4]
 8006808:	9b01      	ldr	r3, [sp, #4]
 800680a:	edd0 7a00 	vldr	s15, [r0]
 800680e:	ed93 da01 	vldr	s26, [r3, #4]
 8006812:	9b02      	ldr	r3, [sp, #8]
 8006814:	edcd 7a02 	vstr	s15, [sp, #8]
 8006818:	ed93 ca01 	vldr	s24, [r3, #4]
 800681c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800681e:	eddc ca01 	vldr	s25, [ip, #4]
 8006822:	edd3 7a00 	vldr	s15, [r3]
 8006826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006828:	edcd 7a01 	vstr	s15, [sp, #4]
 800682c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8006830:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8006834:	9200      	str	r2, [sp, #0]
 8006836:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 800683a:	edd3 7a00 	vldr	s15, [r3]
 800683e:	ed92 fa01 	vldr	s30, [r2, #4]
 8006842:	9a00      	ldr	r2, [sp, #0]
 8006844:	edd1 ea01 	vldr	s29, [r1, #4]
 8006848:	ed92 ea01 	vldr	s28, [r2, #4]
 800684c:	edd7 ba00 	vldr	s23, [r7]
 8006850:	edd6 aa00 	vldr	s21, [r6]
 8006854:	ed95 aa00 	vldr	s20, [r5]
 8006858:	edd4 9a00 	vldr	s19, [r4]
 800685c:	edcd 7a00 	vstr	s15, [sp]
 8006860:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006864:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8006868:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 800686c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8006870:	46c4      	mov	ip, r8
 8006872:	e001      	b.n	8006878 <arm_radix8_butterfly_f32+0x318>
 8006874:	3f3504f3 	.word	0x3f3504f3
 8006878:	ed91 6a00 	vldr	s12, [r1]
 800687c:	ed93 5a00 	vldr	s10, [r3]
 8006880:	edd0 fa00 	vldr	s31, [r0]
 8006884:	edd4 7a00 	vldr	s15, [r4]
 8006888:	ed95 7a00 	vldr	s14, [r5]
 800688c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006890:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006894:	ed92 2a00 	vldr	s4, [r2]
 8006898:	ed96 0a00 	vldr	s0, [r6]
 800689c:	ee33 8a85 	vadd.f32	s16, s7, s10
 80068a0:	ee32 1a06 	vadd.f32	s2, s4, s12
 80068a4:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80068a8:	ee77 4a87 	vadd.f32	s9, s15, s14
 80068ac:	ee78 1a04 	vadd.f32	s3, s16, s8
 80068b0:	ee71 6a24 	vadd.f32	s13, s2, s9
 80068b4:	ee32 2a46 	vsub.f32	s4, s4, s12
 80068b8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80068bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068c0:	ed06 6a01 	vstr	s12, [r6, #-4]
 80068c4:	edd4 8a01 	vldr	s17, [r4, #4]
 80068c8:	ed92 9a01 	vldr	s18, [r2, #4]
 80068cc:	edd7 0a00 	vldr	s1, [r7]
 80068d0:	edd1 2a01 	vldr	s5, [r1, #4]
 80068d4:	ed95 7a01 	vldr	s14, [r5, #4]
 80068d8:	ed93 6a01 	vldr	s12, [r3, #4]
 80068dc:	edd0 5a01 	vldr	s11, [r0, #4]
 80068e0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80068e4:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80068e8:	ee39 5a62 	vsub.f32	s10, s18, s5
 80068ec:	ee78 fac7 	vsub.f32	s31, s17, s14
 80068f0:	ee38 4a44 	vsub.f32	s8, s16, s8
 80068f4:	ee38 7a87 	vadd.f32	s14, s17, s14
 80068f8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80068fc:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006900:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006904:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006908:	ee30 2a06 	vadd.f32	s4, s0, s12
 800690c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006910:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006914:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8006918:	ee32 1a08 	vadd.f32	s2, s4, s16
 800691c:	ee72 fa87 	vadd.f32	s31, s5, s14
 8006920:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006924:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006928:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800692c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006930:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006934:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006938:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800693c:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8006940:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006944:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006948:	ee74 0a22 	vadd.f32	s1, s8, s5
 800694c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006950:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006954:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006958:	ee32 4a64 	vsub.f32	s8, s4, s9
 800695c:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006960:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006964:	ee33 9a49 	vsub.f32	s18, s6, s18
 8006968:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800696c:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006970:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006974:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8006978:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800697c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8006980:	ee30 7a68 	vsub.f32	s14, s0, s17
 8006984:	ee35 8a03 	vadd.f32	s16, s10, s6
 8006988:	ee38 0a80 	vadd.f32	s0, s17, s0
 800698c:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006990:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8006994:	ed9d 2a00 	vldr	s4, [sp]
 8006998:	eddd 1a01 	vldr	s3, [sp, #4]
 800699c:	ee35 5a43 	vsub.f32	s10, s10, s6
 80069a0:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80069a4:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80069a8:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80069ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80069b0:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80069b4:	ee76 5a49 	vsub.f32	s11, s12, s18
 80069b8:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80069bc:	ee39 6a06 	vadd.f32	s12, s18, s12
 80069c0:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80069c4:	ee21 4a84 	vmul.f32	s8, s3, s8
 80069c8:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80069cc:	ee22 7a07 	vmul.f32	s14, s4, s14
 80069d0:	ee22 2a08 	vmul.f32	s4, s4, s16
 80069d4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80069d8:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80069dc:	ee31 1a09 	vadd.f32	s2, s2, s18
 80069e0:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80069e4:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80069e8:	ee74 0a60 	vsub.f32	s1, s8, s1
 80069ec:	ee37 7a48 	vsub.f32	s14, s14, s16
 80069f0:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80069f4:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80069f8:	ee72 1a21 	vadd.f32	s3, s4, s3
 80069fc:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8006a00:	ee38 2a89 	vadd.f32	s4, s17, s18
 8006a04:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8006a08:	ee38 8a04 	vadd.f32	s16, s16, s8
 8006a0c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006a10:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8006a14:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8006a18:	eddd 5a02 	vldr	s11, [sp, #8]
 8006a1c:	edc6 fa00 	vstr	s31, [r6]
 8006a20:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8006a24:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006a28:	ee30 0a45 	vsub.f32	s0, s0, s10
 8006a2c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8006a30:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8006a34:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8006a38:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8006a3c:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8006a40:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006a44:	ee74 4a89 	vadd.f32	s9, s9, s18
 8006a48:	ee34 3a43 	vsub.f32	s6, s8, s6
 8006a4c:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006a50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006a54:	44f4      	add	ip, lr
 8006a56:	45e2      	cmp	sl, ip
 8006a58:	edc3 3a00 	vstr	s7, [r3]
 8006a5c:	edc3 6a01 	vstr	s13, [r3, #4]
 8006a60:	444e      	add	r6, r9
 8006a62:	ed07 1a01 	vstr	s2, [r7, #-4]
 8006a66:	edc7 0a00 	vstr	s1, [r7]
 8006a6a:	444b      	add	r3, r9
 8006a6c:	ed80 2a00 	vstr	s4, [r0]
 8006a70:	edc0 2a01 	vstr	s5, [r0, #4]
 8006a74:	444f      	add	r7, r9
 8006a76:	edc2 1a00 	vstr	s3, [r2]
 8006a7a:	ed82 7a01 	vstr	s14, [r2, #4]
 8006a7e:	4448      	add	r0, r9
 8006a80:	ed85 8a00 	vstr	s16, [r5]
 8006a84:	ed85 0a01 	vstr	s0, [r5, #4]
 8006a88:	444a      	add	r2, r9
 8006a8a:	edc1 4a00 	vstr	s9, [r1]
 8006a8e:	444d      	add	r5, r9
 8006a90:	ed81 3a01 	vstr	s6, [r1, #4]
 8006a94:	edc4 8a00 	vstr	s17, [r4]
 8006a98:	ed84 6a01 	vstr	s12, [r4, #4]
 8006a9c:	4449      	add	r1, r9
 8006a9e:	444c      	add	r4, r9
 8006aa0:	f63f aeea 	bhi.w	8006878 <arm_radix8_butterfly_f32+0x318>
 8006aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aac:	3308      	adds	r3, #8
 8006aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab0:	9b08      	ldr	r3, [sp, #32]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	9308      	str	r3, [sp, #32]
 8006ab6:	9b07      	ldr	r3, [sp, #28]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	9307      	str	r3, [sp, #28]
 8006abc:	9b06      	ldr	r3, [sp, #24]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	9306      	str	r3, [sp, #24]
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	9305      	str	r3, [sp, #20]
 8006ac8:	9b04      	ldr	r3, [sp, #16]
 8006aca:	3308      	adds	r3, #8
 8006acc:	9304      	str	r3, [sp, #16]
 8006ace:	9b03      	ldr	r3, [sp, #12]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	9303      	str	r3, [sp, #12]
 8006ad4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ad6:	f108 0801 	add.w	r8, r8, #1
 8006ada:	4543      	cmp	r3, r8
 8006adc:	f47f ae72 	bne.w	80067c4 <arm_radix8_butterfly_f32+0x264>
 8006ae0:	469b      	mov	fp, r3
 8006ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	46d1      	mov	r9, sl
 8006aea:	930e      	str	r3, [sp, #56]	@ 0x38
 8006aec:	e547      	b.n	800657e <arm_radix8_butterfly_f32+0x1e>
 8006aee:	b013      	add	sp, #76	@ 0x4c
 8006af0:	ecbd 8b10 	vpop	{d8-d15}
 8006af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006af8 <std>:
 8006af8:	2300      	movs	r3, #0
 8006afa:	b510      	push	{r4, lr}
 8006afc:	4604      	mov	r4, r0
 8006afe:	e9c0 3300 	strd	r3, r3, [r0]
 8006b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b06:	6083      	str	r3, [r0, #8]
 8006b08:	8181      	strh	r1, [r0, #12]
 8006b0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b0c:	81c2      	strh	r2, [r0, #14]
 8006b0e:	6183      	str	r3, [r0, #24]
 8006b10:	4619      	mov	r1, r3
 8006b12:	2208      	movs	r2, #8
 8006b14:	305c      	adds	r0, #92	@ 0x5c
 8006b16:	f000 f9f9 	bl	8006f0c <memset>
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <std+0x58>)
 8006b1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <std+0x5c>)
 8006b20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b22:	4b0d      	ldr	r3, [pc, #52]	@ (8006b58 <std+0x60>)
 8006b24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <std+0x64>)
 8006b28:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <std+0x68>)
 8006b2c:	6224      	str	r4, [r4, #32]
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	d006      	beq.n	8006b40 <std+0x48>
 8006b32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b36:	4294      	cmp	r4, r2
 8006b38:	d002      	beq.n	8006b40 <std+0x48>
 8006b3a:	33d0      	adds	r3, #208	@ 0xd0
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	d105      	bne.n	8006b4c <std+0x54>
 8006b40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b48:	f000 ba58 	b.w	8006ffc <__retarget_lock_init_recursive>
 8006b4c:	bd10      	pop	{r4, pc}
 8006b4e:	bf00      	nop
 8006b50:	08006d5d 	.word	0x08006d5d
 8006b54:	08006d7f 	.word	0x08006d7f
 8006b58:	08006db7 	.word	0x08006db7
 8006b5c:	08006ddb 	.word	0x08006ddb
 8006b60:	200008a8 	.word	0x200008a8

08006b64 <stdio_exit_handler>:
 8006b64:	4a02      	ldr	r2, [pc, #8]	@ (8006b70 <stdio_exit_handler+0xc>)
 8006b66:	4903      	ldr	r1, [pc, #12]	@ (8006b74 <stdio_exit_handler+0x10>)
 8006b68:	4803      	ldr	r0, [pc, #12]	@ (8006b78 <stdio_exit_handler+0x14>)
 8006b6a:	f000 b869 	b.w	8006c40 <_fwalk_sglue>
 8006b6e:	bf00      	nop
 8006b70:	2000000c 	.word	0x2000000c
 8006b74:	0800789d 	.word	0x0800789d
 8006b78:	2000001c 	.word	0x2000001c

08006b7c <cleanup_stdio>:
 8006b7c:	6841      	ldr	r1, [r0, #4]
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb0 <cleanup_stdio+0x34>)
 8006b80:	4299      	cmp	r1, r3
 8006b82:	b510      	push	{r4, lr}
 8006b84:	4604      	mov	r4, r0
 8006b86:	d001      	beq.n	8006b8c <cleanup_stdio+0x10>
 8006b88:	f000 fe88 	bl	800789c <_fflush_r>
 8006b8c:	68a1      	ldr	r1, [r4, #8]
 8006b8e:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <cleanup_stdio+0x38>)
 8006b90:	4299      	cmp	r1, r3
 8006b92:	d002      	beq.n	8006b9a <cleanup_stdio+0x1e>
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 fe81 	bl	800789c <_fflush_r>
 8006b9a:	68e1      	ldr	r1, [r4, #12]
 8006b9c:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <cleanup_stdio+0x3c>)
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	d004      	beq.n	8006bac <cleanup_stdio+0x30>
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba8:	f000 be78 	b.w	800789c <_fflush_r>
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	bf00      	nop
 8006bb0:	200008a8 	.word	0x200008a8
 8006bb4:	20000910 	.word	0x20000910
 8006bb8:	20000978 	.word	0x20000978

08006bbc <global_stdio_init.part.0>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006bec <global_stdio_init.part.0+0x30>)
 8006bc0:	4c0b      	ldr	r4, [pc, #44]	@ (8006bf0 <global_stdio_init.part.0+0x34>)
 8006bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8006bf4 <global_stdio_init.part.0+0x38>)
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2104      	movs	r1, #4
 8006bcc:	f7ff ff94 	bl	8006af8 <std>
 8006bd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	2109      	movs	r1, #9
 8006bd8:	f7ff ff8e 	bl	8006af8 <std>
 8006bdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006be0:	2202      	movs	r2, #2
 8006be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be6:	2112      	movs	r1, #18
 8006be8:	f7ff bf86 	b.w	8006af8 <std>
 8006bec:	200009e0 	.word	0x200009e0
 8006bf0:	200008a8 	.word	0x200008a8
 8006bf4:	08006b65 	.word	0x08006b65

08006bf8 <__sfp_lock_acquire>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	@ (8006c00 <__sfp_lock_acquire+0x8>)
 8006bfa:	f000 ba00 	b.w	8006ffe <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	200009e9 	.word	0x200009e9

08006c04 <__sfp_lock_release>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__sfp_lock_release+0x8>)
 8006c06:	f000 b9fb 	b.w	8007000 <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	200009e9 	.word	0x200009e9

08006c10 <__sinit>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4604      	mov	r4, r0
 8006c14:	f7ff fff0 	bl	8006bf8 <__sfp_lock_acquire>
 8006c18:	6a23      	ldr	r3, [r4, #32]
 8006c1a:	b11b      	cbz	r3, 8006c24 <__sinit+0x14>
 8006c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c20:	f7ff bff0 	b.w	8006c04 <__sfp_lock_release>
 8006c24:	4b04      	ldr	r3, [pc, #16]	@ (8006c38 <__sinit+0x28>)
 8006c26:	6223      	str	r3, [r4, #32]
 8006c28:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <__sinit+0x2c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f5      	bne.n	8006c1c <__sinit+0xc>
 8006c30:	f7ff ffc4 	bl	8006bbc <global_stdio_init.part.0>
 8006c34:	e7f2      	b.n	8006c1c <__sinit+0xc>
 8006c36:	bf00      	nop
 8006c38:	08006b7d 	.word	0x08006b7d
 8006c3c:	200009e0 	.word	0x200009e0

08006c40 <_fwalk_sglue>:
 8006c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c44:	4607      	mov	r7, r0
 8006c46:	4688      	mov	r8, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c50:	f1b9 0901 	subs.w	r9, r9, #1
 8006c54:	d505      	bpl.n	8006c62 <_fwalk_sglue+0x22>
 8006c56:	6824      	ldr	r4, [r4, #0]
 8006c58:	2c00      	cmp	r4, #0
 8006c5a:	d1f7      	bne.n	8006c4c <_fwalk_sglue+0xc>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c62:	89ab      	ldrh	r3, [r5, #12]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d907      	bls.n	8006c78 <_fwalk_sglue+0x38>
 8006c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	d003      	beq.n	8006c78 <_fwalk_sglue+0x38>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4638      	mov	r0, r7
 8006c74:	47c0      	blx	r8
 8006c76:	4306      	orrs	r6, r0
 8006c78:	3568      	adds	r5, #104	@ 0x68
 8006c7a:	e7e9      	b.n	8006c50 <_fwalk_sglue+0x10>

08006c7c <iprintf>:
 8006c7c:	b40f      	push	{r0, r1, r2, r3}
 8006c7e:	b507      	push	{r0, r1, r2, lr}
 8006c80:	4906      	ldr	r1, [pc, #24]	@ (8006c9c <iprintf+0x20>)
 8006c82:	ab04      	add	r3, sp, #16
 8006c84:	6808      	ldr	r0, [r1, #0]
 8006c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c8a:	6881      	ldr	r1, [r0, #8]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	f000 fadb 	bl	8007248 <_vfiprintf_r>
 8006c92:	b003      	add	sp, #12
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	b004      	add	sp, #16
 8006c9a:	4770      	bx	lr
 8006c9c:	20000018 	.word	0x20000018

08006ca0 <_puts_r>:
 8006ca0:	6a03      	ldr	r3, [r0, #32]
 8006ca2:	b570      	push	{r4, r5, r6, lr}
 8006ca4:	6884      	ldr	r4, [r0, #8]
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	460e      	mov	r6, r1
 8006caa:	b90b      	cbnz	r3, 8006cb0 <_puts_r+0x10>
 8006cac:	f7ff ffb0 	bl	8006c10 <__sinit>
 8006cb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cb2:	07db      	lsls	r3, r3, #31
 8006cb4:	d405      	bmi.n	8006cc2 <_puts_r+0x22>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	0598      	lsls	r0, r3, #22
 8006cba:	d402      	bmi.n	8006cc2 <_puts_r+0x22>
 8006cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cbe:	f000 f99e 	bl	8006ffe <__retarget_lock_acquire_recursive>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	0719      	lsls	r1, r3, #28
 8006cc6:	d502      	bpl.n	8006cce <_puts_r+0x2e>
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d135      	bne.n	8006d3a <_puts_r+0x9a>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f000 f8c5 	bl	8006e60 <__swsetup_r>
 8006cd6:	b380      	cbz	r0, 8006d3a <_puts_r+0x9a>
 8006cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006cdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cde:	07da      	lsls	r2, r3, #31
 8006ce0:	d405      	bmi.n	8006cee <_puts_r+0x4e>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	059b      	lsls	r3, r3, #22
 8006ce6:	d402      	bmi.n	8006cee <_puts_r+0x4e>
 8006ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cea:	f000 f989 	bl	8007000 <__retarget_lock_release_recursive>
 8006cee:	4628      	mov	r0, r5
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da04      	bge.n	8006d00 <_puts_r+0x60>
 8006cf6:	69a2      	ldr	r2, [r4, #24]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	dc17      	bgt.n	8006d2c <_puts_r+0x8c>
 8006cfc:	290a      	cmp	r1, #10
 8006cfe:	d015      	beq.n	8006d2c <_puts_r+0x8c>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	6022      	str	r2, [r4, #0]
 8006d06:	7019      	strb	r1, [r3, #0]
 8006d08:	68a3      	ldr	r3, [r4, #8]
 8006d0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	60a3      	str	r3, [r4, #8]
 8006d12:	2900      	cmp	r1, #0
 8006d14:	d1ed      	bne.n	8006cf2 <_puts_r+0x52>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da11      	bge.n	8006d3e <_puts_r+0x9e>
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	210a      	movs	r1, #10
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 f85f 	bl	8006de2 <__swbuf_r>
 8006d24:	3001      	adds	r0, #1
 8006d26:	d0d7      	beq.n	8006cd8 <_puts_r+0x38>
 8006d28:	250a      	movs	r5, #10
 8006d2a:	e7d7      	b.n	8006cdc <_puts_r+0x3c>
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f857 	bl	8006de2 <__swbuf_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1e7      	bne.n	8006d08 <_puts_r+0x68>
 8006d38:	e7ce      	b.n	8006cd8 <_puts_r+0x38>
 8006d3a:	3e01      	subs	r6, #1
 8006d3c:	e7e4      	b.n	8006d08 <_puts_r+0x68>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	6022      	str	r2, [r4, #0]
 8006d44:	220a      	movs	r2, #10
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	e7ee      	b.n	8006d28 <_puts_r+0x88>
	...

08006d4c <puts>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	@ (8006d58 <puts+0xc>)
 8006d4e:	4601      	mov	r1, r0
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	f7ff bfa5 	b.w	8006ca0 <_puts_r>
 8006d56:	bf00      	nop
 8006d58:	20000018 	.word	0x20000018

08006d5c <__sread>:
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	460c      	mov	r4, r1
 8006d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d64:	f000 f8fc 	bl	8006f60 <_read_r>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	bfab      	itete	ge
 8006d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d70:	181b      	addge	r3, r3, r0
 8006d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d76:	bfac      	ite	ge
 8006d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d7a:	81a3      	strhlt	r3, [r4, #12]
 8006d7c:	bd10      	pop	{r4, pc}

08006d7e <__swrite>:
 8006d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d82:	461f      	mov	r7, r3
 8006d84:	898b      	ldrh	r3, [r1, #12]
 8006d86:	05db      	lsls	r3, r3, #23
 8006d88:	4605      	mov	r5, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	4616      	mov	r6, r2
 8006d8e:	d505      	bpl.n	8006d9c <__swrite+0x1e>
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	2302      	movs	r3, #2
 8006d96:	2200      	movs	r2, #0
 8006d98:	f000 f8d0 	bl	8006f3c <_lseek_r>
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006da6:	81a3      	strh	r3, [r4, #12]
 8006da8:	4632      	mov	r2, r6
 8006daa:	463b      	mov	r3, r7
 8006dac:	4628      	mov	r0, r5
 8006dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006db2:	f000 b8e7 	b.w	8006f84 <_write_r>

08006db6 <__sseek>:
 8006db6:	b510      	push	{r4, lr}
 8006db8:	460c      	mov	r4, r1
 8006dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dbe:	f000 f8bd 	bl	8006f3c <_lseek_r>
 8006dc2:	1c43      	adds	r3, r0, #1
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	bf15      	itete	ne
 8006dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dd2:	81a3      	strheq	r3, [r4, #12]
 8006dd4:	bf18      	it	ne
 8006dd6:	81a3      	strhne	r3, [r4, #12]
 8006dd8:	bd10      	pop	{r4, pc}

08006dda <__sclose>:
 8006dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dde:	f000 b89d 	b.w	8006f1c <_close_r>

08006de2 <__swbuf_r>:
 8006de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de4:	460e      	mov	r6, r1
 8006de6:	4614      	mov	r4, r2
 8006de8:	4605      	mov	r5, r0
 8006dea:	b118      	cbz	r0, 8006df4 <__swbuf_r+0x12>
 8006dec:	6a03      	ldr	r3, [r0, #32]
 8006dee:	b90b      	cbnz	r3, 8006df4 <__swbuf_r+0x12>
 8006df0:	f7ff ff0e 	bl	8006c10 <__sinit>
 8006df4:	69a3      	ldr	r3, [r4, #24]
 8006df6:	60a3      	str	r3, [r4, #8]
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	071a      	lsls	r2, r3, #28
 8006dfc:	d501      	bpl.n	8006e02 <__swbuf_r+0x20>
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	b943      	cbnz	r3, 8006e14 <__swbuf_r+0x32>
 8006e02:	4621      	mov	r1, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 f82b 	bl	8006e60 <__swsetup_r>
 8006e0a:	b118      	cbz	r0, 8006e14 <__swbuf_r+0x32>
 8006e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e10:	4638      	mov	r0, r7
 8006e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	6922      	ldr	r2, [r4, #16]
 8006e18:	1a98      	subs	r0, r3, r2
 8006e1a:	6963      	ldr	r3, [r4, #20]
 8006e1c:	b2f6      	uxtb	r6, r6
 8006e1e:	4283      	cmp	r3, r0
 8006e20:	4637      	mov	r7, r6
 8006e22:	dc05      	bgt.n	8006e30 <__swbuf_r+0x4e>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 fd38 	bl	800789c <_fflush_r>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d1ed      	bne.n	8006e0c <__swbuf_r+0x2a>
 8006e30:	68a3      	ldr	r3, [r4, #8]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	60a3      	str	r3, [r4, #8]
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	6022      	str	r2, [r4, #0]
 8006e3c:	701e      	strb	r6, [r3, #0]
 8006e3e:	6962      	ldr	r2, [r4, #20]
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d004      	beq.n	8006e50 <__swbuf_r+0x6e>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	07db      	lsls	r3, r3, #31
 8006e4a:	d5e1      	bpl.n	8006e10 <__swbuf_r+0x2e>
 8006e4c:	2e0a      	cmp	r6, #10
 8006e4e:	d1df      	bne.n	8006e10 <__swbuf_r+0x2e>
 8006e50:	4621      	mov	r1, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	f000 fd22 	bl	800789c <_fflush_r>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d0d9      	beq.n	8006e10 <__swbuf_r+0x2e>
 8006e5c:	e7d6      	b.n	8006e0c <__swbuf_r+0x2a>
	...

08006e60 <__swsetup_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4b29      	ldr	r3, [pc, #164]	@ (8006f08 <__swsetup_r+0xa8>)
 8006e64:	4605      	mov	r5, r0
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	460c      	mov	r4, r1
 8006e6a:	b118      	cbz	r0, 8006e74 <__swsetup_r+0x14>
 8006e6c:	6a03      	ldr	r3, [r0, #32]
 8006e6e:	b90b      	cbnz	r3, 8006e74 <__swsetup_r+0x14>
 8006e70:	f7ff fece 	bl	8006c10 <__sinit>
 8006e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e78:	0719      	lsls	r1, r3, #28
 8006e7a:	d422      	bmi.n	8006ec2 <__swsetup_r+0x62>
 8006e7c:	06da      	lsls	r2, r3, #27
 8006e7e:	d407      	bmi.n	8006e90 <__swsetup_r+0x30>
 8006e80:	2209      	movs	r2, #9
 8006e82:	602a      	str	r2, [r5, #0]
 8006e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8e:	e033      	b.n	8006ef8 <__swsetup_r+0x98>
 8006e90:	0758      	lsls	r0, r3, #29
 8006e92:	d512      	bpl.n	8006eba <__swsetup_r+0x5a>
 8006e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e96:	b141      	cbz	r1, 8006eaa <__swsetup_r+0x4a>
 8006e98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	d002      	beq.n	8006ea6 <__swsetup_r+0x46>
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 f8af 	bl	8007004 <_free_r>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6063      	str	r3, [r4, #4]
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f043 0308 	orr.w	r3, r3, #8
 8006ec0:	81a3      	strh	r3, [r4, #12]
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	b94b      	cbnz	r3, 8006eda <__swsetup_r+0x7a>
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ed0:	d003      	beq.n	8006eda <__swsetup_r+0x7a>
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f000 fd2f 	bl	8007938 <__smakebuf_r>
 8006eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ede:	f013 0201 	ands.w	r2, r3, #1
 8006ee2:	d00a      	beq.n	8006efa <__swsetup_r+0x9a>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	60a2      	str	r2, [r4, #8]
 8006ee8:	6962      	ldr	r2, [r4, #20]
 8006eea:	4252      	negs	r2, r2
 8006eec:	61a2      	str	r2, [r4, #24]
 8006eee:	6922      	ldr	r2, [r4, #16]
 8006ef0:	b942      	cbnz	r2, 8006f04 <__swsetup_r+0xa4>
 8006ef2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ef6:	d1c5      	bne.n	8006e84 <__swsetup_r+0x24>
 8006ef8:	bd38      	pop	{r3, r4, r5, pc}
 8006efa:	0799      	lsls	r1, r3, #30
 8006efc:	bf58      	it	pl
 8006efe:	6962      	ldrpl	r2, [r4, #20]
 8006f00:	60a2      	str	r2, [r4, #8]
 8006f02:	e7f4      	b.n	8006eee <__swsetup_r+0x8e>
 8006f04:	2000      	movs	r0, #0
 8006f06:	e7f7      	b.n	8006ef8 <__swsetup_r+0x98>
 8006f08:	20000018 	.word	0x20000018

08006f0c <memset>:
 8006f0c:	4402      	add	r2, r0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d100      	bne.n	8006f16 <memset+0xa>
 8006f14:	4770      	bx	lr
 8006f16:	f803 1b01 	strb.w	r1, [r3], #1
 8006f1a:	e7f9      	b.n	8006f10 <memset+0x4>

08006f1c <_close_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d06      	ldr	r5, [pc, #24]	@ (8006f38 <_close_r+0x1c>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fa fb89 	bl	800163e <_close>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_close_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_close_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	200009e4 	.word	0x200009e4

08006f3c <_lseek_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d07      	ldr	r5, [pc, #28]	@ (8006f5c <_lseek_r+0x20>)
 8006f40:	4604      	mov	r4, r0
 8006f42:	4608      	mov	r0, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	2200      	movs	r2, #0
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f7fa fb9e 	bl	800168c <_lseek>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_lseek_r+0x1e>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_lseek_r+0x1e>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	200009e4 	.word	0x200009e4

08006f60 <_read_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	@ (8006f80 <_read_r+0x20>)
 8006f64:	4604      	mov	r4, r0
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa fb48 	bl	8001604 <_read>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_read_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_read_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	200009e4 	.word	0x200009e4

08006f84 <_write_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d07      	ldr	r5, [pc, #28]	@ (8006fa4 <_write_r+0x20>)
 8006f88:	4604      	mov	r4, r0
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	602a      	str	r2, [r5, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f7f9 fccf 	bl	8000936 <_write>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_write_r+0x1e>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_write_r+0x1e>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	200009e4 	.word	0x200009e4

08006fa8 <__errno>:
 8006fa8:	4b01      	ldr	r3, [pc, #4]	@ (8006fb0 <__errno+0x8>)
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000018 	.word	0x20000018

08006fb4 <__libc_init_array>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8006fec <__libc_init_array+0x38>)
 8006fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ff0 <__libc_init_array+0x3c>)
 8006fba:	1b64      	subs	r4, r4, r5
 8006fbc:	10a4      	asrs	r4, r4, #2
 8006fbe:	2600      	movs	r6, #0
 8006fc0:	42a6      	cmp	r6, r4
 8006fc2:	d109      	bne.n	8006fd8 <__libc_init_array+0x24>
 8006fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ff4 <__libc_init_array+0x40>)
 8006fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ff8 <__libc_init_array+0x44>)
 8006fc8:	f000 fd46 	bl	8007a58 <_init>
 8006fcc:	1b64      	subs	r4, r4, r5
 8006fce:	10a4      	asrs	r4, r4, #2
 8006fd0:	2600      	movs	r6, #0
 8006fd2:	42a6      	cmp	r6, r4
 8006fd4:	d105      	bne.n	8006fe2 <__libc_init_array+0x2e>
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fdc:	4798      	blx	r3
 8006fde:	3601      	adds	r6, #1
 8006fe0:	e7ee      	b.n	8006fc0 <__libc_init_array+0xc>
 8006fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe6:	4798      	blx	r3
 8006fe8:	3601      	adds	r6, #1
 8006fea:	e7f2      	b.n	8006fd2 <__libc_init_array+0x1e>
 8006fec:	08024fe0 	.word	0x08024fe0
 8006ff0:	08024fe0 	.word	0x08024fe0
 8006ff4:	08024fe0 	.word	0x08024fe0
 8006ff8:	08024fe4 	.word	0x08024fe4

08006ffc <__retarget_lock_init_recursive>:
 8006ffc:	4770      	bx	lr

08006ffe <__retarget_lock_acquire_recursive>:
 8006ffe:	4770      	bx	lr

08007000 <__retarget_lock_release_recursive>:
 8007000:	4770      	bx	lr
	...

08007004 <_free_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4605      	mov	r5, r0
 8007008:	2900      	cmp	r1, #0
 800700a:	d041      	beq.n	8007090 <_free_r+0x8c>
 800700c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007010:	1f0c      	subs	r4, r1, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	bfb8      	it	lt
 8007016:	18e4      	addlt	r4, r4, r3
 8007018:	f000 f8e0 	bl	80071dc <__malloc_lock>
 800701c:	4a1d      	ldr	r2, [pc, #116]	@ (8007094 <_free_r+0x90>)
 800701e:	6813      	ldr	r3, [r2, #0]
 8007020:	b933      	cbnz	r3, 8007030 <_free_r+0x2c>
 8007022:	6063      	str	r3, [r4, #4]
 8007024:	6014      	str	r4, [r2, #0]
 8007026:	4628      	mov	r0, r5
 8007028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800702c:	f000 b8dc 	b.w	80071e8 <__malloc_unlock>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d908      	bls.n	8007046 <_free_r+0x42>
 8007034:	6820      	ldr	r0, [r4, #0]
 8007036:	1821      	adds	r1, r4, r0
 8007038:	428b      	cmp	r3, r1
 800703a:	bf01      	itttt	eq
 800703c:	6819      	ldreq	r1, [r3, #0]
 800703e:	685b      	ldreq	r3, [r3, #4]
 8007040:	1809      	addeq	r1, r1, r0
 8007042:	6021      	streq	r1, [r4, #0]
 8007044:	e7ed      	b.n	8007022 <_free_r+0x1e>
 8007046:	461a      	mov	r2, r3
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	b10b      	cbz	r3, 8007050 <_free_r+0x4c>
 800704c:	42a3      	cmp	r3, r4
 800704e:	d9fa      	bls.n	8007046 <_free_r+0x42>
 8007050:	6811      	ldr	r1, [r2, #0]
 8007052:	1850      	adds	r0, r2, r1
 8007054:	42a0      	cmp	r0, r4
 8007056:	d10b      	bne.n	8007070 <_free_r+0x6c>
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	4401      	add	r1, r0
 800705c:	1850      	adds	r0, r2, r1
 800705e:	4283      	cmp	r3, r0
 8007060:	6011      	str	r1, [r2, #0]
 8007062:	d1e0      	bne.n	8007026 <_free_r+0x22>
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	6053      	str	r3, [r2, #4]
 800706a:	4408      	add	r0, r1
 800706c:	6010      	str	r0, [r2, #0]
 800706e:	e7da      	b.n	8007026 <_free_r+0x22>
 8007070:	d902      	bls.n	8007078 <_free_r+0x74>
 8007072:	230c      	movs	r3, #12
 8007074:	602b      	str	r3, [r5, #0]
 8007076:	e7d6      	b.n	8007026 <_free_r+0x22>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	1821      	adds	r1, r4, r0
 800707c:	428b      	cmp	r3, r1
 800707e:	bf04      	itt	eq
 8007080:	6819      	ldreq	r1, [r3, #0]
 8007082:	685b      	ldreq	r3, [r3, #4]
 8007084:	6063      	str	r3, [r4, #4]
 8007086:	bf04      	itt	eq
 8007088:	1809      	addeq	r1, r1, r0
 800708a:	6021      	streq	r1, [r4, #0]
 800708c:	6054      	str	r4, [r2, #4]
 800708e:	e7ca      	b.n	8007026 <_free_r+0x22>
 8007090:	bd38      	pop	{r3, r4, r5, pc}
 8007092:	bf00      	nop
 8007094:	200009f0 	.word	0x200009f0

08007098 <sbrk_aligned>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4e0f      	ldr	r6, [pc, #60]	@ (80070d8 <sbrk_aligned+0x40>)
 800709c:	460c      	mov	r4, r1
 800709e:	6831      	ldr	r1, [r6, #0]
 80070a0:	4605      	mov	r5, r0
 80070a2:	b911      	cbnz	r1, 80070aa <sbrk_aligned+0x12>
 80070a4:	f000 fca6 	bl	80079f4 <_sbrk_r>
 80070a8:	6030      	str	r0, [r6, #0]
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 fca1 	bl	80079f4 <_sbrk_r>
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	d103      	bne.n	80070be <sbrk_aligned+0x26>
 80070b6:	f04f 34ff 	mov.w	r4, #4294967295
 80070ba:	4620      	mov	r0, r4
 80070bc:	bd70      	pop	{r4, r5, r6, pc}
 80070be:	1cc4      	adds	r4, r0, #3
 80070c0:	f024 0403 	bic.w	r4, r4, #3
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	d0f8      	beq.n	80070ba <sbrk_aligned+0x22>
 80070c8:	1a21      	subs	r1, r4, r0
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 fc92 	bl	80079f4 <_sbrk_r>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1f2      	bne.n	80070ba <sbrk_aligned+0x22>
 80070d4:	e7ef      	b.n	80070b6 <sbrk_aligned+0x1e>
 80070d6:	bf00      	nop
 80070d8:	200009ec 	.word	0x200009ec

080070dc <_malloc_r>:
 80070dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e0:	1ccd      	adds	r5, r1, #3
 80070e2:	f025 0503 	bic.w	r5, r5, #3
 80070e6:	3508      	adds	r5, #8
 80070e8:	2d0c      	cmp	r5, #12
 80070ea:	bf38      	it	cc
 80070ec:	250c      	movcc	r5, #12
 80070ee:	2d00      	cmp	r5, #0
 80070f0:	4606      	mov	r6, r0
 80070f2:	db01      	blt.n	80070f8 <_malloc_r+0x1c>
 80070f4:	42a9      	cmp	r1, r5
 80070f6:	d904      	bls.n	8007102 <_malloc_r+0x26>
 80070f8:	230c      	movs	r3, #12
 80070fa:	6033      	str	r3, [r6, #0]
 80070fc:	2000      	movs	r0, #0
 80070fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071d8 <_malloc_r+0xfc>
 8007106:	f000 f869 	bl	80071dc <__malloc_lock>
 800710a:	f8d8 3000 	ldr.w	r3, [r8]
 800710e:	461c      	mov	r4, r3
 8007110:	bb44      	cbnz	r4, 8007164 <_malloc_r+0x88>
 8007112:	4629      	mov	r1, r5
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff ffbf 	bl	8007098 <sbrk_aligned>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	4604      	mov	r4, r0
 800711e:	d158      	bne.n	80071d2 <_malloc_r+0xf6>
 8007120:	f8d8 4000 	ldr.w	r4, [r8]
 8007124:	4627      	mov	r7, r4
 8007126:	2f00      	cmp	r7, #0
 8007128:	d143      	bne.n	80071b2 <_malloc_r+0xd6>
 800712a:	2c00      	cmp	r4, #0
 800712c:	d04b      	beq.n	80071c6 <_malloc_r+0xea>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	4639      	mov	r1, r7
 8007132:	4630      	mov	r0, r6
 8007134:	eb04 0903 	add.w	r9, r4, r3
 8007138:	f000 fc5c 	bl	80079f4 <_sbrk_r>
 800713c:	4581      	cmp	r9, r0
 800713e:	d142      	bne.n	80071c6 <_malloc_r+0xea>
 8007140:	6821      	ldr	r1, [r4, #0]
 8007142:	1a6d      	subs	r5, r5, r1
 8007144:	4629      	mov	r1, r5
 8007146:	4630      	mov	r0, r6
 8007148:	f7ff ffa6 	bl	8007098 <sbrk_aligned>
 800714c:	3001      	adds	r0, #1
 800714e:	d03a      	beq.n	80071c6 <_malloc_r+0xea>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	442b      	add	r3, r5
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	f8d8 3000 	ldr.w	r3, [r8]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	bb62      	cbnz	r2, 80071b8 <_malloc_r+0xdc>
 800715e:	f8c8 7000 	str.w	r7, [r8]
 8007162:	e00f      	b.n	8007184 <_malloc_r+0xa8>
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	1b52      	subs	r2, r2, r5
 8007168:	d420      	bmi.n	80071ac <_malloc_r+0xd0>
 800716a:	2a0b      	cmp	r2, #11
 800716c:	d917      	bls.n	800719e <_malloc_r+0xc2>
 800716e:	1961      	adds	r1, r4, r5
 8007170:	42a3      	cmp	r3, r4
 8007172:	6025      	str	r5, [r4, #0]
 8007174:	bf18      	it	ne
 8007176:	6059      	strne	r1, [r3, #4]
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	bf08      	it	eq
 800717c:	f8c8 1000 	streq.w	r1, [r8]
 8007180:	5162      	str	r2, [r4, r5]
 8007182:	604b      	str	r3, [r1, #4]
 8007184:	4630      	mov	r0, r6
 8007186:	f000 f82f 	bl	80071e8 <__malloc_unlock>
 800718a:	f104 000b 	add.w	r0, r4, #11
 800718e:	1d23      	adds	r3, r4, #4
 8007190:	f020 0007 	bic.w	r0, r0, #7
 8007194:	1ac2      	subs	r2, r0, r3
 8007196:	bf1c      	itt	ne
 8007198:	1a1b      	subne	r3, r3, r0
 800719a:	50a3      	strne	r3, [r4, r2]
 800719c:	e7af      	b.n	80070fe <_malloc_r+0x22>
 800719e:	6862      	ldr	r2, [r4, #4]
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	bf0c      	ite	eq
 80071a4:	f8c8 2000 	streq.w	r2, [r8]
 80071a8:	605a      	strne	r2, [r3, #4]
 80071aa:	e7eb      	b.n	8007184 <_malloc_r+0xa8>
 80071ac:	4623      	mov	r3, r4
 80071ae:	6864      	ldr	r4, [r4, #4]
 80071b0:	e7ae      	b.n	8007110 <_malloc_r+0x34>
 80071b2:	463c      	mov	r4, r7
 80071b4:	687f      	ldr	r7, [r7, #4]
 80071b6:	e7b6      	b.n	8007126 <_malloc_r+0x4a>
 80071b8:	461a      	mov	r2, r3
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	42a3      	cmp	r3, r4
 80071be:	d1fb      	bne.n	80071b8 <_malloc_r+0xdc>
 80071c0:	2300      	movs	r3, #0
 80071c2:	6053      	str	r3, [r2, #4]
 80071c4:	e7de      	b.n	8007184 <_malloc_r+0xa8>
 80071c6:	230c      	movs	r3, #12
 80071c8:	6033      	str	r3, [r6, #0]
 80071ca:	4630      	mov	r0, r6
 80071cc:	f000 f80c 	bl	80071e8 <__malloc_unlock>
 80071d0:	e794      	b.n	80070fc <_malloc_r+0x20>
 80071d2:	6005      	str	r5, [r0, #0]
 80071d4:	e7d6      	b.n	8007184 <_malloc_r+0xa8>
 80071d6:	bf00      	nop
 80071d8:	200009f0 	.word	0x200009f0

080071dc <__malloc_lock>:
 80071dc:	4801      	ldr	r0, [pc, #4]	@ (80071e4 <__malloc_lock+0x8>)
 80071de:	f7ff bf0e 	b.w	8006ffe <__retarget_lock_acquire_recursive>
 80071e2:	bf00      	nop
 80071e4:	200009e8 	.word	0x200009e8

080071e8 <__malloc_unlock>:
 80071e8:	4801      	ldr	r0, [pc, #4]	@ (80071f0 <__malloc_unlock+0x8>)
 80071ea:	f7ff bf09 	b.w	8007000 <__retarget_lock_release_recursive>
 80071ee:	bf00      	nop
 80071f0:	200009e8 	.word	0x200009e8

080071f4 <__sfputc_r>:
 80071f4:	6893      	ldr	r3, [r2, #8]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	b410      	push	{r4}
 80071fc:	6093      	str	r3, [r2, #8]
 80071fe:	da08      	bge.n	8007212 <__sfputc_r+0x1e>
 8007200:	6994      	ldr	r4, [r2, #24]
 8007202:	42a3      	cmp	r3, r4
 8007204:	db01      	blt.n	800720a <__sfputc_r+0x16>
 8007206:	290a      	cmp	r1, #10
 8007208:	d103      	bne.n	8007212 <__sfputc_r+0x1e>
 800720a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720e:	f7ff bde8 	b.w	8006de2 <__swbuf_r>
 8007212:	6813      	ldr	r3, [r2, #0]
 8007214:	1c58      	adds	r0, r3, #1
 8007216:	6010      	str	r0, [r2, #0]
 8007218:	7019      	strb	r1, [r3, #0]
 800721a:	4608      	mov	r0, r1
 800721c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007220:	4770      	bx	lr

08007222 <__sfputs_r>:
 8007222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007224:	4606      	mov	r6, r0
 8007226:	460f      	mov	r7, r1
 8007228:	4614      	mov	r4, r2
 800722a:	18d5      	adds	r5, r2, r3
 800722c:	42ac      	cmp	r4, r5
 800722e:	d101      	bne.n	8007234 <__sfputs_r+0x12>
 8007230:	2000      	movs	r0, #0
 8007232:	e007      	b.n	8007244 <__sfputs_r+0x22>
 8007234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007238:	463a      	mov	r2, r7
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff ffda 	bl	80071f4 <__sfputc_r>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d1f3      	bne.n	800722c <__sfputs_r+0xa>
 8007244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007248 <_vfiprintf_r>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	460d      	mov	r5, r1
 800724e:	b09d      	sub	sp, #116	@ 0x74
 8007250:	4614      	mov	r4, r2
 8007252:	4698      	mov	r8, r3
 8007254:	4606      	mov	r6, r0
 8007256:	b118      	cbz	r0, 8007260 <_vfiprintf_r+0x18>
 8007258:	6a03      	ldr	r3, [r0, #32]
 800725a:	b90b      	cbnz	r3, 8007260 <_vfiprintf_r+0x18>
 800725c:	f7ff fcd8 	bl	8006c10 <__sinit>
 8007260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007262:	07d9      	lsls	r1, r3, #31
 8007264:	d405      	bmi.n	8007272 <_vfiprintf_r+0x2a>
 8007266:	89ab      	ldrh	r3, [r5, #12]
 8007268:	059a      	lsls	r2, r3, #22
 800726a:	d402      	bmi.n	8007272 <_vfiprintf_r+0x2a>
 800726c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800726e:	f7ff fec6 	bl	8006ffe <__retarget_lock_acquire_recursive>
 8007272:	89ab      	ldrh	r3, [r5, #12]
 8007274:	071b      	lsls	r3, r3, #28
 8007276:	d501      	bpl.n	800727c <_vfiprintf_r+0x34>
 8007278:	692b      	ldr	r3, [r5, #16]
 800727a:	b99b      	cbnz	r3, 80072a4 <_vfiprintf_r+0x5c>
 800727c:	4629      	mov	r1, r5
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff fdee 	bl	8006e60 <__swsetup_r>
 8007284:	b170      	cbz	r0, 80072a4 <_vfiprintf_r+0x5c>
 8007286:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007288:	07dc      	lsls	r4, r3, #31
 800728a:	d504      	bpl.n	8007296 <_vfiprintf_r+0x4e>
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	b01d      	add	sp, #116	@ 0x74
 8007292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007296:	89ab      	ldrh	r3, [r5, #12]
 8007298:	0598      	lsls	r0, r3, #22
 800729a:	d4f7      	bmi.n	800728c <_vfiprintf_r+0x44>
 800729c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800729e:	f7ff feaf 	bl	8007000 <__retarget_lock_release_recursive>
 80072a2:	e7f3      	b.n	800728c <_vfiprintf_r+0x44>
 80072a4:	2300      	movs	r3, #0
 80072a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072a8:	2320      	movs	r3, #32
 80072aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80072b2:	2330      	movs	r3, #48	@ 0x30
 80072b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007464 <_vfiprintf_r+0x21c>
 80072b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072bc:	f04f 0901 	mov.w	r9, #1
 80072c0:	4623      	mov	r3, r4
 80072c2:	469a      	mov	sl, r3
 80072c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c8:	b10a      	cbz	r2, 80072ce <_vfiprintf_r+0x86>
 80072ca:	2a25      	cmp	r2, #37	@ 0x25
 80072cc:	d1f9      	bne.n	80072c2 <_vfiprintf_r+0x7a>
 80072ce:	ebba 0b04 	subs.w	fp, sl, r4
 80072d2:	d00b      	beq.n	80072ec <_vfiprintf_r+0xa4>
 80072d4:	465b      	mov	r3, fp
 80072d6:	4622      	mov	r2, r4
 80072d8:	4629      	mov	r1, r5
 80072da:	4630      	mov	r0, r6
 80072dc:	f7ff ffa1 	bl	8007222 <__sfputs_r>
 80072e0:	3001      	adds	r0, #1
 80072e2:	f000 80a7 	beq.w	8007434 <_vfiprintf_r+0x1ec>
 80072e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072e8:	445a      	add	r2, fp
 80072ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80072ec:	f89a 3000 	ldrb.w	r3, [sl]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 809f 	beq.w	8007434 <_vfiprintf_r+0x1ec>
 80072f6:	2300      	movs	r3, #0
 80072f8:	f04f 32ff 	mov.w	r2, #4294967295
 80072fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007300:	f10a 0a01 	add.w	sl, sl, #1
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	9307      	str	r3, [sp, #28]
 8007308:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800730c:	931a      	str	r3, [sp, #104]	@ 0x68
 800730e:	4654      	mov	r4, sl
 8007310:	2205      	movs	r2, #5
 8007312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007316:	4853      	ldr	r0, [pc, #332]	@ (8007464 <_vfiprintf_r+0x21c>)
 8007318:	f7f8 ff62 	bl	80001e0 <memchr>
 800731c:	9a04      	ldr	r2, [sp, #16]
 800731e:	b9d8      	cbnz	r0, 8007358 <_vfiprintf_r+0x110>
 8007320:	06d1      	lsls	r1, r2, #27
 8007322:	bf44      	itt	mi
 8007324:	2320      	movmi	r3, #32
 8007326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800732a:	0713      	lsls	r3, r2, #28
 800732c:	bf44      	itt	mi
 800732e:	232b      	movmi	r3, #43	@ 0x2b
 8007330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007334:	f89a 3000 	ldrb.w	r3, [sl]
 8007338:	2b2a      	cmp	r3, #42	@ 0x2a
 800733a:	d015      	beq.n	8007368 <_vfiprintf_r+0x120>
 800733c:	9a07      	ldr	r2, [sp, #28]
 800733e:	4654      	mov	r4, sl
 8007340:	2000      	movs	r0, #0
 8007342:	f04f 0c0a 	mov.w	ip, #10
 8007346:	4621      	mov	r1, r4
 8007348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800734c:	3b30      	subs	r3, #48	@ 0x30
 800734e:	2b09      	cmp	r3, #9
 8007350:	d94b      	bls.n	80073ea <_vfiprintf_r+0x1a2>
 8007352:	b1b0      	cbz	r0, 8007382 <_vfiprintf_r+0x13a>
 8007354:	9207      	str	r2, [sp, #28]
 8007356:	e014      	b.n	8007382 <_vfiprintf_r+0x13a>
 8007358:	eba0 0308 	sub.w	r3, r0, r8
 800735c:	fa09 f303 	lsl.w	r3, r9, r3
 8007360:	4313      	orrs	r3, r2
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	46a2      	mov	sl, r4
 8007366:	e7d2      	b.n	800730e <_vfiprintf_r+0xc6>
 8007368:	9b03      	ldr	r3, [sp, #12]
 800736a:	1d19      	adds	r1, r3, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	9103      	str	r1, [sp, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	bfbb      	ittet	lt
 8007374:	425b      	neglt	r3, r3
 8007376:	f042 0202 	orrlt.w	r2, r2, #2
 800737a:	9307      	strge	r3, [sp, #28]
 800737c:	9307      	strlt	r3, [sp, #28]
 800737e:	bfb8      	it	lt
 8007380:	9204      	strlt	r2, [sp, #16]
 8007382:	7823      	ldrb	r3, [r4, #0]
 8007384:	2b2e      	cmp	r3, #46	@ 0x2e
 8007386:	d10a      	bne.n	800739e <_vfiprintf_r+0x156>
 8007388:	7863      	ldrb	r3, [r4, #1]
 800738a:	2b2a      	cmp	r3, #42	@ 0x2a
 800738c:	d132      	bne.n	80073f4 <_vfiprintf_r+0x1ac>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	1d1a      	adds	r2, r3, #4
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	9203      	str	r2, [sp, #12]
 8007396:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800739a:	3402      	adds	r4, #2
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007474 <_vfiprintf_r+0x22c>
 80073a2:	7821      	ldrb	r1, [r4, #0]
 80073a4:	2203      	movs	r2, #3
 80073a6:	4650      	mov	r0, sl
 80073a8:	f7f8 ff1a 	bl	80001e0 <memchr>
 80073ac:	b138      	cbz	r0, 80073be <_vfiprintf_r+0x176>
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	eba0 000a 	sub.w	r0, r0, sl
 80073b4:	2240      	movs	r2, #64	@ 0x40
 80073b6:	4082      	lsls	r2, r0
 80073b8:	4313      	orrs	r3, r2
 80073ba:	3401      	adds	r4, #1
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c2:	4829      	ldr	r0, [pc, #164]	@ (8007468 <_vfiprintf_r+0x220>)
 80073c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073c8:	2206      	movs	r2, #6
 80073ca:	f7f8 ff09 	bl	80001e0 <memchr>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d03f      	beq.n	8007452 <_vfiprintf_r+0x20a>
 80073d2:	4b26      	ldr	r3, [pc, #152]	@ (800746c <_vfiprintf_r+0x224>)
 80073d4:	bb1b      	cbnz	r3, 800741e <_vfiprintf_r+0x1d6>
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	3307      	adds	r3, #7
 80073da:	f023 0307 	bic.w	r3, r3, #7
 80073de:	3308      	adds	r3, #8
 80073e0:	9303      	str	r3, [sp, #12]
 80073e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e4:	443b      	add	r3, r7
 80073e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e8:	e76a      	b.n	80072c0 <_vfiprintf_r+0x78>
 80073ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ee:	460c      	mov	r4, r1
 80073f0:	2001      	movs	r0, #1
 80073f2:	e7a8      	b.n	8007346 <_vfiprintf_r+0xfe>
 80073f4:	2300      	movs	r3, #0
 80073f6:	3401      	adds	r4, #1
 80073f8:	9305      	str	r3, [sp, #20]
 80073fa:	4619      	mov	r1, r3
 80073fc:	f04f 0c0a 	mov.w	ip, #10
 8007400:	4620      	mov	r0, r4
 8007402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007406:	3a30      	subs	r2, #48	@ 0x30
 8007408:	2a09      	cmp	r2, #9
 800740a:	d903      	bls.n	8007414 <_vfiprintf_r+0x1cc>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0c6      	beq.n	800739e <_vfiprintf_r+0x156>
 8007410:	9105      	str	r1, [sp, #20]
 8007412:	e7c4      	b.n	800739e <_vfiprintf_r+0x156>
 8007414:	fb0c 2101 	mla	r1, ip, r1, r2
 8007418:	4604      	mov	r4, r0
 800741a:	2301      	movs	r3, #1
 800741c:	e7f0      	b.n	8007400 <_vfiprintf_r+0x1b8>
 800741e:	ab03      	add	r3, sp, #12
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	462a      	mov	r2, r5
 8007424:	4b12      	ldr	r3, [pc, #72]	@ (8007470 <_vfiprintf_r+0x228>)
 8007426:	a904      	add	r1, sp, #16
 8007428:	4630      	mov	r0, r6
 800742a:	f3af 8000 	nop.w
 800742e:	4607      	mov	r7, r0
 8007430:	1c78      	adds	r0, r7, #1
 8007432:	d1d6      	bne.n	80073e2 <_vfiprintf_r+0x19a>
 8007434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007436:	07d9      	lsls	r1, r3, #31
 8007438:	d405      	bmi.n	8007446 <_vfiprintf_r+0x1fe>
 800743a:	89ab      	ldrh	r3, [r5, #12]
 800743c:	059a      	lsls	r2, r3, #22
 800743e:	d402      	bmi.n	8007446 <_vfiprintf_r+0x1fe>
 8007440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007442:	f7ff fddd 	bl	8007000 <__retarget_lock_release_recursive>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	065b      	lsls	r3, r3, #25
 800744a:	f53f af1f 	bmi.w	800728c <_vfiprintf_r+0x44>
 800744e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007450:	e71e      	b.n	8007290 <_vfiprintf_r+0x48>
 8007452:	ab03      	add	r3, sp, #12
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	462a      	mov	r2, r5
 8007458:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <_vfiprintf_r+0x228>)
 800745a:	a904      	add	r1, sp, #16
 800745c:	4630      	mov	r0, r6
 800745e:	f000 f879 	bl	8007554 <_printf_i>
 8007462:	e7e4      	b.n	800742e <_vfiprintf_r+0x1e6>
 8007464:	08024fa4 	.word	0x08024fa4
 8007468:	08024fae 	.word	0x08024fae
 800746c:	00000000 	.word	0x00000000
 8007470:	08007223 	.word	0x08007223
 8007474:	08024faa 	.word	0x08024faa

08007478 <_printf_common>:
 8007478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	4616      	mov	r6, r2
 800747e:	4698      	mov	r8, r3
 8007480:	688a      	ldr	r2, [r1, #8]
 8007482:	690b      	ldr	r3, [r1, #16]
 8007484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007488:	4293      	cmp	r3, r2
 800748a:	bfb8      	it	lt
 800748c:	4613      	movlt	r3, r2
 800748e:	6033      	str	r3, [r6, #0]
 8007490:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007494:	4607      	mov	r7, r0
 8007496:	460c      	mov	r4, r1
 8007498:	b10a      	cbz	r2, 800749e <_printf_common+0x26>
 800749a:	3301      	adds	r3, #1
 800749c:	6033      	str	r3, [r6, #0]
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	0699      	lsls	r1, r3, #26
 80074a2:	bf42      	ittt	mi
 80074a4:	6833      	ldrmi	r3, [r6, #0]
 80074a6:	3302      	addmi	r3, #2
 80074a8:	6033      	strmi	r3, [r6, #0]
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	f015 0506 	ands.w	r5, r5, #6
 80074b0:	d106      	bne.n	80074c0 <_printf_common+0x48>
 80074b2:	f104 0a19 	add.w	sl, r4, #25
 80074b6:	68e3      	ldr	r3, [r4, #12]
 80074b8:	6832      	ldr	r2, [r6, #0]
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	42ab      	cmp	r3, r5
 80074be:	dc26      	bgt.n	800750e <_printf_common+0x96>
 80074c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074c4:	6822      	ldr	r2, [r4, #0]
 80074c6:	3b00      	subs	r3, #0
 80074c8:	bf18      	it	ne
 80074ca:	2301      	movne	r3, #1
 80074cc:	0692      	lsls	r2, r2, #26
 80074ce:	d42b      	bmi.n	8007528 <_printf_common+0xb0>
 80074d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074d4:	4641      	mov	r1, r8
 80074d6:	4638      	mov	r0, r7
 80074d8:	47c8      	blx	r9
 80074da:	3001      	adds	r0, #1
 80074dc:	d01e      	beq.n	800751c <_printf_common+0xa4>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	f003 0306 	and.w	r3, r3, #6
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	bf02      	ittt	eq
 80074ea:	68e5      	ldreq	r5, [r4, #12]
 80074ec:	6833      	ldreq	r3, [r6, #0]
 80074ee:	1aed      	subeq	r5, r5, r3
 80074f0:	68a3      	ldr	r3, [r4, #8]
 80074f2:	bf0c      	ite	eq
 80074f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f8:	2500      	movne	r5, #0
 80074fa:	4293      	cmp	r3, r2
 80074fc:	bfc4      	itt	gt
 80074fe:	1a9b      	subgt	r3, r3, r2
 8007500:	18ed      	addgt	r5, r5, r3
 8007502:	2600      	movs	r6, #0
 8007504:	341a      	adds	r4, #26
 8007506:	42b5      	cmp	r5, r6
 8007508:	d11a      	bne.n	8007540 <_printf_common+0xc8>
 800750a:	2000      	movs	r0, #0
 800750c:	e008      	b.n	8007520 <_printf_common+0xa8>
 800750e:	2301      	movs	r3, #1
 8007510:	4652      	mov	r2, sl
 8007512:	4641      	mov	r1, r8
 8007514:	4638      	mov	r0, r7
 8007516:	47c8      	blx	r9
 8007518:	3001      	adds	r0, #1
 800751a:	d103      	bne.n	8007524 <_printf_common+0xac>
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007524:	3501      	adds	r5, #1
 8007526:	e7c6      	b.n	80074b6 <_printf_common+0x3e>
 8007528:	18e1      	adds	r1, r4, r3
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	2030      	movs	r0, #48	@ 0x30
 800752e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007532:	4422      	add	r2, r4
 8007534:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800753c:	3302      	adds	r3, #2
 800753e:	e7c7      	b.n	80074d0 <_printf_common+0x58>
 8007540:	2301      	movs	r3, #1
 8007542:	4622      	mov	r2, r4
 8007544:	4641      	mov	r1, r8
 8007546:	4638      	mov	r0, r7
 8007548:	47c8      	blx	r9
 800754a:	3001      	adds	r0, #1
 800754c:	d0e6      	beq.n	800751c <_printf_common+0xa4>
 800754e:	3601      	adds	r6, #1
 8007550:	e7d9      	b.n	8007506 <_printf_common+0x8e>
	...

08007554 <_printf_i>:
 8007554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007558:	7e0f      	ldrb	r7, [r1, #24]
 800755a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800755c:	2f78      	cmp	r7, #120	@ 0x78
 800755e:	4691      	mov	r9, r2
 8007560:	4680      	mov	r8, r0
 8007562:	460c      	mov	r4, r1
 8007564:	469a      	mov	sl, r3
 8007566:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800756a:	d807      	bhi.n	800757c <_printf_i+0x28>
 800756c:	2f62      	cmp	r7, #98	@ 0x62
 800756e:	d80a      	bhi.n	8007586 <_printf_i+0x32>
 8007570:	2f00      	cmp	r7, #0
 8007572:	f000 80d2 	beq.w	800771a <_printf_i+0x1c6>
 8007576:	2f58      	cmp	r7, #88	@ 0x58
 8007578:	f000 80b9 	beq.w	80076ee <_printf_i+0x19a>
 800757c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007580:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007584:	e03a      	b.n	80075fc <_printf_i+0xa8>
 8007586:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800758a:	2b15      	cmp	r3, #21
 800758c:	d8f6      	bhi.n	800757c <_printf_i+0x28>
 800758e:	a101      	add	r1, pc, #4	@ (adr r1, 8007594 <_printf_i+0x40>)
 8007590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007594:	080075ed 	.word	0x080075ed
 8007598:	08007601 	.word	0x08007601
 800759c:	0800757d 	.word	0x0800757d
 80075a0:	0800757d 	.word	0x0800757d
 80075a4:	0800757d 	.word	0x0800757d
 80075a8:	0800757d 	.word	0x0800757d
 80075ac:	08007601 	.word	0x08007601
 80075b0:	0800757d 	.word	0x0800757d
 80075b4:	0800757d 	.word	0x0800757d
 80075b8:	0800757d 	.word	0x0800757d
 80075bc:	0800757d 	.word	0x0800757d
 80075c0:	08007701 	.word	0x08007701
 80075c4:	0800762b 	.word	0x0800762b
 80075c8:	080076bb 	.word	0x080076bb
 80075cc:	0800757d 	.word	0x0800757d
 80075d0:	0800757d 	.word	0x0800757d
 80075d4:	08007723 	.word	0x08007723
 80075d8:	0800757d 	.word	0x0800757d
 80075dc:	0800762b 	.word	0x0800762b
 80075e0:	0800757d 	.word	0x0800757d
 80075e4:	0800757d 	.word	0x0800757d
 80075e8:	080076c3 	.word	0x080076c3
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	1d1a      	adds	r2, r3, #4
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6032      	str	r2, [r6, #0]
 80075f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075fc:	2301      	movs	r3, #1
 80075fe:	e09d      	b.n	800773c <_printf_i+0x1e8>
 8007600:	6833      	ldr	r3, [r6, #0]
 8007602:	6820      	ldr	r0, [r4, #0]
 8007604:	1d19      	adds	r1, r3, #4
 8007606:	6031      	str	r1, [r6, #0]
 8007608:	0606      	lsls	r6, r0, #24
 800760a:	d501      	bpl.n	8007610 <_printf_i+0xbc>
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	e003      	b.n	8007618 <_printf_i+0xc4>
 8007610:	0645      	lsls	r5, r0, #25
 8007612:	d5fb      	bpl.n	800760c <_printf_i+0xb8>
 8007614:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007618:	2d00      	cmp	r5, #0
 800761a:	da03      	bge.n	8007624 <_printf_i+0xd0>
 800761c:	232d      	movs	r3, #45	@ 0x2d
 800761e:	426d      	negs	r5, r5
 8007620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007624:	4859      	ldr	r0, [pc, #356]	@ (800778c <_printf_i+0x238>)
 8007626:	230a      	movs	r3, #10
 8007628:	e011      	b.n	800764e <_printf_i+0xfa>
 800762a:	6821      	ldr	r1, [r4, #0]
 800762c:	6833      	ldr	r3, [r6, #0]
 800762e:	0608      	lsls	r0, r1, #24
 8007630:	f853 5b04 	ldr.w	r5, [r3], #4
 8007634:	d402      	bmi.n	800763c <_printf_i+0xe8>
 8007636:	0649      	lsls	r1, r1, #25
 8007638:	bf48      	it	mi
 800763a:	b2ad      	uxthmi	r5, r5
 800763c:	2f6f      	cmp	r7, #111	@ 0x6f
 800763e:	4853      	ldr	r0, [pc, #332]	@ (800778c <_printf_i+0x238>)
 8007640:	6033      	str	r3, [r6, #0]
 8007642:	bf14      	ite	ne
 8007644:	230a      	movne	r3, #10
 8007646:	2308      	moveq	r3, #8
 8007648:	2100      	movs	r1, #0
 800764a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800764e:	6866      	ldr	r6, [r4, #4]
 8007650:	60a6      	str	r6, [r4, #8]
 8007652:	2e00      	cmp	r6, #0
 8007654:	bfa2      	ittt	ge
 8007656:	6821      	ldrge	r1, [r4, #0]
 8007658:	f021 0104 	bicge.w	r1, r1, #4
 800765c:	6021      	strge	r1, [r4, #0]
 800765e:	b90d      	cbnz	r5, 8007664 <_printf_i+0x110>
 8007660:	2e00      	cmp	r6, #0
 8007662:	d04b      	beq.n	80076fc <_printf_i+0x1a8>
 8007664:	4616      	mov	r6, r2
 8007666:	fbb5 f1f3 	udiv	r1, r5, r3
 800766a:	fb03 5711 	mls	r7, r3, r1, r5
 800766e:	5dc7      	ldrb	r7, [r0, r7]
 8007670:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007674:	462f      	mov	r7, r5
 8007676:	42bb      	cmp	r3, r7
 8007678:	460d      	mov	r5, r1
 800767a:	d9f4      	bls.n	8007666 <_printf_i+0x112>
 800767c:	2b08      	cmp	r3, #8
 800767e:	d10b      	bne.n	8007698 <_printf_i+0x144>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	07df      	lsls	r7, r3, #31
 8007684:	d508      	bpl.n	8007698 <_printf_i+0x144>
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	6861      	ldr	r1, [r4, #4]
 800768a:	4299      	cmp	r1, r3
 800768c:	bfde      	ittt	le
 800768e:	2330      	movle	r3, #48	@ 0x30
 8007690:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007694:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007698:	1b92      	subs	r2, r2, r6
 800769a:	6122      	str	r2, [r4, #16]
 800769c:	f8cd a000 	str.w	sl, [sp]
 80076a0:	464b      	mov	r3, r9
 80076a2:	aa03      	add	r2, sp, #12
 80076a4:	4621      	mov	r1, r4
 80076a6:	4640      	mov	r0, r8
 80076a8:	f7ff fee6 	bl	8007478 <_printf_common>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d14a      	bne.n	8007746 <_printf_i+0x1f2>
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	b004      	add	sp, #16
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	f043 0320 	orr.w	r3, r3, #32
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	4833      	ldr	r0, [pc, #204]	@ (8007790 <_printf_i+0x23c>)
 80076c4:	2778      	movs	r7, #120	@ 0x78
 80076c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	6831      	ldr	r1, [r6, #0]
 80076ce:	061f      	lsls	r7, r3, #24
 80076d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80076d4:	d402      	bmi.n	80076dc <_printf_i+0x188>
 80076d6:	065f      	lsls	r7, r3, #25
 80076d8:	bf48      	it	mi
 80076da:	b2ad      	uxthmi	r5, r5
 80076dc:	6031      	str	r1, [r6, #0]
 80076de:	07d9      	lsls	r1, r3, #31
 80076e0:	bf44      	itt	mi
 80076e2:	f043 0320 	orrmi.w	r3, r3, #32
 80076e6:	6023      	strmi	r3, [r4, #0]
 80076e8:	b11d      	cbz	r5, 80076f2 <_printf_i+0x19e>
 80076ea:	2310      	movs	r3, #16
 80076ec:	e7ac      	b.n	8007648 <_printf_i+0xf4>
 80076ee:	4827      	ldr	r0, [pc, #156]	@ (800778c <_printf_i+0x238>)
 80076f0:	e7e9      	b.n	80076c6 <_printf_i+0x172>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	f023 0320 	bic.w	r3, r3, #32
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	e7f6      	b.n	80076ea <_printf_i+0x196>
 80076fc:	4616      	mov	r6, r2
 80076fe:	e7bd      	b.n	800767c <_printf_i+0x128>
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	6825      	ldr	r5, [r4, #0]
 8007704:	6961      	ldr	r1, [r4, #20]
 8007706:	1d18      	adds	r0, r3, #4
 8007708:	6030      	str	r0, [r6, #0]
 800770a:	062e      	lsls	r6, r5, #24
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	d501      	bpl.n	8007714 <_printf_i+0x1c0>
 8007710:	6019      	str	r1, [r3, #0]
 8007712:	e002      	b.n	800771a <_printf_i+0x1c6>
 8007714:	0668      	lsls	r0, r5, #25
 8007716:	d5fb      	bpl.n	8007710 <_printf_i+0x1bc>
 8007718:	8019      	strh	r1, [r3, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	4616      	mov	r6, r2
 8007720:	e7bc      	b.n	800769c <_printf_i+0x148>
 8007722:	6833      	ldr	r3, [r6, #0]
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	6032      	str	r2, [r6, #0]
 8007728:	681e      	ldr	r6, [r3, #0]
 800772a:	6862      	ldr	r2, [r4, #4]
 800772c:	2100      	movs	r1, #0
 800772e:	4630      	mov	r0, r6
 8007730:	f7f8 fd56 	bl	80001e0 <memchr>
 8007734:	b108      	cbz	r0, 800773a <_printf_i+0x1e6>
 8007736:	1b80      	subs	r0, r0, r6
 8007738:	6060      	str	r0, [r4, #4]
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	2300      	movs	r3, #0
 8007740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007744:	e7aa      	b.n	800769c <_printf_i+0x148>
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	4632      	mov	r2, r6
 800774a:	4649      	mov	r1, r9
 800774c:	4640      	mov	r0, r8
 800774e:	47d0      	blx	sl
 8007750:	3001      	adds	r0, #1
 8007752:	d0ad      	beq.n	80076b0 <_printf_i+0x15c>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	079b      	lsls	r3, r3, #30
 8007758:	d413      	bmi.n	8007782 <_printf_i+0x22e>
 800775a:	68e0      	ldr	r0, [r4, #12]
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	4298      	cmp	r0, r3
 8007760:	bfb8      	it	lt
 8007762:	4618      	movlt	r0, r3
 8007764:	e7a6      	b.n	80076b4 <_printf_i+0x160>
 8007766:	2301      	movs	r3, #1
 8007768:	4632      	mov	r2, r6
 800776a:	4649      	mov	r1, r9
 800776c:	4640      	mov	r0, r8
 800776e:	47d0      	blx	sl
 8007770:	3001      	adds	r0, #1
 8007772:	d09d      	beq.n	80076b0 <_printf_i+0x15c>
 8007774:	3501      	adds	r5, #1
 8007776:	68e3      	ldr	r3, [r4, #12]
 8007778:	9903      	ldr	r1, [sp, #12]
 800777a:	1a5b      	subs	r3, r3, r1
 800777c:	42ab      	cmp	r3, r5
 800777e:	dcf2      	bgt.n	8007766 <_printf_i+0x212>
 8007780:	e7eb      	b.n	800775a <_printf_i+0x206>
 8007782:	2500      	movs	r5, #0
 8007784:	f104 0619 	add.w	r6, r4, #25
 8007788:	e7f5      	b.n	8007776 <_printf_i+0x222>
 800778a:	bf00      	nop
 800778c:	08024fb5 	.word	0x08024fb5
 8007790:	08024fc6 	.word	0x08024fc6

08007794 <__sflush_r>:
 8007794:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800779c:	0716      	lsls	r6, r2, #28
 800779e:	4605      	mov	r5, r0
 80077a0:	460c      	mov	r4, r1
 80077a2:	d454      	bmi.n	800784e <__sflush_r+0xba>
 80077a4:	684b      	ldr	r3, [r1, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dc02      	bgt.n	80077b0 <__sflush_r+0x1c>
 80077aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	dd48      	ble.n	8007842 <__sflush_r+0xae>
 80077b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d045      	beq.n	8007842 <__sflush_r+0xae>
 80077b6:	2300      	movs	r3, #0
 80077b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077bc:	682f      	ldr	r7, [r5, #0]
 80077be:	6a21      	ldr	r1, [r4, #32]
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	d030      	beq.n	8007826 <__sflush_r+0x92>
 80077c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	0759      	lsls	r1, r3, #29
 80077ca:	d505      	bpl.n	80077d8 <__sflush_r+0x44>
 80077cc:	6863      	ldr	r3, [r4, #4]
 80077ce:	1ad2      	subs	r2, r2, r3
 80077d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077d2:	b10b      	cbz	r3, 80077d8 <__sflush_r+0x44>
 80077d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077d6:	1ad2      	subs	r2, r2, r3
 80077d8:	2300      	movs	r3, #0
 80077da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077dc:	6a21      	ldr	r1, [r4, #32]
 80077de:	4628      	mov	r0, r5
 80077e0:	47b0      	blx	r6
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	d106      	bne.n	80077f6 <__sflush_r+0x62>
 80077e8:	6829      	ldr	r1, [r5, #0]
 80077ea:	291d      	cmp	r1, #29
 80077ec:	d82b      	bhi.n	8007846 <__sflush_r+0xb2>
 80077ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007898 <__sflush_r+0x104>)
 80077f0:	410a      	asrs	r2, r1
 80077f2:	07d6      	lsls	r6, r2, #31
 80077f4:	d427      	bmi.n	8007846 <__sflush_r+0xb2>
 80077f6:	2200      	movs	r2, #0
 80077f8:	6062      	str	r2, [r4, #4]
 80077fa:	04d9      	lsls	r1, r3, #19
 80077fc:	6922      	ldr	r2, [r4, #16]
 80077fe:	6022      	str	r2, [r4, #0]
 8007800:	d504      	bpl.n	800780c <__sflush_r+0x78>
 8007802:	1c42      	adds	r2, r0, #1
 8007804:	d101      	bne.n	800780a <__sflush_r+0x76>
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	b903      	cbnz	r3, 800780c <__sflush_r+0x78>
 800780a:	6560      	str	r0, [r4, #84]	@ 0x54
 800780c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800780e:	602f      	str	r7, [r5, #0]
 8007810:	b1b9      	cbz	r1, 8007842 <__sflush_r+0xae>
 8007812:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007816:	4299      	cmp	r1, r3
 8007818:	d002      	beq.n	8007820 <__sflush_r+0x8c>
 800781a:	4628      	mov	r0, r5
 800781c:	f7ff fbf2 	bl	8007004 <_free_r>
 8007820:	2300      	movs	r3, #0
 8007822:	6363      	str	r3, [r4, #52]	@ 0x34
 8007824:	e00d      	b.n	8007842 <__sflush_r+0xae>
 8007826:	2301      	movs	r3, #1
 8007828:	4628      	mov	r0, r5
 800782a:	47b0      	blx	r6
 800782c:	4602      	mov	r2, r0
 800782e:	1c50      	adds	r0, r2, #1
 8007830:	d1c9      	bne.n	80077c6 <__sflush_r+0x32>
 8007832:	682b      	ldr	r3, [r5, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0c6      	beq.n	80077c6 <__sflush_r+0x32>
 8007838:	2b1d      	cmp	r3, #29
 800783a:	d001      	beq.n	8007840 <__sflush_r+0xac>
 800783c:	2b16      	cmp	r3, #22
 800783e:	d11e      	bne.n	800787e <__sflush_r+0xea>
 8007840:	602f      	str	r7, [r5, #0]
 8007842:	2000      	movs	r0, #0
 8007844:	e022      	b.n	800788c <__sflush_r+0xf8>
 8007846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800784a:	b21b      	sxth	r3, r3
 800784c:	e01b      	b.n	8007886 <__sflush_r+0xf2>
 800784e:	690f      	ldr	r7, [r1, #16]
 8007850:	2f00      	cmp	r7, #0
 8007852:	d0f6      	beq.n	8007842 <__sflush_r+0xae>
 8007854:	0793      	lsls	r3, r2, #30
 8007856:	680e      	ldr	r6, [r1, #0]
 8007858:	bf08      	it	eq
 800785a:	694b      	ldreq	r3, [r1, #20]
 800785c:	600f      	str	r7, [r1, #0]
 800785e:	bf18      	it	ne
 8007860:	2300      	movne	r3, #0
 8007862:	eba6 0807 	sub.w	r8, r6, r7
 8007866:	608b      	str	r3, [r1, #8]
 8007868:	f1b8 0f00 	cmp.w	r8, #0
 800786c:	dde9      	ble.n	8007842 <__sflush_r+0xae>
 800786e:	6a21      	ldr	r1, [r4, #32]
 8007870:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007872:	4643      	mov	r3, r8
 8007874:	463a      	mov	r2, r7
 8007876:	4628      	mov	r0, r5
 8007878:	47b0      	blx	r6
 800787a:	2800      	cmp	r0, #0
 800787c:	dc08      	bgt.n	8007890 <__sflush_r+0xfc>
 800787e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	f04f 30ff 	mov.w	r0, #4294967295
 800788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007890:	4407      	add	r7, r0
 8007892:	eba8 0800 	sub.w	r8, r8, r0
 8007896:	e7e7      	b.n	8007868 <__sflush_r+0xd4>
 8007898:	dfbffffe 	.word	0xdfbffffe

0800789c <_fflush_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	4605      	mov	r5, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	b913      	cbnz	r3, 80078ac <_fflush_r+0x10>
 80078a6:	2500      	movs	r5, #0
 80078a8:	4628      	mov	r0, r5
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	b118      	cbz	r0, 80078b6 <_fflush_r+0x1a>
 80078ae:	6a03      	ldr	r3, [r0, #32]
 80078b0:	b90b      	cbnz	r3, 80078b6 <_fflush_r+0x1a>
 80078b2:	f7ff f9ad 	bl	8006c10 <__sinit>
 80078b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0f3      	beq.n	80078a6 <_fflush_r+0xa>
 80078be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078c0:	07d0      	lsls	r0, r2, #31
 80078c2:	d404      	bmi.n	80078ce <_fflush_r+0x32>
 80078c4:	0599      	lsls	r1, r3, #22
 80078c6:	d402      	bmi.n	80078ce <_fflush_r+0x32>
 80078c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ca:	f7ff fb98 	bl	8006ffe <__retarget_lock_acquire_recursive>
 80078ce:	4628      	mov	r0, r5
 80078d0:	4621      	mov	r1, r4
 80078d2:	f7ff ff5f 	bl	8007794 <__sflush_r>
 80078d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078d8:	07da      	lsls	r2, r3, #31
 80078da:	4605      	mov	r5, r0
 80078dc:	d4e4      	bmi.n	80078a8 <_fflush_r+0xc>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	059b      	lsls	r3, r3, #22
 80078e2:	d4e1      	bmi.n	80078a8 <_fflush_r+0xc>
 80078e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078e6:	f7ff fb8b 	bl	8007000 <__retarget_lock_release_recursive>
 80078ea:	e7dd      	b.n	80078a8 <_fflush_r+0xc>

080078ec <__swhatbuf_r>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	460c      	mov	r4, r1
 80078f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f4:	2900      	cmp	r1, #0
 80078f6:	b096      	sub	sp, #88	@ 0x58
 80078f8:	4615      	mov	r5, r2
 80078fa:	461e      	mov	r6, r3
 80078fc:	da0d      	bge.n	800791a <__swhatbuf_r+0x2e>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007904:	f04f 0100 	mov.w	r1, #0
 8007908:	bf14      	ite	ne
 800790a:	2340      	movne	r3, #64	@ 0x40
 800790c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007910:	2000      	movs	r0, #0
 8007912:	6031      	str	r1, [r6, #0]
 8007914:	602b      	str	r3, [r5, #0]
 8007916:	b016      	add	sp, #88	@ 0x58
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	466a      	mov	r2, sp
 800791c:	f000 f848 	bl	80079b0 <_fstat_r>
 8007920:	2800      	cmp	r0, #0
 8007922:	dbec      	blt.n	80078fe <__swhatbuf_r+0x12>
 8007924:	9901      	ldr	r1, [sp, #4]
 8007926:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800792a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800792e:	4259      	negs	r1, r3
 8007930:	4159      	adcs	r1, r3
 8007932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007936:	e7eb      	b.n	8007910 <__swhatbuf_r+0x24>

08007938 <__smakebuf_r>:
 8007938:	898b      	ldrh	r3, [r1, #12]
 800793a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800793c:	079d      	lsls	r5, r3, #30
 800793e:	4606      	mov	r6, r0
 8007940:	460c      	mov	r4, r1
 8007942:	d507      	bpl.n	8007954 <__smakebuf_r+0x1c>
 8007944:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	6123      	str	r3, [r4, #16]
 800794c:	2301      	movs	r3, #1
 800794e:	6163      	str	r3, [r4, #20]
 8007950:	b003      	add	sp, #12
 8007952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007954:	ab01      	add	r3, sp, #4
 8007956:	466a      	mov	r2, sp
 8007958:	f7ff ffc8 	bl	80078ec <__swhatbuf_r>
 800795c:	9f00      	ldr	r7, [sp, #0]
 800795e:	4605      	mov	r5, r0
 8007960:	4639      	mov	r1, r7
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff fbba 	bl	80070dc <_malloc_r>
 8007968:	b948      	cbnz	r0, 800797e <__smakebuf_r+0x46>
 800796a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800796e:	059a      	lsls	r2, r3, #22
 8007970:	d4ee      	bmi.n	8007950 <__smakebuf_r+0x18>
 8007972:	f023 0303 	bic.w	r3, r3, #3
 8007976:	f043 0302 	orr.w	r3, r3, #2
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	e7e2      	b.n	8007944 <__smakebuf_r+0xc>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	6020      	str	r0, [r4, #0]
 8007982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007986:	81a3      	strh	r3, [r4, #12]
 8007988:	9b01      	ldr	r3, [sp, #4]
 800798a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800798e:	b15b      	cbz	r3, 80079a8 <__smakebuf_r+0x70>
 8007990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007994:	4630      	mov	r0, r6
 8007996:	f000 f81d 	bl	80079d4 <_isatty_r>
 800799a:	b128      	cbz	r0, 80079a8 <__smakebuf_r+0x70>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f023 0303 	bic.w	r3, r3, #3
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	81a3      	strh	r3, [r4, #12]
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	431d      	orrs	r5, r3
 80079ac:	81a5      	strh	r5, [r4, #12]
 80079ae:	e7cf      	b.n	8007950 <__smakebuf_r+0x18>

080079b0 <_fstat_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d07      	ldr	r5, [pc, #28]	@ (80079d0 <_fstat_r+0x20>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	4611      	mov	r1, r2
 80079bc:	602b      	str	r3, [r5, #0]
 80079be:	f7f9 fe4a 	bl	8001656 <_fstat>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	d102      	bne.n	80079cc <_fstat_r+0x1c>
 80079c6:	682b      	ldr	r3, [r5, #0]
 80079c8:	b103      	cbz	r3, 80079cc <_fstat_r+0x1c>
 80079ca:	6023      	str	r3, [r4, #0]
 80079cc:	bd38      	pop	{r3, r4, r5, pc}
 80079ce:	bf00      	nop
 80079d0:	200009e4 	.word	0x200009e4

080079d4 <_isatty_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d06      	ldr	r5, [pc, #24]	@ (80079f0 <_isatty_r+0x1c>)
 80079d8:	2300      	movs	r3, #0
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	602b      	str	r3, [r5, #0]
 80079e0:	f7f9 fe49 	bl	8001676 <_isatty>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_isatty_r+0x1a>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_isatty_r+0x1a>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	200009e4 	.word	0x200009e4

080079f4 <_sbrk_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d06      	ldr	r5, [pc, #24]	@ (8007a10 <_sbrk_r+0x1c>)
 80079f8:	2300      	movs	r3, #0
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f7f9 fe52 	bl	80016a8 <_sbrk>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_sbrk_r+0x1a>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_sbrk_r+0x1a>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	200009e4 	.word	0x200009e4

08007a14 <sqrtf>:
 8007a14:	b508      	push	{r3, lr}
 8007a16:	ed2d 8b02 	vpush	{d8}
 8007a1a:	eeb0 8a40 	vmov.f32	s16, s0
 8007a1e:	f000 f817 	bl	8007a50 <__ieee754_sqrtf>
 8007a22:	eeb4 8a48 	vcmp.f32	s16, s16
 8007a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2a:	d60c      	bvs.n	8007a46 <sqrtf+0x32>
 8007a2c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007a4c <sqrtf+0x38>
 8007a30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a38:	d505      	bpl.n	8007a46 <sqrtf+0x32>
 8007a3a:	f7ff fab5 	bl	8006fa8 <__errno>
 8007a3e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007a42:	2321      	movs	r3, #33	@ 0x21
 8007a44:	6003      	str	r3, [r0, #0]
 8007a46:	ecbd 8b02 	vpop	{d8}
 8007a4a:	bd08      	pop	{r3, pc}
 8007a4c:	00000000 	.word	0x00000000

08007a50 <__ieee754_sqrtf>:
 8007a50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007a54:	4770      	bx	lr
	...

08007a58 <_init>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr

08007a64 <_fini>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	bf00      	nop
 8007a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6a:	bc08      	pop	{r3}
 8007a6c:	469e      	mov	lr, r3
 8007a6e:	4770      	bx	lr
